Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x1ea40a0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR_32'<<0x1ea40a0>>  #uses=1
  CS<0x1f41930> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR_32'<<0x2139af0>>  #uses=1
  CS<0x1e14940> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i291.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i291.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i291.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_XOR_32:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i292.i = bitcast %struct.tnum* %var_off.i291.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR_32'<<0x16f0330>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
GLOBAL_BITVECTOR_SUFFIX: 22
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_0
[lookInsideStruct] singleValueType:dst_reg_22_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_1
[lookInsideStruct] singleValueType:dst_reg_22_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_2
[lookInsideStruct] singleValueType:dst_reg_22_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_3
[lookInsideStruct] singleValueType:dst_reg_22_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_4
[lookInsideStruct] singleValueType:dst_reg_22_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_5
[lookInsideStruct] singleValueType:dst_reg_22_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_6
[lookInsideStruct] singleValueType:dst_reg_22_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_7
[lookInsideStruct] singleValueType:dst_reg_22_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_8
[lookInsideStruct] singleValueType:dst_reg_22_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_9
[lookInsideStruct] singleValueType:dst_reg_22_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_10
[lookInsideStruct] singleValueType:dst_reg_22_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_11
[lookInsideStruct] singleValueType:dst_reg_22_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_12
[lookInsideStruct] singleValueType:dst_reg_22_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_13
[lookInsideStruct] singleValueType:dst_reg_22_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_14
[lookInsideStruct] singleValueType:src_reg_22_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_15
[lookInsideStruct] singleValueType:src_reg_22_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_16
[lookInsideStruct] singleValueType:src_reg_22_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_17
[lookInsideStruct] singleValueType:src_reg_22_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_18
[lookInsideStruct] singleValueType:src_reg_22_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_19
[lookInsideStruct] singleValueType:src_reg_22_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_20
[lookInsideStruct] singleValueType:src_reg_22_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_21
[lookInsideStruct] singleValueType:src_reg_22_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_22
[lookInsideStruct] singleValueType:src_reg_22_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_23
[lookInsideStruct] singleValueType:src_reg_22_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_24
[lookInsideStruct] singleValueType:src_reg_22_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_25
[lookInsideStruct] singleValueType:src_reg_22_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_26
[lookInsideStruct] singleValueType:src_reg_22_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_27
[lookInsideStruct] singleValueType:src_reg_22_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_22_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_22_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_22_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleLoadInst] (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_22_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_22_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleLoadInst] (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_22_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_22_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleLoadInst] (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)

-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i.i_22_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i.i_22_33
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleLoadInst] (= dst_reg_22_4 i18.i.i_22_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)

-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i.i_22_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i.i_22_34
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleLoadInst] (= dst_reg_22_5 i20.i.i_22_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)

-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i.i_22_33
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i.i_22_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i.i_22_36
[handleBinaryOperatorInst] AND instruction
(= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i.i_22_34
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i.i_22_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i.i_22_38
[handleBinaryOperatorInst] AND instruction
(= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_22_36
[handleStoreInst] BVToStore: and.i.i.i_22_36
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i.i_22_36 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_22_38
[handleStoreInst] BVToStore: and6.i.i.i_22_38
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i.i_22_38 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i.i_22_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i.i_22_39
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleLoadInst] (= dst_reg_22_8 i23.i.i_22_39)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)

-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i.i_22_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i.i_22_40
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleLoadInst] (= dst_reg_22_9 i24.i.i_22_40)
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)

-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_22_40
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_22_39
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i.i_22_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i.i_22_41
[handleBinaryOperatorInst] XOR instruction
(= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i.i_22_41
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_22_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_22_43
[handleICmpInst] (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_22_39
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i_22_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i_22_45
[handleBinaryOperatorInst] AND instruction
(= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i_22_45
[handleStoreInst] BVToStore: and6.i.i_22_45
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i_22_45 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_22_40
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i.i_22_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i.i_22_47
[handleBinaryOperatorInst] AND instruction
(= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_49
[lookInsideStruct] singleValueType:dst_reg_22_49
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_50
[lookInsideStruct] singleValueType:dst_reg_22_50
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_51
[lookInsideStruct] singleValueType:dst_reg_22_51
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_52
[lookInsideStruct] singleValueType:dst_reg_22_52
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_53
[lookInsideStruct] singleValueType:dst_reg_22_53
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_54
[lookInsideStruct] singleValueType:dst_reg_22_54
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_55
[lookInsideStruct] singleValueType:dst_reg_22_55
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_56
[lookInsideStruct] singleValueType:dst_reg_22_56
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_57
[lookInsideStruct] singleValueType:dst_reg_22_57
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_58
[lookInsideStruct] singleValueType:dst_reg_22_58
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_59
[lookInsideStruct] singleValueType:dst_reg_22_59
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_60
[lookInsideStruct] singleValueType:dst_reg_22_60
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_61
[lookInsideStruct] singleValueType:dst_reg_22_61
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_62
[lookInsideStruct] singleValueType:dst_reg_22_62
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_63
[lookInsideStruct] singleValueType:src_reg_22_63
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_64
[lookInsideStruct] singleValueType:src_reg_22_64
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_65
[lookInsideStruct] singleValueType:src_reg_22_65
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_66
[lookInsideStruct] singleValueType:src_reg_22_66
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_67
[lookInsideStruct] singleValueType:src_reg_22_67
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_68
[lookInsideStruct] singleValueType:src_reg_22_68
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_69
[lookInsideStruct] singleValueType:src_reg_22_69
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_70
[lookInsideStruct] singleValueType:src_reg_22_70
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_71
[lookInsideStruct] singleValueType:src_reg_22_71
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_72
[lookInsideStruct] singleValueType:src_reg_22_72
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_73
[lookInsideStruct] singleValueType:src_reg_22_73
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_74
[lookInsideStruct] singleValueType:src_reg_22_74
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_75
[lookInsideStruct] singleValueType:src_reg_22_75
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_76
[lookInsideStruct] singleValueType:src_reg_22_76
[setupBVTreeForArg] returning BVTree: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i.i
[handleMemoryPhiNode] incomingAccessI: 5 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_22_63)
(= src_reg_22_15 src_reg_22_64)
(= src_reg_22_16 src_reg_22_65)
(= src_reg_22_17 src_reg_22_66)
(= src_reg_22_18 src_reg_22_67)
(= src_reg_22_19 src_reg_22_68)
(= src_reg_22_20 src_reg_22_69)
(= src_reg_22_21 src_reg_22_70)
(= src_reg_22_22 src_reg_22_71)
(= src_reg_22_23 src_reg_22_72)
(= src_reg_22_24 src_reg_22_73)
(= src_reg_22_25 src_reg_22_74)
(= src_reg_22_26 src_reg_22_75)
(= src_reg_22_27 src_reg_22_76)
(= #x00000001 dst_reg_22_49)
(= dst_reg_22_1 dst_reg_22_50)
(= dst_reg_22_2 dst_reg_22_51)
(= dst_reg_22_3 dst_reg_22_52)
(= and.i.i.i_22_36 dst_reg_22_53)
(= and6.i.i.i_22_38 dst_reg_22_54)
(= dst_reg_22_6 dst_reg_22_55)
(= dst_reg_22_7 dst_reg_22_56)
(= and6.i.i_22_45 dst_reg_22_57)
(= dst_reg_22_9 dst_reg_22_58)
(= dst_reg_22_10 dst_reg_22_59)
(= dst_reg_22_11 dst_reg_22_60)
(= dst_reg_22_12 dst_reg_22_61)
(= dst_reg_22_13 dst_reg_22_62)
]
[handleMemoryPhiNode] incomingBBI: if.else.i.i
[handleMemoryPhiNode] incomingAccessI: 6 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_22_63)
(= src_reg_22_15 src_reg_22_64)
(= src_reg_22_16 src_reg_22_65)
(= src_reg_22_17 src_reg_22_66)
(= src_reg_22_18 src_reg_22_67)
(= src_reg_22_19 src_reg_22_68)
(= src_reg_22_20 src_reg_22_69)
(= src_reg_22_21 src_reg_22_70)
(= src_reg_22_22 src_reg_22_71)
(= src_reg_22_23 src_reg_22_72)
(= src_reg_22_24 src_reg_22_73)
(= src_reg_22_25 src_reg_22_74)
(= src_reg_22_26 src_reg_22_75)
(= src_reg_22_27 src_reg_22_76)
(= #x00000001 dst_reg_22_49)
(= dst_reg_22_1 dst_reg_22_50)
(= dst_reg_22_2 dst_reg_22_51)
(= dst_reg_22_3 dst_reg_22_52)
(= and.i.i.i_22_36 dst_reg_22_53)
(= and6.i.i.i_22_38 dst_reg_22_54)
(= dst_reg_22_6 dst_reg_22_55)
(= dst_reg_22_7 dst_reg_22_56)
(= #x0000000000000000 dst_reg_22_57)
(= dst_reg_22_9 dst_reg_22_58)
(= dst_reg_22_10 dst_reg_22_59)
(= dst_reg_22_11 dst_reg_22_60)
(= dst_reg_22_12 dst_reg_22_61)
(= dst_reg_22_13 dst_reg_22_62)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_22_63)
  (= src_reg_22_15 src_reg_22_64)
  (= src_reg_22_16 src_reg_22_65)
  (= src_reg_22_17 src_reg_22_66)
  (= src_reg_22_18 src_reg_22_67)
  (= src_reg_22_19 src_reg_22_68)
  (= src_reg_22_20 src_reg_22_69)
  (= src_reg_22_21 src_reg_22_70)
  (= src_reg_22_22 src_reg_22_71)
  (= src_reg_22_23 src_reg_22_72)
  (= src_reg_22_24 src_reg_22_73)
  (= src_reg_22_25 src_reg_22_74)
  (= src_reg_22_26 src_reg_22_75)
  (= src_reg_22_27 src_reg_22_76)
  (= #x00000001 dst_reg_22_49)
  (= dst_reg_22_1 dst_reg_22_50)
  (= dst_reg_22_2 dst_reg_22_51)
  (= dst_reg_22_3 dst_reg_22_52)
  (= and.i.i.i_22_36 dst_reg_22_53)
  (= and6.i.i.i_22_38 dst_reg_22_54)
  (= dst_reg_22_6 dst_reg_22_55)
  (= dst_reg_22_7 dst_reg_22_56)
  (= #x0000000000000000 dst_reg_22_57)
  (= dst_reg_22_9 dst_reg_22_58)
  (= dst_reg_22_10 dst_reg_22_59)
  (= dst_reg_22_11 dst_reg_22_60)
  (= dst_reg_22_12 dst_reg_22_61)
  (= dst_reg_22_13 dst_reg_22_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_22_63)
  (= src_reg_22_15 src_reg_22_64)
  (= src_reg_22_16 src_reg_22_65)
  (= src_reg_22_17 src_reg_22_66)
  (= src_reg_22_18 src_reg_22_67)
  (= src_reg_22_19 src_reg_22_68)
  (= src_reg_22_20 src_reg_22_69)
  (= src_reg_22_21 src_reg_22_70)
  (= src_reg_22_22 src_reg_22_71)
  (= src_reg_22_23 src_reg_22_72)
  (= src_reg_22_24 src_reg_22_73)
  (= src_reg_22_25 src_reg_22_74)
  (= src_reg_22_26 src_reg_22_75)
  (= src_reg_22_27 src_reg_22_76)
  (= #x00000001 dst_reg_22_49)
  (= dst_reg_22_1 dst_reg_22_50)
  (= dst_reg_22_2 dst_reg_22_51)
  (= dst_reg_22_3 dst_reg_22_52)
  (= and.i.i.i_22_36 dst_reg_22_53)
  (= and6.i.i.i_22_38 dst_reg_22_54)
  (= dst_reg_22_6 dst_reg_22_55)
  (= dst_reg_22_7 dst_reg_22_56)
  (= and6.i.i_22_45 dst_reg_22_57)
  (= dst_reg_22_9 dst_reg_22_58)
  (= dst_reg_22_10 dst_reg_22_59)
  (= dst_reg_22_11 dst_reg_22_60)
  (= dst_reg_22_12 dst_reg_22_61)
  (= dst_reg_22_13 dst_reg_22_62)
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[handlePhiNodeSetupBitVecs] valueI:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i.i_coerce_reg_to_size.exit.i_22_78
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_22_78
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_22_78
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i.i_22_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i.i_22_79
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i.i_22_47
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_22_78
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))

-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_22_79
[handleStoreInst] BVToStore: storemerge.i.i_22_79
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i.i_22_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i.i_22_81
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleLoadInst] (= dst_reg_22_57 i27.i.i_22_81)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:3
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_22_81
[handleStoreInst] BVToStore: i27.i.i_22_81
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(42)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i.i_22_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_22_79
[handleStoreInst] BVToStore: storemerge.i.i_22_79
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_56 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_22_30
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i6.i_22_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i6.i_22_83
[handleBinaryOperatorInst] AND instruction
(= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_22_32
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_22_31
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i13.i_22_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i13.i_22_84
[handleBinaryOperatorInst] XOR instruction
(= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i13.i_22_84
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i15.i_22_86
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i15.i_22_86
[handleICmpInst] (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:6
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_22_31
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i16.i_22_88
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i16.i_22_88
[handleBinaryOperatorInst] AND instruction
(= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_22_32
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i17.i_22_90
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i17.i_22_90
[handleBinaryOperatorInst] AND instruction
(= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_22_86
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i16.i_22_88
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0_22_92
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0_22_92
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_22_86
[handleSelectInst] z3ExprSelectOp2: and6.i16.i_22_88
[handleSelectInst] z3ExprSelectOp3: #x0000000000000000
[handleSelectInst] z3ExprRes: src_reg1.sroa.17.0_22_92
[handleSelectInst](ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_22_86
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i17.i_22_90
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i20.i_22_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i20.i_22_94
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_22_86
[handleSelectInst] z3ExprSelectOp2: and8.i17.i_22_90
[handleSelectInst] z3ExprSelectOp3: #x00000000ffffffff
[handleSelectInst] z3ExprRes: storemerge.i20.i_22_94
[handleSelectInst](ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_22_83
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_22_96
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_22_96
[handleICmpInst] (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_22_92
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_22_94
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i.not_22_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i.not_22_97
[handleICmpInst] (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_22_92
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_22_94
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_22_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_22_98
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_49 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] definingMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_53 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}

-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
i.i.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_22_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_49 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_53 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i291.i.repack1, dst_reg, [5, 1]
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  br i1 %tobool.not.i.i, label %sw.default.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
var_off.i291.i.repack1, dst_reg, [5, 1]
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
frameno.i30.i, dst_reg, [11]
smax_value.i.i, dst_reg, [7]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_22_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.default.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_22_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_22_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_22_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 19 = MemoryDef(18)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i291.i.repack1, dst_reg, [5, 1]
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
frameno.i30.i, dst_reg, [11]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i298.i_22_119
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i298.i_22_119
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleLoadInst] (= #x0000000000000000 i18.i298.i_22_119)
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:1
  (= #x0000000000000000 i18.i298.i_22_119)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 20 = MemoryDef(19)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i291.i.repack1, dst_reg, [5, 1]
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
frameno.i30.i, dst_reg, [11]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i300.i_22_120
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i300.i_22_120
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleLoadInst] (= #xffffffffffffffff i20.i300.i_22_120)
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:2
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i298.i_22_119
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i301.i_22_122
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i301.i_22_122
[handleBinaryOperatorInst] AND instruction
(= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i300.i_22_120
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i302.i_22_124
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i302.i_22_124
[handleBinaryOperatorInst] AND instruction
(= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_22_122
[handleStoreInst] BVToStore: and.i.i301.i_22_122
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i301.i_22_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_22_124
[handleStoreInst] BVToStore: and6.i.i302.i_22_124
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i302.i_22_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handleStoreInst] BVToStore: #x00000000ffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handleStoreInst] BVToStore: #x00000000ffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handleStoreInst] BVToStore: #x00000000ffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handleStoreInst] BVToStore: #x00000000ffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000ffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  %i.i333.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 32 = MemoryDef(31)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i291.i.repack1, dst_reg, [5, 1]
var_off.i291.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
frameno.i30.i, dst_reg, [11]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_22_132
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_22_132
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleLoadInst] (= #x0000000000000000 i.i333.i_22_132)
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:5
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %xor.i.i.i = xor i64 %i.i333.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_22_132
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_22_134
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_22_134
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_22_134
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_22_136
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_22_136
[handleICmpInst] (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_22_134
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_22_138
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_22_138
[handleICmpInst] (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_22_134
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_22_140
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_22_140
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_22_138
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_22_140
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i.i333.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_22_134
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_22_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_22_141
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_22_138
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_22_140
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_22_134
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_22_141
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_22_138
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_22_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_22_144
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_22_138
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_22_144
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_22_141
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_22_146
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_22_146
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_22_144
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_22_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_22_148
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_22_141
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_22_150
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_22_150
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_22_146
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_22_150
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_22_141
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_22_151
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_22_151
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_22_146
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_22_150
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_22_141
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_22_151
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_22_146
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_22_148
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_22_144
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_22_152
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_22_152
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_22_146
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_22_148
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_22_144
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_22_152
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_22_151
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_22_154
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_22_154
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
  (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
  (= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
  (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_22_152
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_22_156
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_22_156
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_22_151
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_22_158
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_22_158
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_22_158
   (bvshl word.addr.1.i.i.i.i.i_22_151 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_22_154
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_22_158
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_22_151
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_22_159
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_22_159
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_22_154
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_22_158
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_22_151
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_22_159
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158)
     (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_22_154
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_22_156
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_22_152
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_22_160
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_22_160
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_22_154
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_22_156
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_22_152
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_22_160
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156)
     (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_22_159
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_22_162
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_22_162
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_22_159 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= tobool14.not.i.i.i.i.i_22_162 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
  (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
  (= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
  (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
  (= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 #xfffffff8))
  (= shl11.i.i.i.i.i_22_158
   (bvshl word.addr.1.i.i.i.i.i_22_151 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158)
     (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156)
     (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))
  (ite (bvult word.addr.2.i.i.i.i.i_22_159 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= tobool14.not.i.i.i.i.i_22_162 #b0))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_22_160
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_22_164
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_22_164
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_22_164 (bvadd num.2.i.i.i.i.i_22_160 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_22_159
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_22_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_22_166
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_22_166
   (bvshl word.addr.2.i.i.i.i.i_22_159 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_22_162
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_22_166
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_22_159
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_22_167
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_22_167
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_22_162
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_22_166
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_22_159
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_22_167
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= word.addr.3.i.i.i.i.i_22_167 shl17.i.i.i.i.i_22_166)
     (= word.addr.3.i.i.i.i.i_22_167 word.addr.2.i.i.i.i.i_22_159))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_22_162
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_22_164
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_22_160
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_22_168
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_22_168
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_22_162
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_22_164
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_22_160
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_22_168
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= num.3.i.i.i.i.i_22_168 sub16.i.i.i.i.i_22_164)
     (= num.3.i.i.i.i.i_22_168 num.2.i.i.i.i.i_22_160))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_22_167
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_22_170
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_22_170
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_22_167 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= tobool20.not.i.i.i.i.i_22_170 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
  (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
  (= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
  (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
  (= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 #xfffffff8))
  (= shl11.i.i.i.i.i_22_158
   (bvshl word.addr.1.i.i.i.i.i_22_151 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158)
     (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156)
     (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))
  (ite (bvult word.addr.2.i.i.i.i.i_22_159 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= tobool14.not.i.i.i.i.i_22_162 #b0))
  (= sub16.i.i.i.i.i_22_164 (bvadd num.2.i.i.i.i.i_22_160 #xfffffffc))
  (= shl17.i.i.i.i.i_22_166
   (bvshl word.addr.2.i.i.i.i.i_22_159 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= word.addr.3.i.i.i.i.i_22_167 shl17.i.i.i.i.i_22_166)
     (= word.addr.3.i.i.i.i.i_22_167 word.addr.2.i.i.i.i.i_22_159))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= num.3.i.i.i.i.i_22_168 sub16.i.i.i.i.i_22_164)
     (= num.3.i.i.i.i.i_22_168 num.2.i.i.i.i.i_22_160))
  (ite (bvult word.addr.3.i.i.i.i.i_22_167 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= tobool20.not.i.i.i.i.i_22_170 #b0))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_22_168
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_22_172
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_22_172
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_22_172 (bvadd num.3.i.i.i.i.i_22_168 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_22_167
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_22_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_22_174
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_22_174
   (bvshl word.addr.3.i.i.i.i.i_22_167 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_22_170
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_22_174
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_22_167
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_22_175
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_22_175
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_22_170
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_22_174
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_22_167
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_22_175
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= word.addr.4.i.i.i.i.i_22_175 shl23.i.i.i.i.i_22_174)
     (= word.addr.4.i.i.i.i.i_22_175 word.addr.3.i.i.i.i.i_22_167))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_22_170
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_22_172
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_22_168
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_22_176
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_22_176
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_22_170
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_22_172
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_22_168
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_22_176
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= num.4.i.i.i.i.i_22_176 sub22.i.i.i.i.i_22_172)
     (= num.4.i.i.i.i.i_22_176 num.3.i.i.i.i.i_22_168))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_22_175
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_22_178
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_22_178
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_22_178
   (bvlshr word.addr.4.i.i.i.i.i_22_175 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_22_178
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_22_179
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_22_179
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_22_179
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_22_178))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_22_176
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_22_179
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_22_180
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_22_180
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_22_180 (bvadd num.4.i.i.i.i.i_22_176 i.i.i.i.i.i.neg_22_179))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_22_180
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_22_182
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_22_182
[handleBinaryOperatorInst] AND instruction
(= phi.bo_22_182 (bvand add.i.i.i335.i_22_180 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: sw.default.i___reg_bound_offset.exit.i_22_184
[handlePhiNodeSetupBitVecs] phiConditionBoolI: sw.default.i___reg_bound_offset.exit.i_22_184
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, sw.default.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<sw.default.i, __reg_bound_offset.exit.i>: sw.default.i___reg_bound_offset.exit.i_22_184
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_22_78
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_22_185
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_22_185
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_22_182
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
    (= retval.0.i.i.i.i_22_185 phi.bo_22_182))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: sw.default.i___reg_bound_offset.exit.i_22_184
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> sw.default.i___reg_bound_offset.exit.i_22_184
    (= retval.0.i.i.i.i_22_185 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
    (= retval.0.i.i.i.i_22_185 phi.bo_22_182))
  (=> sw.default.i___reg_bound_offset.exit.i_22_184
    (= retval.0.i.i.i.i_22_185 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_22_185
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_22_188
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_22_188
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_22_185 #x0000003f)
     (= cmp.i.i.i_22_188 #b1)
     (= cmp.i.i.i_22_188 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
  (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
  (= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
  (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
  (= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 #xfffffff8))
  (= shl11.i.i.i.i.i_22_158
   (bvshl word.addr.1.i.i.i.i.i_22_151 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158)
     (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156)
     (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))
  (ite (bvult word.addr.2.i.i.i.i.i_22_159 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= tobool14.not.i.i.i.i.i_22_162 #b0))
  (= sub16.i.i.i.i.i_22_164 (bvadd num.2.i.i.i.i.i_22_160 #xfffffffc))
  (= shl17.i.i.i.i.i_22_166
   (bvshl word.addr.2.i.i.i.i.i_22_159 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= word.addr.3.i.i.i.i.i_22_167 shl17.i.i.i.i.i_22_166)
     (= word.addr.3.i.i.i.i.i_22_167 word.addr.2.i.i.i.i.i_22_159))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= num.3.i.i.i.i.i_22_168 sub16.i.i.i.i.i_22_164)
     (= num.3.i.i.i.i.i_22_168 num.2.i.i.i.i.i_22_160))
  (ite (bvult word.addr.3.i.i.i.i.i_22_167 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= tobool20.not.i.i.i.i.i_22_170 #b0))
  (= sub22.i.i.i.i.i_22_172 (bvadd num.3.i.i.i.i.i_22_168 #x000000fe))
  (= shl23.i.i.i.i.i_22_174
   (bvshl word.addr.3.i.i.i.i.i_22_167 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= word.addr.4.i.i.i.i.i_22_175 shl23.i.i.i.i.i_22_174)
     (= word.addr.4.i.i.i.i.i_22_175 word.addr.3.i.i.i.i.i_22_167))
  (ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= num.4.i.i.i.i.i_22_176 sub22.i.i.i.i.i_22_172)
     (= num.4.i.i.i.i.i_22_176 num.3.i.i.i.i.i_22_168))
  (= word.addr.4.lobit.i.i.i.i.i.neg_22_178
   (bvlshr word.addr.4.i.i.i.i.i_22_175 #x000000000000003f))
  (= i.i.i.i.i.i.neg_22_179
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_22_178))
  (= add.i.i.i335.i_22_180 (bvadd num.4.i.i.i.i.i_22_176 i.i.i.i.i.i.neg_22_179))
  (= phi.bo_22_182 (bvand add.i.i.i335.i_22_180 #x000000ff))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
    (= retval.0.i.i.i.i_22_185 phi.bo_22_182))
  (=> sw.default.i___reg_bound_offset.exit.i_22_184
    (= retval.0.i.i.i.i_22_185 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_22_185 #x0000003f)
     (= cmp.i.i.i_22_188 #b1)
     (= cmp.i.i.i_22_188 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_22_185
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_22_189
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_22_189
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_22_189 ((_ zero_extend 32) retval.0.i.i.i.i_22_185))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_22_189
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_22_191
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_22_191
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_22_191 (bvshl #xffffffffffffffff sh_prom.i.i.i_22_189))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_22_191
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_22_193
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_22_193
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_22_193 (bvxor notmask.i.i.i_22_191 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_22_191
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_22_132
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_22_194
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_22_194
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_22_194 (bvand notmask.i.i.i_22_191 i.i333.i_22_132))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_22_188
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_22_194
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_22_196
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_22_196
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_22_188
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_22_194
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_22_196
[handleSelectInst](ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.0.0.i.i.i_22_196 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_22_196 and.i.i336.i_22_194))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.3.0.i.i.i,,sub.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
storemerge.i20.i,and8.i17.i,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_22_188
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_22_193
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_22_198
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_22_198
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_22_188
[handleSelectInst] z3ExprSelectOp2: #x00000000ffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_22_193
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_22_198
[handleSelectInst](ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.3.0.i.i.i_22_198 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_22_198 sub.i.i.i_22_193))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_22_196
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_22_122
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_22_199
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_22_199
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_22_199 (bvor retval.sroa.0.0.i.i.i_22_196 and.i.i301.i_22_122))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_22_198
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_22_124
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_22_200
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_22_200
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_22_200 (bvand retval.sroa.3.0.i.i.i_22_198 and6.i.i302.i_22_124))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_22_200
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_22_202
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_22_202
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_22_202 (bvxor and.i1.i.i_22_200 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_22_199
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_22_202
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_22_203
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_22_203
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_22_203 (bvand or.i.i.i_22_199 neg.i.i.i_22_202))
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_22_203
[handleStoreInst] BVToStore: and4.i.i.i_22_203
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ and.i.i301.i_22_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_22_203 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_22_200
[handleStoreInst] BVToStore: and.i1.i.i_22_200
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ and6.i.i302.i_22_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_22_200 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and.i1.i.i_22_200 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_204
[lookInsideStruct] singleValueType:dst_reg_22_204
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_205
[lookInsideStruct] singleValueType:dst_reg_22_205
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_206
[lookInsideStruct] singleValueType:dst_reg_22_206
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_207
[lookInsideStruct] singleValueType:dst_reg_22_207
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_208
[lookInsideStruct] singleValueType:dst_reg_22_208
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_209
[lookInsideStruct] singleValueType:dst_reg_22_209
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_210
[lookInsideStruct] singleValueType:dst_reg_22_210
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_211
[lookInsideStruct] singleValueType:dst_reg_22_211
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_212
[lookInsideStruct] singleValueType:dst_reg_22_212
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_213
[lookInsideStruct] singleValueType:dst_reg_22_213
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_214
[lookInsideStruct] singleValueType:dst_reg_22_214
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_215
[lookInsideStruct] singleValueType:dst_reg_22_215
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_216
[lookInsideStruct] singleValueType:dst_reg_22_216
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_217
[lookInsideStruct] singleValueType:dst_reg_22_217
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_218
[lookInsideStruct] singleValueType:src_reg_22_218
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_219
[lookInsideStruct] singleValueType:src_reg_22_219
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_220
[lookInsideStruct] singleValueType:src_reg_22_220
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_221
[lookInsideStruct] singleValueType:src_reg_22_221
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_222
[lookInsideStruct] singleValueType:src_reg_22_222
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_223
[lookInsideStruct] singleValueType:src_reg_22_223
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_224
[lookInsideStruct] singleValueType:src_reg_22_224
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_225
[lookInsideStruct] singleValueType:src_reg_22_225
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_226
[lookInsideStruct] singleValueType:src_reg_22_226
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_227
[lookInsideStruct] singleValueType:src_reg_22_227
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_228
[lookInsideStruct] singleValueType:src_reg_22_228
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_229
[lookInsideStruct] singleValueType:src_reg_22_229
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_230
[lookInsideStruct] singleValueType:src_reg_22_230
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_231
[lookInsideStruct] singleValueType:src_reg_22_231
[setupBVTreeForArg] returning BVTree: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
- dst_reg: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 

[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 40 = MemoryDef(39)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and.i1.i.i_22_200 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and.i1.i.i_22_200 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_22_63 src_reg_22_218)
(= src_reg_22_64 src_reg_22_219)
(= src_reg_22_65 src_reg_22_220)
(= src_reg_22_66 src_reg_22_221)
(= src_reg_22_67 src_reg_22_222)
(= src_reg_22_68 src_reg_22_223)
(= src_reg_22_69 src_reg_22_224)
(= src_reg_22_70 src_reg_22_225)
(= src_reg_22_71 src_reg_22_226)
(= src_reg_22_72 src_reg_22_227)
(= src_reg_22_73 src_reg_22_228)
(= src_reg_22_74 src_reg_22_229)
(= src_reg_22_75 src_reg_22_230)
(= src_reg_22_76 src_reg_22_231)
(= #x00000001 dst_reg_22_204)
(= dst_reg_22_50 dst_reg_22_205)
(= dst_reg_22_51 dst_reg_22_206)
(= dst_reg_22_52 dst_reg_22_207)
(= and4.i.i.i_22_203 dst_reg_22_208)
(= and.i1.i.i_22_200 dst_reg_22_209)
(= #x0000000000000000 dst_reg_22_210)
(= #x00000000ffffffff dst_reg_22_211)
(= #x0000000000000000 dst_reg_22_212)
(= #x00000000ffffffff dst_reg_22_213)
(= dst_reg_22_59 dst_reg_22_214)
(= dst_reg_22_60 dst_reg_22_215)
(= dst_reg_22_61 dst_reg_22_216)
(= dst_reg_22_62 dst_reg_22_217)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 25 = MemoryDef(24)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_22_63 src_reg_22_218)
(= src_reg_22_64 src_reg_22_219)
(= src_reg_22_65 src_reg_22_220)
(= src_reg_22_66 src_reg_22_221)
(= src_reg_22_67 src_reg_22_222)
(= src_reg_22_68 src_reg_22_223)
(= src_reg_22_69 src_reg_22_224)
(= src_reg_22_70 src_reg_22_225)
(= src_reg_22_71 src_reg_22_226)
(= src_reg_22_72 src_reg_22_227)
(= src_reg_22_73 src_reg_22_228)
(= src_reg_22_74 src_reg_22_229)
(= src_reg_22_75 src_reg_22_230)
(= src_reg_22_76 src_reg_22_231)
(= #x00000001 dst_reg_22_204)
(= dst_reg_22_50 dst_reg_22_205)
(= dst_reg_22_51 dst_reg_22_206)
(= dst_reg_22_52 dst_reg_22_207)
(= #x0000000000000000 dst_reg_22_208)
(= #xffffffffffffffff dst_reg_22_209)
(= #x8000000000000000 dst_reg_22_210)
(= #x7fffffffffffffff dst_reg_22_211)
(= #x0000000000000000 dst_reg_22_212)
(= #xffffffffffffffff dst_reg_22_213)
(= #x00000000 dst_reg_22_214)
(= dst_reg_22_60 dst_reg_22_215)
(= dst_reg_22_61 dst_reg_22_216)
(= dst_reg_22_62 dst_reg_22_217)
]
[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 17 = MemoryDef(16)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_22_63 src_reg_22_218)
(= src_reg_22_64 src_reg_22_219)
(= src_reg_22_65 src_reg_22_220)
(= src_reg_22_66 src_reg_22_221)
(= src_reg_22_67 src_reg_22_222)
(= src_reg_22_68 src_reg_22_223)
(= src_reg_22_69 src_reg_22_224)
(= src_reg_22_70 src_reg_22_225)
(= src_reg_22_71 src_reg_22_226)
(= src_reg_22_72 src_reg_22_227)
(= src_reg_22_73 src_reg_22_228)
(= src_reg_22_74 src_reg_22_229)
(= src_reg_22_75 src_reg_22_230)
(= src_reg_22_76 src_reg_22_231)
(= #x00000001 dst_reg_22_204)
(= dst_reg_22_50 dst_reg_22_205)
(= dst_reg_22_51 dst_reg_22_206)
(= dst_reg_22_52 dst_reg_22_207)
(= #x0000000000000000 dst_reg_22_208)
(= #xffffffffffffffff dst_reg_22_209)
(= #x8000000000000000 dst_reg_22_210)
(= #x7fffffffffffffff dst_reg_22_211)
(= #x0000000000000000 dst_reg_22_212)
(= #xffffffffffffffff dst_reg_22_213)
(= #x00000000 dst_reg_22_214)
(= dst_reg_22_60 dst_reg_22_215)
(= dst_reg_22_61 dst_reg_22_216)
(= dst_reg_22_62 dst_reg_22_217)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_22_63 src_reg_22_218)
  (= src_reg_22_64 src_reg_22_219)
  (= src_reg_22_65 src_reg_22_220)
  (= src_reg_22_66 src_reg_22_221)
  (= src_reg_22_67 src_reg_22_222)
  (= src_reg_22_68 src_reg_22_223)
  (= src_reg_22_69 src_reg_22_224)
  (= src_reg_22_70 src_reg_22_225)
  (= src_reg_22_71 src_reg_22_226)
  (= src_reg_22_72 src_reg_22_227)
  (= src_reg_22_73 src_reg_22_228)
  (= src_reg_22_74 src_reg_22_229)
  (= src_reg_22_75 src_reg_22_230)
  (= src_reg_22_76 src_reg_22_231)
  (= #x00000001 dst_reg_22_204)
  (= dst_reg_22_50 dst_reg_22_205)
  (= dst_reg_22_51 dst_reg_22_206)
  (= dst_reg_22_52 dst_reg_22_207)
  (= #x0000000000000000 dst_reg_22_208)
  (= #xffffffffffffffff dst_reg_22_209)
  (= #x8000000000000000 dst_reg_22_210)
  (= #x7fffffffffffffff dst_reg_22_211)
  (= #x0000000000000000 dst_reg_22_212)
  (= #xffffffffffffffff dst_reg_22_213)
  (= #x00000000 dst_reg_22_214)
  (= dst_reg_22_60 dst_reg_22_215)
  (= dst_reg_22_61 dst_reg_22_216)
  (= dst_reg_22_62 dst_reg_22_217)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_22_63 src_reg_22_218)
  (= src_reg_22_64 src_reg_22_219)
  (= src_reg_22_65 src_reg_22_220)
  (= src_reg_22_66 src_reg_22_221)
  (= src_reg_22_67 src_reg_22_222)
  (= src_reg_22_68 src_reg_22_223)
  (= src_reg_22_69 src_reg_22_224)
  (= src_reg_22_70 src_reg_22_225)
  (= src_reg_22_71 src_reg_22_226)
  (= src_reg_22_72 src_reg_22_227)
  (= src_reg_22_73 src_reg_22_228)
  (= src_reg_22_74 src_reg_22_229)
  (= src_reg_22_75 src_reg_22_230)
  (= src_reg_22_76 src_reg_22_231)
  (= #x00000001 dst_reg_22_204)
  (= dst_reg_22_50 dst_reg_22_205)
  (= dst_reg_22_51 dst_reg_22_206)
  (= dst_reg_22_52 dst_reg_22_207)
  (= #x0000000000000000 dst_reg_22_208)
  (= #xffffffffffffffff dst_reg_22_209)
  (= #x8000000000000000 dst_reg_22_210)
  (= #x7fffffffffffffff dst_reg_22_211)
  (= #x0000000000000000 dst_reg_22_212)
  (= #xffffffffffffffff dst_reg_22_213)
  (= #x00000000 dst_reg_22_214)
  (= dst_reg_22_60 dst_reg_22_215)
  (= dst_reg_22_61 dst_reg_22_216)
  (= dst_reg_22_62 dst_reg_22_217)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_22_63 src_reg_22_218)
  (= src_reg_22_64 src_reg_22_219)
  (= src_reg_22_65 src_reg_22_220)
  (= src_reg_22_66 src_reg_22_221)
  (= src_reg_22_67 src_reg_22_222)
  (= src_reg_22_68 src_reg_22_223)
  (= src_reg_22_69 src_reg_22_224)
  (= src_reg_22_70 src_reg_22_225)
  (= src_reg_22_71 src_reg_22_226)
  (= src_reg_22_72 src_reg_22_227)
  (= src_reg_22_73 src_reg_22_228)
  (= src_reg_22_74 src_reg_22_229)
  (= src_reg_22_75 src_reg_22_230)
  (= src_reg_22_76 src_reg_22_231)
  (= #x00000001 dst_reg_22_204)
  (= dst_reg_22_50 dst_reg_22_205)
  (= dst_reg_22_51 dst_reg_22_206)
  (= dst_reg_22_52 dst_reg_22_207)
  (= and4.i.i.i_22_203 dst_reg_22_208)
  (= and.i1.i.i_22_200 dst_reg_22_209)
  (= #x0000000000000000 dst_reg_22_210)
  (= #x00000000ffffffff dst_reg_22_211)
  (= #x0000000000000000 dst_reg_22_212)
  (= #x00000000ffffffff dst_reg_22_213)
  (= dst_reg_22_59 dst_reg_22_214)
  (= dst_reg_22_60 dst_reg_22_215)
  (= dst_reg_22_61 dst_reg_22_216)
  (= dst_reg_22_62 dst_reg_22_217)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_22_63)
  (= src_reg_22_15 src_reg_22_64)
  (= src_reg_22_16 src_reg_22_65)
  (= src_reg_22_17 src_reg_22_66)
  (= src_reg_22_18 src_reg_22_67)
  (= src_reg_22_19 src_reg_22_68)
  (= src_reg_22_20 src_reg_22_69)
  (= src_reg_22_21 src_reg_22_70)
  (= src_reg_22_22 src_reg_22_71)
  (= src_reg_22_23 src_reg_22_72)
  (= src_reg_22_24 src_reg_22_73)
  (= src_reg_22_25 src_reg_22_74)
  (= src_reg_22_26 src_reg_22_75)
  (= src_reg_22_27 src_reg_22_76)
  (= #x00000001 dst_reg_22_49)
  (= dst_reg_22_1 dst_reg_22_50)
  (= dst_reg_22_2 dst_reg_22_51)
  (= dst_reg_22_3 dst_reg_22_52)
  (= and.i.i.i_22_36 dst_reg_22_53)
  (= and6.i.i.i_22_38 dst_reg_22_54)
  (= dst_reg_22_6 dst_reg_22_55)
  (= dst_reg_22_7 dst_reg_22_56)
  (= #x0000000000000000 dst_reg_22_57)
  (= dst_reg_22_9 dst_reg_22_58)
  (= dst_reg_22_10 dst_reg_22_59)
  (= dst_reg_22_11 dst_reg_22_60)
  (= dst_reg_22_12 dst_reg_22_61)
  (= dst_reg_22_13 dst_reg_22_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_22_63)
  (= src_reg_22_15 src_reg_22_64)
  (= src_reg_22_16 src_reg_22_65)
  (= src_reg_22_17 src_reg_22_66)
  (= src_reg_22_18 src_reg_22_67)
  (= src_reg_22_19 src_reg_22_68)
  (= src_reg_22_20 src_reg_22_69)
  (= src_reg_22_21 src_reg_22_70)
  (= src_reg_22_22 src_reg_22_71)
  (= src_reg_22_23 src_reg_22_72)
  (= src_reg_22_24 src_reg_22_73)
  (= src_reg_22_25 src_reg_22_74)
  (= src_reg_22_26 src_reg_22_75)
  (= src_reg_22_27 src_reg_22_76)
  (= #x00000001 dst_reg_22_49)
  (= dst_reg_22_1 dst_reg_22_50)
  (= dst_reg_22_2 dst_reg_22_51)
  (= dst_reg_22_3 dst_reg_22_52)
  (= and.i.i.i_22_36 dst_reg_22_53)
  (= and6.i.i.i_22_38 dst_reg_22_54)
  (= dst_reg_22_6 dst_reg_22_55)
  (= dst_reg_22_7 dst_reg_22_56)
  (= and6.i.i_22_45 dst_reg_22_57)
  (= dst_reg_22_9 dst_reg_22_58)
  (= dst_reg_22_10 dst_reg_22_59)
  (= dst_reg_22_11 dst_reg_22_60)
  (= dst_reg_22_12 dst_reg_22_61)
  (= dst_reg_22_13 dst_reg_22_62)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_22_43
[handleBranchInst] Edge Assertions:
<entry, if.then.i.i>: (= cmp.i.i_22_43 #b1)
<entry, if.else.i.i>: (= cmp.i.i_22_43 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i.i: (= cmp.i.i_22_43 #b1)
[handleBranchInst] if.else.i.i: (= cmp.i.i_22_43 #b0)
[handleBranchInst] <entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] <entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_22_43 #b1)
[handleBranchInst] coerce_reg_to_size.exit.i: (= cmp.i.i_22_43 #b1)
[handleBranchInst] <if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_22_43 #b1)
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_22_43 #b1)
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_22_43 #b0)
[handleBranchInst] coerce_reg_to_size.exit.i: (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
[handleBranchInst] <if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_22_96
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit.i, land.lhs.true.i>: (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i>: (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] lor.lhs.false20.i: (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i.not_22_97
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.end27.i>: (and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i>: (and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end27.i: (and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] if.then26.i: (and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_22_98
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i>: (and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
[handleBranchInst] if.end27.i: (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
-------------------
  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %sw.default.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_22_96
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.default.i>: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
<if.end27.i, if.then41.i>: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.default.i: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] if.then41.i: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
[handleBranchInst] <if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] <if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.then41.i
=========================
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
sw.default.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %i.i333.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i.i333.i, 4294967295
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_22_136
[handleBranchInst] Edge Assertions:
<sw.default.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] <sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] <sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_22_96 #b0)
                (or (and (= cmp24.old.i_22_98 #b0) a!1)
                    (and (= cmp18.not.i.not_22_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_22_98 #b0) a!1)
               (and (= cmp18.not.i.not_22_97 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= tobool.not.i.i_22_96 #b0) a!3)
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_22_98 #b0) a!1)
               (and (= cmp18.not.i.not_22_97 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= tobool.not.i.i_22_96 #b0) a!3)
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
if.then.i.i
=========================
=========================
if.else.i.i
=========================
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (= cmp.i.i_22_43 #b1)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= and6.i.i_22_45 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
phiResolveI (i=1) (=> (= cmp.i.i_22_43 #b0)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= #x0000000000000000 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i.i_coerce_reg_to_size.exit.i_22_77
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_22_43 #b0)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.else.i.i_coerce_reg_to_size.exit.i_22_77 (= cmp.i.i_22_43 #b0))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i.i_coerce_reg_to_size.exit.i_22_78
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_22_43 #b1)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then.i.i_coerce_reg_to_size.exit.i_22_78 (= cmp.i.i_22_43 #b1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
  (=> (= cmp.i.i_22_43 #b1)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= and6.i.i_22_45 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
  (=> (= cmp.i.i_22_43 #b0)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= #x0000000000000000 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_22_77 (= cmp.i.i_22_43 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_22_78 (= cmp.i.i_22_43 #b1))

=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.default.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %sw.default.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
     (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1)))
[handlePhiNodeResolvePathConditions] incomingBlockI sw.default.i
[handlePhiNodeResolvePathConditions] phiConditionI: sw.default.i___reg_bound_offset.exit.i_22_184
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= sw.default.i___reg_bound_offset.exit.i_22_184
     (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
    (= retval.0.i.i.i.i_22_185 phi.bo_22_182))
  (=> sw.default.i___reg_bound_offset.exit.i_22_184
    (= retval.0.i.i.i.i_22_185 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_22_185 #x0000003f)
     (= cmp.i.i.i_22_188 #b1)
     (= cmp.i.i.i_22_188 #b0))
  (= sh_prom.i.i.i_22_189 ((_ zero_extend 32) retval.0.i.i.i.i_22_185))
  (= notmask.i.i.i_22_191 (bvshl #xffffffffffffffff sh_prom.i.i.i_22_189))
  (= sub.i.i.i_22_193 (bvxor notmask.i.i.i_22_191 #xffffffffffffffff))
  (= and.i.i336.i_22_194 (bvand notmask.i.i.i_22_191 i.i333.i_22_132))
  (ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.0.0.i.i.i_22_196 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_22_196 and.i.i336.i_22_194))
  (ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.3.0.i.i.i_22_198 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_22_198 sub.i.i.i_22_193))
  (= or.i.i.i_22_199 (bvor retval.sroa.0.0.i.i.i_22_196 and.i.i301.i_22_122))
  (= and.i1.i.i_22_200 (bvand retval.sroa.3.0.i.i.i_22_198 and6.i.i302.i_22_124))
  (= neg.i.i.i_22_202 (bvxor and.i1.i.i_22_200 #xffffffffffffffff))
  (= and4.i.i.i_22_203 (bvand or.i.i.i_22_199 neg.i.i.i_22_202))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
     (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= sw.default.i___reg_bound_offset.exit.i_22_184
     (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1)))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
(let ((a!2 (or (and (= cmp.i.i.i.i_22_136 #b0)
                    (and (= tobool.not.i.i_22_96 #b1) a!1))
               (and (= cmp.i.i.i.i_22_136 #b1)
                    (and (= tobool.not.i.i_22_96 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= and4.i.i.i_22_203 dst_reg_22_208)
           (= and.i1.i.i_22_200 dst_reg_22_209)
           (= #x0000000000000000 dst_reg_22_210)
           (= #x00000000ffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #x00000000ffffffff dst_reg_22_213)
           (= dst_reg_22_59 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217)))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> (and (= tobool.not.i.i_22_96 #b0) a!1)
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
phiResolveI (i=2) (let ((a!1 (or (and (= cmp24.old.i_22_98 #b1)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b0)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> a!1
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i.i
=========================
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
=========================
if.then41.i
=========================
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
sw.default.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 4294967295, i64* %smax_value.i.i, align 8
-------------------
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 41 = MemoryPhi({__reg_bound_offset.exit.i,40},{if.then41.i,25},{if.then26.i,17})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
40 = MemoryDef(39) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and.i1.i.i_22_200 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
41 = MemoryPhi({__reg_bound_offset.exit.i,40},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
- dst_reg: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 41 = MemoryPhi({__reg_bound_offset.exit.i,40},{if.then41.i,25},{if.then26.i,17})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_232
[lookInsideStruct] singleValueType:dst_reg_22_232
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_233
[lookInsideStruct] singleValueType:dst_reg_22_233
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_234
[lookInsideStruct] singleValueType:dst_reg_22_234
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_235
[lookInsideStruct] singleValueType:dst_reg_22_235
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_236
[lookInsideStruct] singleValueType:dst_reg_22_236
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_237
[lookInsideStruct] singleValueType:dst_reg_22_237
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_238
[lookInsideStruct] singleValueType:dst_reg_22_238
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_239
[lookInsideStruct] singleValueType:dst_reg_22_239
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_240
[lookInsideStruct] singleValueType:dst_reg_22_240
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_241
[lookInsideStruct] singleValueType:dst_reg_22_241
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_242
[lookInsideStruct] singleValueType:dst_reg_22_242
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_243
[lookInsideStruct] singleValueType:dst_reg_22_243
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_244
[lookInsideStruct] singleValueType:dst_reg_22_244
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_22_245
[lookInsideStruct] singleValueType:dst_reg_22_245
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_22_232 ] [ ] [ dst_reg_22_233 ] [ dst_reg_22_234 ] [ dst_reg_22_235 ] [ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] [ dst_reg_22_238 ] [ dst_reg_22_239 ] [ dst_reg_22_240 ] [ dst_reg_22_241 ] [ ] [ dst_reg_22_242 ] [ dst_reg_22_243 ] [ dst_reg_22_244 ] [ dst_reg_22_245 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_22_204 dst_reg_22_232)
(= dst_reg_22_205 dst_reg_22_233)
(= dst_reg_22_206 dst_reg_22_234)
(= dst_reg_22_207 dst_reg_22_235)
(= dst_reg_22_208 dst_reg_22_236)
(= dst_reg_22_209 dst_reg_22_237)
(= dst_reg_22_210 dst_reg_22_238)
(= dst_reg_22_211 dst_reg_22_239)
(= dst_reg_22_212 dst_reg_22_240)
(= dst_reg_22_213 dst_reg_22_241)
(= dst_reg_22_214 dst_reg_22_242)
(= dst_reg_22_215 dst_reg_22_243)
(= dst_reg_22_216 dst_reg_22_244)
(= dst_reg_22_217 dst_reg_22_245)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_246
[lookInsideStruct] singleValueType:src_reg_22_246
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_247
[lookInsideStruct] singleValueType:src_reg_22_247
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_248
[lookInsideStruct] singleValueType:src_reg_22_248
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_249
[lookInsideStruct] singleValueType:src_reg_22_249
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_250
[lookInsideStruct] singleValueType:src_reg_22_250
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_251
[lookInsideStruct] singleValueType:src_reg_22_251
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_252
[lookInsideStruct] singleValueType:src_reg_22_252
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_253
[lookInsideStruct] singleValueType:src_reg_22_253
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_254
[lookInsideStruct] singleValueType:src_reg_22_254
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_255
[lookInsideStruct] singleValueType:src_reg_22_255
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_256
[lookInsideStruct] singleValueType:src_reg_22_256
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_257
[lookInsideStruct] singleValueType:src_reg_22_257
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_258
[lookInsideStruct] singleValueType:src_reg_22_258
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_22_259
[lookInsideStruct] singleValueType:src_reg_22_259
[setupBVTreeForArg] returning BVTree: [ [ src_reg_22_246 ] [ ] [ src_reg_22_247 ] [ src_reg_22_248 ] [ src_reg_22_249 ] [ [ src_reg_22_250 ] [ src_reg_22_251 ] ] [ src_reg_22_252 ] [ src_reg_22_253 ] [ src_reg_22_254 ] [ src_reg_22_255 ] [ ] [ src_reg_22_256 ] [ src_reg_22_257 ] [ src_reg_22_258 ] [ src_reg_22_259 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_22_218 src_reg_22_246)
(= src_reg_22_219 src_reg_22_247)
(= src_reg_22_220 src_reg_22_248)
(= src_reg_22_221 src_reg_22_249)
(= src_reg_22_222 src_reg_22_250)
(= src_reg_22_223 src_reg_22_251)
(= src_reg_22_224 src_reg_22_252)
(= src_reg_22_225 src_reg_22_253)
(= src_reg_22_226 src_reg_22_254)
(= src_reg_22_227 src_reg_22_255)
(= src_reg_22_228 src_reg_22_256)
(= src_reg_22_229 src_reg_22_257)
(= src_reg_22_230 src_reg_22_258)
(= src_reg_22_231 src_reg_22_259)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_22_246 ] [ ] [ src_reg_22_247 ] [ src_reg_22_248 ] [ src_reg_22_249 ] [ [ src_reg_22_250 ] [ src_reg_22_251 ] ] [ src_reg_22_252 ] [ src_reg_22_253 ] [ src_reg_22_254 ] [ src_reg_22_255 ] [ ] [ src_reg_22_256 ] [ src_reg_22_257 ] [ src_reg_22_258 ] [ src_reg_22_259 ] ] 
- dst_reg: [ [ dst_reg_22_232 ] [ ] [ dst_reg_22_233 ] [ dst_reg_22_234 ] [ dst_reg_22_235 ] [ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] [ dst_reg_22_238 ] [ dst_reg_22_239 ] [ dst_reg_22_240 ] [ dst_reg_22_241 ] [ ] [ dst_reg_22_242 ] [ dst_reg_22_243 ] [ dst_reg_22_244 ] [ dst_reg_22_245 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
(let ((a!2 (or (and (= cmp.i.i.i.i_22_136 #b0)
                    (and (= tobool.not.i.i_22_96 #b1) a!1))
               (and (= cmp.i.i.i.i_22_136 #b1)
                    (and (= tobool.not.i.i_22_96 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= and4.i.i.i_22_203 dst_reg_22_208)
           (= and.i1.i.i_22_200 dst_reg_22_209)
           (= #x0000000000000000 dst_reg_22_210)
           (= #x00000000ffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #x00000000ffffffff dst_reg_22_213)
           (= dst_reg_22_59 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217)))))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> (and (= tobool.not.i.i_22_96 #b0) a!1)
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b1)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b0)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> a!1
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
  (= dst_reg_22_204 dst_reg_22_232)
  (= dst_reg_22_205 dst_reg_22_233)
  (= dst_reg_22_206 dst_reg_22_234)
  (= dst_reg_22_207 dst_reg_22_235)
  (= dst_reg_22_208 dst_reg_22_236)
  (= dst_reg_22_209 dst_reg_22_237)
  (= dst_reg_22_210 dst_reg_22_238)
  (= dst_reg_22_211 dst_reg_22_239)
  (= dst_reg_22_212 dst_reg_22_240)
  (= dst_reg_22_213 dst_reg_22_241)
  (= dst_reg_22_214 dst_reg_22_242)
  (= dst_reg_22_215 dst_reg_22_243)
  (= dst_reg_22_216 dst_reg_22_244)
  (= dst_reg_22_217 dst_reg_22_245)
  (= src_reg_22_218 src_reg_22_246)
  (= src_reg_22_219 src_reg_22_247)
  (= src_reg_22_220 src_reg_22_248)
  (= src_reg_22_221 src_reg_22_249)
  (= src_reg_22_222 src_reg_22_250)
  (= src_reg_22_223 src_reg_22_251)
  (= src_reg_22_224 src_reg_22_252)
  (= src_reg_22_225 src_reg_22_253)
  (= src_reg_22_226 src_reg_22_254)
  (= src_reg_22_227 src_reg_22_255)
  (= src_reg_22_228 src_reg_22_256)
  (= src_reg_22_229 src_reg_22_257)
  (= src_reg_22_230 src_reg_22_258)
  (= src_reg_22_231 src_reg_22_259)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_22_134 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= tobool.not.i.i.i.i.i_22_138 #b0))
  (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140)
     (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))
  (ite (= tobool.not.i.i.i.i.i_22_138 #b1)
     (= spec.select17.i.i.i.i.i_22_144 #x0000001f)
     (= spec.select17.i.i.i.i.i_22_144 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_22_141 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= tobool2.not.i.i.i.i.i_22_146 #b0))
  (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 #xfffffff0))
  (= shl5.i.i.i.i.i_22_150
   (bvshl spec.select.i.i.i.i.i_22_141 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150)
     (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))
  (ite (= tobool2.not.i.i.i.i.i_22_146 #b1)
     (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148)
     (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))
  (ite (bvult word.addr.1.i.i.i.i.i_22_151 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= tobool8.not.i.i.i.i.i_22_154 #b0))
  (= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 #xfffffff8))
  (= shl11.i.i.i.i.i_22_158
   (bvshl word.addr.1.i.i.i.i.i_22_151 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158)
     (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))
  (ite (= tobool8.not.i.i.i.i.i_22_154 #b1)
     (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156)
     (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))
  (ite (bvult word.addr.2.i.i.i.i.i_22_159 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= tobool14.not.i.i.i.i.i_22_162 #b0))
  (= sub16.i.i.i.i.i_22_164 (bvadd num.2.i.i.i.i.i_22_160 #xfffffffc))
  (= shl17.i.i.i.i.i_22_166
   (bvshl word.addr.2.i.i.i.i.i_22_159 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= word.addr.3.i.i.i.i.i_22_167 shl17.i.i.i.i.i_22_166)
     (= word.addr.3.i.i.i.i.i_22_167 word.addr.2.i.i.i.i.i_22_159))
  (ite (= tobool14.not.i.i.i.i.i_22_162 #b1)
     (= num.3.i.i.i.i.i_22_168 sub16.i.i.i.i.i_22_164)
     (= num.3.i.i.i.i.i_22_168 num.2.i.i.i.i.i_22_160))
  (ite (bvult word.addr.3.i.i.i.i.i_22_167 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= tobool20.not.i.i.i.i.i_22_170 #b0))
  (= sub22.i.i.i.i.i_22_172 (bvadd num.3.i.i.i.i.i_22_168 #x000000fe))
  (= shl23.i.i.i.i.i_22_174
   (bvshl word.addr.3.i.i.i.i.i_22_167 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= word.addr.4.i.i.i.i.i_22_175 shl23.i.i.i.i.i_22_174)
     (= word.addr.4.i.i.i.i.i_22_175 word.addr.3.i.i.i.i.i_22_167))
  (ite (= tobool20.not.i.i.i.i.i_22_170 #b1)
     (= num.4.i.i.i.i.i_22_176 sub22.i.i.i.i.i_22_172)
     (= num.4.i.i.i.i.i_22_176 num.3.i.i.i.i.i_22_168))
  (= word.addr.4.lobit.i.i.i.i.i.neg_22_178
   (bvlshr word.addr.4.i.i.i.i.i_22_175 #x000000000000003f))
  (= i.i.i.i.i.i.neg_22_179
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_22_178))
  (= add.i.i.i335.i_22_180 (bvadd num.4.i.i.i.i.i_22_176 i.i.i.i.i.i.neg_22_179))
  (= phi.bo_22_182 (bvand add.i.i.i335.i_22_180 #x000000ff))
BasicBlock: sw.default.i, Size:7
  (= #x0000000000000000 i18.i298.i_22_119)
  (= #xffffffffffffffff i20.i300.i_22_120)
  (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 #x00000000ffffffff))
  (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 #x00000000ffffffff))
  (= #x0000000000000000 i.i333.i_22_132)
  (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 #x00000000ffffffff))
  (ite (= xor.i.i.i_22_134 #x0000000000000000)
     (= cmp.i.i.i.i_22_136 #b1)
     (= cmp.i.i.i.i_22_136 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp24.old.i_22_98 #b1)
     (= cmp24.old.i_22_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94)
     (= cmp18.not.i.not_22_97 #b1)
     (= cmp18.not.i.not_22_97 #b0))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
(let ((a!2 (or (and (= cmp.i.i.i.i_22_136 #b0)
                    (and (= tobool.not.i.i_22_96 #b1) a!1))
               (and (= cmp.i.i.i.i_22_136 #b1)
                    (and (= tobool.not.i.i_22_96 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= and4.i.i.i_22_203 dst_reg_22_208)
           (= and.i1.i.i_22_200 dst_reg_22_209)
           (= #x0000000000000000 dst_reg_22_210)
           (= #x00000000ffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #x00000000ffffffff dst_reg_22_213)
           (= dst_reg_22_59 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217)))))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> (and (= tobool.not.i.i_22_96 #b0) a!1)
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b1)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b0)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (=> a!1
      (and (= src_reg_22_63 src_reg_22_218)
           (= src_reg_22_64 src_reg_22_219)
           (= src_reg_22_65 src_reg_22_220)
           (= src_reg_22_66 src_reg_22_221)
           (= src_reg_22_67 src_reg_22_222)
           (= src_reg_22_68 src_reg_22_223)
           (= src_reg_22_69 src_reg_22_224)
           (= src_reg_22_70 src_reg_22_225)
           (= src_reg_22_71 src_reg_22_226)
           (= src_reg_22_72 src_reg_22_227)
           (= src_reg_22_73 src_reg_22_228)
           (= src_reg_22_74 src_reg_22_229)
           (= src_reg_22_75 src_reg_22_230)
           (= src_reg_22_76 src_reg_22_231)
           (= #x00000001 dst_reg_22_204)
           (= dst_reg_22_50 dst_reg_22_205)
           (= dst_reg_22_51 dst_reg_22_206)
           (= dst_reg_22_52 dst_reg_22_207)
           (= #x0000000000000000 dst_reg_22_208)
           (= #xffffffffffffffff dst_reg_22_209)
           (= #x8000000000000000 dst_reg_22_210)
           (= #x7fffffffffffffff dst_reg_22_211)
           (= #x0000000000000000 dst_reg_22_212)
           (= #xffffffffffffffff dst_reg_22_213)
           (= #x00000000 dst_reg_22_214)
           (= dst_reg_22_60 dst_reg_22_215)
           (= dst_reg_22_61 dst_reg_22_216)
           (= dst_reg_22_62 dst_reg_22_217))))
  (= dst_reg_22_204 dst_reg_22_232)
  (= dst_reg_22_205 dst_reg_22_233)
  (= dst_reg_22_206 dst_reg_22_234)
  (= dst_reg_22_207 dst_reg_22_235)
  (= dst_reg_22_208 dst_reg_22_236)
  (= dst_reg_22_209 dst_reg_22_237)
  (= dst_reg_22_210 dst_reg_22_238)
  (= dst_reg_22_211 dst_reg_22_239)
  (= dst_reg_22_212 dst_reg_22_240)
  (= dst_reg_22_213 dst_reg_22_241)
  (= dst_reg_22_214 dst_reg_22_242)
  (= dst_reg_22_215 dst_reg_22_243)
  (= dst_reg_22_216 dst_reg_22_244)
  (= dst_reg_22_217 dst_reg_22_245)
  (= src_reg_22_218 src_reg_22_246)
  (= src_reg_22_219 src_reg_22_247)
  (= src_reg_22_220 src_reg_22_248)
  (= src_reg_22_221 src_reg_22_249)
  (= src_reg_22_222 src_reg_22_250)
  (= src_reg_22_223 src_reg_22_251)
  (= src_reg_22_224 src_reg_22_252)
  (= src_reg_22_225 src_reg_22_253)
  (= src_reg_22_226 src_reg_22_254)
  (= src_reg_22_227 src_reg_22_255)
  (= src_reg_22_228 src_reg_22_256)
  (= src_reg_22_229 src_reg_22_257)
  (= src_reg_22_230 src_reg_22_258)
  (= src_reg_22_231 src_reg_22_259)
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
    (= retval.0.i.i.i.i_22_185 phi.bo_22_182))
  (=> sw.default.i___reg_bound_offset.exit.i_22_184
    (= retval.0.i.i.i.i_22_185 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_22_185 #x0000003f)
     (= cmp.i.i.i_22_188 #b1)
     (= cmp.i.i.i_22_188 #b0))
  (= sh_prom.i.i.i_22_189 ((_ zero_extend 32) retval.0.i.i.i.i_22_185))
  (= notmask.i.i.i_22_191 (bvshl #xffffffffffffffff sh_prom.i.i.i_22_189))
  (= sub.i.i.i_22_193 (bvxor notmask.i.i.i_22_191 #xffffffffffffffff))
  (= and.i.i336.i_22_194 (bvand notmask.i.i.i_22_191 i.i333.i_22_132))
  (ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.0.0.i.i.i_22_196 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_22_196 and.i.i336.i_22_194))
  (ite (= cmp.i.i.i_22_188 #b1)
     (= retval.sroa.3.0.i.i.i_22_198 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_22_198 sub.i.i.i_22_193))
  (= or.i.i.i_22_199 (bvor retval.sroa.0.0.i.i.i_22_196 and.i.i301.i_22_122))
  (= and.i1.i.i_22_200 (bvand retval.sroa.3.0.i.i.i_22_198 and6.i.i302.i_22_124))
  (= neg.i.i.i_22_202 (bvxor and.i1.i.i_22_200 #xffffffffffffffff))
  (= and4.i.i.i_22_203 (bvand or.i.i.i_22_199 neg.i.i.i_22_202))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_22_183
     (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (= sw.default.i___reg_bound_offset.exit.i_22_184
     (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1)))
BasicBlock: coerce_reg_to_size.exit.i, Size:15
  (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77
    (= storemerge.i.i_22_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78
    (= storemerge.i.i_22_79 and8.i.i_22_47))
  (= dst_reg_22_57 i27.i.i_22_81)
  (= and6.i.i6.i_22_83
   (bvand src_reg1.sroa.10.0.copyload_22_30 #x00000000ffffffff))
  (= i25.i13.i_22_84
   (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31))
  (ite (bvult i25.i13.i_22_84 #x0000000100000000)
     (= cmp.i15.i_22_86 #b1)
     (= cmp.i15.i_22_86 #b0))
  (= and6.i16.i_22_88
   (bvand src_reg1.sroa.17.0.copyload_22_31 #x00000000ffffffff))
  (= and8.i17.i_22_90
   (bvand src_reg1.sroa.22.0.copyload_22_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_22_86 #b1)
     (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88)
     (= src_reg1.sroa.17.0_22_92 #x0000000000000000))
  (ite (= cmp.i15.i_22_86 #b1)
     (= storemerge.i20.i_22_94 and8.i17.i_22_90)
     (= storemerge.i20.i_22_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_22_83 #x0000000000000000)
     (= tobool.not.i.i_22_96 #b1)
     (= tobool.not.i.i_22_96 #b0))
  (=> (= cmp.i.i_22_43 #b1)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= and6.i.i_22_45 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
  (=> (= cmp.i.i_22_43 #b0)
    (and (= #x00000001 src_reg_22_63)
         (= src_reg_22_15 src_reg_22_64)
         (= src_reg_22_16 src_reg_22_65)
         (= src_reg_22_17 src_reg_22_66)
         (= src_reg_22_18 src_reg_22_67)
         (= src_reg_22_19 src_reg_22_68)
         (= src_reg_22_20 src_reg_22_69)
         (= src_reg_22_21 src_reg_22_70)
         (= src_reg_22_22 src_reg_22_71)
         (= src_reg_22_23 src_reg_22_72)
         (= src_reg_22_24 src_reg_22_73)
         (= src_reg_22_25 src_reg_22_74)
         (= src_reg_22_26 src_reg_22_75)
         (= src_reg_22_27 src_reg_22_76)
         (= #x00000001 dst_reg_22_49)
         (= dst_reg_22_1 dst_reg_22_50)
         (= dst_reg_22_2 dst_reg_22_51)
         (= dst_reg_22_3 dst_reg_22_52)
         (= and.i.i.i_22_36 dst_reg_22_53)
         (= and6.i.i.i_22_38 dst_reg_22_54)
         (= dst_reg_22_6 dst_reg_22_55)
         (= dst_reg_22_7 dst_reg_22_56)
         (= #x0000000000000000 dst_reg_22_57)
         (= dst_reg_22_9 dst_reg_22_58)
         (= dst_reg_22_10 dst_reg_22_59)
         (= dst_reg_22_11 dst_reg_22_60)
         (= dst_reg_22_12 dst_reg_22_61)
         (= dst_reg_22_13 dst_reg_22_62)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_22_77 (= cmp.i.i_22_43 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_22_78 (= cmp.i.i_22_43 #b1))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_22_45 (bvand i23.i.i_22_39 #x00000000ffffffff))
  (= and8.i.i_22_47 (bvand i24.i.i_22_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_22_0 dst_reg_22_0)
  (= dst_reg_22_1 dst_reg_22_1)
  (= dst_reg_22_2 dst_reg_22_2)
  (= dst_reg_22_3 dst_reg_22_3)
  (= dst_reg_22_4 dst_reg_22_4)
  (= dst_reg_22_5 dst_reg_22_5)
  (= dst_reg_22_6 dst_reg_22_6)
  (= dst_reg_22_7 dst_reg_22_7)
  (= dst_reg_22_8 dst_reg_22_8)
  (= dst_reg_22_9 dst_reg_22_9)
  (= dst_reg_22_10 dst_reg_22_10)
  (= dst_reg_22_11 dst_reg_22_11)
  (= dst_reg_22_12 dst_reg_22_12)
  (= dst_reg_22_13 dst_reg_22_13)
  (= src_reg_22_14 src_reg_22_14)
  (= src_reg_22_15 src_reg_22_15)
  (= src_reg_22_16 src_reg_22_16)
  (= src_reg_22_17 src_reg_22_17)
  (= src_reg_22_18 src_reg_22_18)
  (= src_reg_22_19 src_reg_22_19)
  (= src_reg_22_20 src_reg_22_20)
  (= src_reg_22_21 src_reg_22_21)
  (= src_reg_22_22 src_reg_22_22)
  (= src_reg_22_23 src_reg_22_23)
  (= src_reg_22_24 src_reg_22_24)
  (= src_reg_22_25 src_reg_22_25)
  (= src_reg_22_26 src_reg_22_26)
  (= src_reg_22_27 src_reg_22_27)
  (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)
  (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)
  (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)
  (= dst_reg_22_4 i18.i.i_22_33)
  (= dst_reg_22_5 i20.i.i_22_34)
  (= and.i.i.i_22_36 (bvand i18.i.i_22_33 #x00000000ffffffff))
  (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 #x00000000ffffffff))
  (= dst_reg_22_8 i23.i.i_22_39)
  (= dst_reg_22_9 i24.i.i_22_40)
  (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))
  (ite (bvult i25.i.i_22_41 #x0000000100000000)
     (= cmp.i.i_22_43 #b1)
     (= cmp.i.i_22_43 #b0))

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
sw.default.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_22_98 #b0)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b1)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_22_96 #b0)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
      (a!2 (and (= tobool.not.i.i_22_96 #b1)
                (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_22_98 #b0) a!1)
               (and (= cmp18.not.i.not_22_97 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!3))
      (and (= tobool.not.i.i_22_96 #b0) a!3)
      (and (= cmp24.old.i_22_98 #b1) a!1)
      (and (= cmp18.not.i.not_22_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))
if.else.i.i
  (= cmp.i.i_22_43 #b0)
if.then.i.i
  (= cmp.i.i_22_43 #b1)
[encodeFunctionBody] EdgeAssertionsMap:
<sw.default.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<sw.default.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b1) (= tobool.not.i.i_22_96 #b1) a!1))
<entry, if.else.i.i> :(= cmp.i.i_22_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_22_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b1)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (or (and (= cmp.i.i.i.i_22_136 #b0) (and (= tobool.not.i.i_22_96 #b1) a!1))
      (and (= cmp.i.i.i.i_22_136 #b1) (and (= tobool.not.i.i_22_96 #b1) a!1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_22_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_22_98 #b1)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_22_97 #b1)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= cmp.i.i.i.i_22_136 #b0) (= tobool.not.i.i_22_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_22_97 #b0)
     (= tobool.not.i.i_22_96 #b1)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_22_98 #b0)
     (= tobool.not.i.i_22_96 #b0)
     (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_22_98 #b1)
         (= tobool.not.i.i_22_96 #b0)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
    (and (= cmp18.not.i.not_22_97 #b0)
         (= tobool.not.i.i_22_96 #b1)
         (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b0) a!1))
<if.end27.i, sw.default.i> :(let ((a!1 (or (and (= cmp24.old.i_22_98 #b0)
                    (= tobool.not.i.i_22_96 #b0)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1)))
               (and (= cmp18.not.i.not_22_97 #b1)
                    (= tobool.not.i.i_22_96 #b1)
                    (or (= cmp.i.i_22_43 #b0) (= cmp.i.i_22_43 #b1))))))
  (and (= tobool.not.i.i_22_96 #b1) a!1))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and.i1.i.i_22_200 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and4.i.i.i_22_203 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x0000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #x00000000ffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
7 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ and6.i.i_22_45 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
41 = MemoryPhi({__reg_bound_offset.exit.i,40},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_22_218 ] [ ] [ src_reg_22_219 ] [ src_reg_22_220 ] [ src_reg_22_221 ] [ [ src_reg_22_222 ] [ src_reg_22_223 ] ] [ src_reg_22_224 ] [ src_reg_22_225 ] [ src_reg_22_226 ] [ src_reg_22_227 ] [ ] [ src_reg_22_228 ] [ src_reg_22_229 ] [ src_reg_22_230 ] [ src_reg_22_231 ] ] 
- dst_reg: [ [ dst_reg_22_204 ] [ ] [ dst_reg_22_205 ] [ dst_reg_22_206 ] [ dst_reg_22_207 ] [ [ dst_reg_22_208 ] [ dst_reg_22_209 ] ] [ dst_reg_22_210 ] [ dst_reg_22_211 ] [ dst_reg_22_212 ] [ dst_reg_22_213 ] [ ] [ dst_reg_22_214 ] [ dst_reg_22_215 ] [ dst_reg_22_216 ] [ dst_reg_22_217 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ #x0000000000000000 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ and.i.i.i_22_36 ] [ and6.i.i.i_22_38 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ and.i.i301.i_22_122 ] [ and6.i.i302.i_22_124 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
}
42 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ dst_reg_22_55 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ dst_reg_22_58 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
- dst_reg: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ dst_reg_22_56 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_22_49 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ dst_reg_22_53 ] [ dst_reg_22_54 ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_22_81 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ #x00000000 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}
26 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_22_50 ] [ dst_reg_22_51 ] [ dst_reg_22_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_22_79 ] [ dst_reg_22_57 ] [ storemerge.i.i_22_79 ] [ ] [ dst_reg_22_59 ] [ dst_reg_22_60 ] [ dst_reg_22_61 ] [ dst_reg_22_62 ] ] 
- src_reg: [ [ src_reg_22_63 ] [ ] [ src_reg_22_64 ] [ src_reg_22_65 ] [ src_reg_22_66 ] [ [ src_reg_22_67 ] [ src_reg_22_68 ] ] [ src_reg_22_69 ] [ src_reg_22_70 ] [ src_reg_22_71 ] [ src_reg_22_72 ] [ ] [ src_reg_22_73 ] [ src_reg_22_74 ] [ src_reg_22_75 ] [ src_reg_22_76 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_22_0 ] [ ] [ dst_reg_22_1 ] [ dst_reg_22_2 ] [ dst_reg_22_3 ] [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] [ dst_reg_22_6 ] [ dst_reg_22_7 ] [ dst_reg_22_8 ] [ dst_reg_22_9 ] [ ] [ dst_reg_22_10 ] [ dst_reg_22_11 ] [ dst_reg_22_12 ] [ dst_reg_22_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_22_4 ] [ dst_reg_22_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_4",
	"dst_reg_22_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8",
	"dst_reg_22_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8",
	"dst_reg_22_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8",
	"dst_reg_22_9",
	"",
	"",
	"dst_reg_22_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8",
	"dst_reg_22_9",
	"",
	"",
	"dst_reg_22_10",
	"dst_reg_22_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_22_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_0",
	[
		""
	],
	"dst_reg_22_1",
	"dst_reg_22_2",
	"dst_reg_22_3",
	[
		"dst_reg_22_4",
		"dst_reg_22_5"
	],
	"dst_reg_22_6",
	"dst_reg_22_7",
	"dst_reg_22_8",
	"dst_reg_22_9",
	"",
	"",
	"dst_reg_22_10",
	"dst_reg_22_11",
	"dst_reg_22_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_22_14 ] [ ] [ src_reg_22_15 ] [ src_reg_22_16 ] [ src_reg_22_17 ] [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] [ src_reg_22_20 ] [ src_reg_22_21 ] [ src_reg_22_22 ] [ src_reg_22_23 ] [ ] [ src_reg_22_24 ] [ src_reg_22_25 ] [ src_reg_22_26 ] [ src_reg_22_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_22_18 ] [ src_reg_22_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_22_18 ] [ src_reg_22_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_18",
	"src_reg_22_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22",
	"src_reg_22_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22",
	"src_reg_22_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22",
	"src_reg_22_23",
	"",
	"",
	"src_reg_22_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22",
	"src_reg_22_23",
	"",
	"",
	"src_reg_22_24",
	"src_reg_22_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_22_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_14",
	[
		""
	],
	"src_reg_22_15",
	"src_reg_22_16",
	"src_reg_22_17",
	[
		"src_reg_22_18",
		"src_reg_22_19"
	],
	"src_reg_22_20",
	"src_reg_22_21",
	"src_reg_22_22",
	"src_reg_22_23",
	"",
	"",
	"src_reg_22_24",
	"src_reg_22_25",
	"src_reg_22_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_22_246 ] [ ] [ src_reg_22_247 ] [ src_reg_22_248 ] [ src_reg_22_249 ] [ [ src_reg_22_250 ] [ src_reg_22_251 ] ] [ src_reg_22_252 ] [ src_reg_22_253 ] [ src_reg_22_254 ] [ src_reg_22_255 ] [ ] [ src_reg_22_256 ] [ src_reg_22_257 ] [ src_reg_22_258 ] [ src_reg_22_259 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_22_246 ] [ ] [ src_reg_22_247 ] [ src_reg_22_248 ] [ src_reg_22_249 ] [ [ src_reg_22_250 ] [ src_reg_22_251 ] ] [ src_reg_22_252 ] [ src_reg_22_253 ] [ src_reg_22_254 ] [ src_reg_22_255 ] [ ] [ src_reg_22_256 ] [ src_reg_22_257 ] [ src_reg_22_258 ] [ src_reg_22_259 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_246 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_247 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_248 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_249 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_22_250 ] [ src_reg_22_251 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_22_250 ] [ src_reg_22_251 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_250 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_250"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_251 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_250",
	"src_reg_22_251"
]

[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_252 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_253 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_254 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_22_255 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254",
	"src_reg_22_255"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254",
	"src_reg_22_255",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_256 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254",
	"src_reg_22_255",
	"",
	"",
	"src_reg_22_256"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_22_257 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254",
	"src_reg_22_255",
	"",
	"",
	"src_reg_22_256",
	"src_reg_22_257"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_22_258 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_22_246",
	[
		""
	],
	"src_reg_22_247",
	"src_reg_22_248",
	"src_reg_22_249",
	[
		"src_reg_22_250",
		"src_reg_22_251"
	],
	"src_reg_22_252",
	"src_reg_22_253",
	"src_reg_22_254",
	"src_reg_22_255",
	"",
	"",
	"src_reg_22_256",
	"src_reg_22_257",
	"src_reg_22_258"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_22_232 ] [ ] [ dst_reg_22_233 ] [ dst_reg_22_234 ] [ dst_reg_22_235 ] [ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] [ dst_reg_22_238 ] [ dst_reg_22_239 ] [ dst_reg_22_240 ] [ dst_reg_22_241 ] [ ] [ dst_reg_22_242 ] [ dst_reg_22_243 ] [ dst_reg_22_244 ] [ dst_reg_22_245 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_22_232 ] [ ] [ dst_reg_22_233 ] [ dst_reg_22_234 ] [ dst_reg_22_235 ] [ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] [ dst_reg_22_238 ] [ dst_reg_22_239 ] [ dst_reg_22_240 ] [ dst_reg_22_241 ] [ ] [ dst_reg_22_242 ] [ dst_reg_22_243 ] [ dst_reg_22_244 ] [ dst_reg_22_245 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_232 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_233 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_234 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_235 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_22_236 ] [ dst_reg_22_237 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_236 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_236"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_237 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_236",
	"dst_reg_22_237"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_238 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_239 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_240 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_22_241 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240",
	"dst_reg_22_241"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240",
	"dst_reg_22_241",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_242 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240",
	"dst_reg_22_241",
	"",
	"",
	"dst_reg_22_242"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_22_243 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240",
	"dst_reg_22_241",
	"",
	"",
	"dst_reg_22_242",
	"dst_reg_22_243"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_22_244 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_22_232",
	[
		""
	],
	"dst_reg_22_233",
	"dst_reg_22_234",
	"dst_reg_22_235",
	[
		"dst_reg_22_236",
		"dst_reg_22_237"
	],
	"dst_reg_22_238",
	"dst_reg_22_239",
	"dst_reg_22_240",
	"dst_reg_22_241",
	"",
	"",
	"dst_reg_22_242",
	"dst_reg_22_243",
	"dst_reg_22_244"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_XOR_32
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_22_0",
      [ "" ],
      "dst_reg_22_1",
      "dst_reg_22_2",
      "dst_reg_22_3",
      [ "dst_reg_22_4", "dst_reg_22_5" ],
      "dst_reg_22_6",
      "dst_reg_22_7",
      "dst_reg_22_8",
      "dst_reg_22_9",
      "",
      "",
      "dst_reg_22_10",
      "dst_reg_22_11",
      "dst_reg_22_12"
   ],
   "src_reg" : [
      "src_reg_22_14",
      [ "" ],
      "src_reg_22_15",
      "src_reg_22_16",
      "src_reg_22_17",
      [ "src_reg_22_18", "src_reg_22_19" ],
      "src_reg_22_20",
      "src_reg_22_21",
      "src_reg_22_22",
      "src_reg_22_23",
      "",
      "",
      "src_reg_22_24",
      "src_reg_22_25",
      "src_reg_22_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_22_232",
      [ "" ],
      "dst_reg_22_233",
      "dst_reg_22_234",
      "dst_reg_22_235",
      [ "dst_reg_22_236", "dst_reg_22_237" ],
      "dst_reg_22_238",
      "dst_reg_22_239",
      "dst_reg_22_240",
      "dst_reg_22_241",
      "",
      "",
      "dst_reg_22_242",
      "dst_reg_22_243",
      "dst_reg_22_244"
   ],
   "src_reg" : [
      "src_reg_22_246",
      [ "" ],
      "src_reg_22_247",
      "src_reg_22_248",
      "src_reg_22_249",
      [ "src_reg_22_250", "src_reg_22_251" ],
      "src_reg_22_252",
      "src_reg_22_253",
      "src_reg_22_254",
      "src_reg_22_255",
      "",
      "",
      "src_reg_22_256",
      "src_reg_22_257",
      "src_reg_22_258"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun cmp.i.i_22_43 () (_ BitVec 1))
(declare-fun i25.i.i_22_41 () (_ BitVec 64))
(declare-fun i23.i.i_22_39 () (_ BitVec 64))
(declare-fun i24.i.i_22_40 () (_ BitVec 64))
(declare-fun dst_reg_22_9 () (_ BitVec 64))
(declare-fun dst_reg_22_8 () (_ BitVec 64))
(declare-fun i20.i.i_22_34 () (_ BitVec 64))
(declare-fun and6.i.i.i_22_38 () (_ BitVec 64))
(declare-fun i18.i.i_22_33 () (_ BitVec 64))
(declare-fun and.i.i.i_22_36 () (_ BitVec 64))
(declare-fun dst_reg_22_5 () (_ BitVec 64))
(declare-fun dst_reg_22_4 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_22_32 () (_ BitVec 64))
(declare-fun src_reg_22_23 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_22_31 () (_ BitVec 64))
(declare-fun src_reg_22_22 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_22_30 () (_ BitVec 64))
(declare-fun src_reg_22_19 () (_ BitVec 64))
(declare-fun src_reg_22_27 () (_ BitVec 8))
(declare-fun src_reg_22_26 () (_ BitVec 32))
(declare-fun src_reg_22_25 () (_ BitVec 32))
(declare-fun src_reg_22_24 () (_ BitVec 32))
(declare-fun src_reg_22_21 () (_ BitVec 64))
(declare-fun src_reg_22_20 () (_ BitVec 64))
(declare-fun src_reg_22_18 () (_ BitVec 64))
(declare-fun src_reg_22_17 () (_ BitVec 32))
(declare-fun src_reg_22_16 () (_ BitVec 32))
(declare-fun src_reg_22_15 () (_ BitVec 32))
(declare-fun src_reg_22_14 () (_ BitVec 32))
(declare-fun dst_reg_22_13 () (_ BitVec 8))
(declare-fun dst_reg_22_12 () (_ BitVec 32))
(declare-fun dst_reg_22_11 () (_ BitVec 32))
(declare-fun dst_reg_22_10 () (_ BitVec 32))
(declare-fun dst_reg_22_7 () (_ BitVec 64))
(declare-fun dst_reg_22_6 () (_ BitVec 64))
(declare-fun dst_reg_22_3 () (_ BitVec 32))
(declare-fun dst_reg_22_2 () (_ BitVec 32))
(declare-fun dst_reg_22_1 () (_ BitVec 32))
(declare-fun dst_reg_22_0 () (_ BitVec 32))
(declare-fun and8.i.i_22_47 () (_ BitVec 64))
(declare-fun and6.i.i_22_45 () (_ BitVec 64))
(declare-fun if.then.i.i_coerce_reg_to_size.exit.i_22_78 () Bool)
(declare-fun if.else.i.i_coerce_reg_to_size.exit.i_22_77 () Bool)
(declare-fun dst_reg_22_62 () (_ BitVec 8))
(declare-fun dst_reg_22_61 () (_ BitVec 32))
(declare-fun dst_reg_22_60 () (_ BitVec 32))
(declare-fun dst_reg_22_59 () (_ BitVec 32))
(declare-fun dst_reg_22_58 () (_ BitVec 64))
(declare-fun dst_reg_22_57 () (_ BitVec 64))
(declare-fun dst_reg_22_56 () (_ BitVec 64))
(declare-fun dst_reg_22_55 () (_ BitVec 64))
(declare-fun dst_reg_22_54 () (_ BitVec 64))
(declare-fun dst_reg_22_53 () (_ BitVec 64))
(declare-fun dst_reg_22_52 () (_ BitVec 32))
(declare-fun dst_reg_22_51 () (_ BitVec 32))
(declare-fun dst_reg_22_50 () (_ BitVec 32))
(declare-fun dst_reg_22_49 () (_ BitVec 32))
(declare-fun src_reg_22_76 () (_ BitVec 8))
(declare-fun src_reg_22_75 () (_ BitVec 32))
(declare-fun src_reg_22_74 () (_ BitVec 32))
(declare-fun src_reg_22_73 () (_ BitVec 32))
(declare-fun src_reg_22_72 () (_ BitVec 64))
(declare-fun src_reg_22_71 () (_ BitVec 64))
(declare-fun src_reg_22_70 () (_ BitVec 64))
(declare-fun src_reg_22_69 () (_ BitVec 64))
(declare-fun src_reg_22_68 () (_ BitVec 64))
(declare-fun src_reg_22_67 () (_ BitVec 64))
(declare-fun src_reg_22_66 () (_ BitVec 32))
(declare-fun src_reg_22_65 () (_ BitVec 32))
(declare-fun src_reg_22_64 () (_ BitVec 32))
(declare-fun src_reg_22_63 () (_ BitVec 32))
(declare-fun tobool.not.i.i_22_96 () (_ BitVec 1))
(declare-fun and6.i.i6.i_22_83 () (_ BitVec 64))
(declare-fun storemerge.i20.i_22_94 () (_ BitVec 64))
(declare-fun and8.i17.i_22_90 () (_ BitVec 64))
(declare-fun cmp.i15.i_22_86 () (_ BitVec 1))
(declare-fun src_reg1.sroa.17.0_22_92 () (_ BitVec 64))
(declare-fun and6.i16.i_22_88 () (_ BitVec 64))
(declare-fun i25.i13.i_22_84 () (_ BitVec 64))
(declare-fun i27.i.i_22_81 () (_ BitVec 64))
(declare-fun storemerge.i.i_22_79 () (_ BitVec 64))
(declare-fun cmp18.not.i.not_22_97 () (_ BitVec 1))
(declare-fun cmp24.old.i_22_98 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_22_136 () (_ BitVec 1))
(declare-fun sw.default.i___reg_bound_offset.exit.i_22_184 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_22_183 () Bool)
(declare-fun neg.i.i.i_22_202 () (_ BitVec 64))
(declare-fun or.i.i.i_22_199 () (_ BitVec 64))
(declare-fun and4.i.i.i_22_203 () (_ BitVec 64))
(declare-fun and.i1.i.i_22_200 () (_ BitVec 64))
(declare-fun and6.i.i302.i_22_124 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_22_198 () (_ BitVec 64))
(declare-fun and.i.i301.i_22_122 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_22_196 () (_ BitVec 64))
(declare-fun sub.i.i.i_22_193 () (_ BitVec 64))
(declare-fun cmp.i.i.i_22_188 () (_ BitVec 1))
(declare-fun and.i.i336.i_22_194 () (_ BitVec 64))
(declare-fun i.i333.i_22_132 () (_ BitVec 64))
(declare-fun notmask.i.i.i_22_191 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_22_189 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_22_185 () (_ BitVec 32))
(declare-fun phi.bo_22_182 () (_ BitVec 32))
(declare-fun src_reg_22_259 () (_ BitVec 8))
(declare-fun src_reg_22_231 () (_ BitVec 8))
(declare-fun src_reg_22_258 () (_ BitVec 32))
(declare-fun src_reg_22_230 () (_ BitVec 32))
(declare-fun src_reg_22_257 () (_ BitVec 32))
(declare-fun src_reg_22_229 () (_ BitVec 32))
(declare-fun src_reg_22_256 () (_ BitVec 32))
(declare-fun src_reg_22_228 () (_ BitVec 32))
(declare-fun src_reg_22_255 () (_ BitVec 64))
(declare-fun src_reg_22_227 () (_ BitVec 64))
(declare-fun src_reg_22_254 () (_ BitVec 64))
(declare-fun src_reg_22_226 () (_ BitVec 64))
(declare-fun src_reg_22_253 () (_ BitVec 64))
(declare-fun src_reg_22_225 () (_ BitVec 64))
(declare-fun src_reg_22_252 () (_ BitVec 64))
(declare-fun src_reg_22_224 () (_ BitVec 64))
(declare-fun src_reg_22_251 () (_ BitVec 64))
(declare-fun src_reg_22_223 () (_ BitVec 64))
(declare-fun src_reg_22_250 () (_ BitVec 64))
(declare-fun src_reg_22_222 () (_ BitVec 64))
(declare-fun src_reg_22_249 () (_ BitVec 32))
(declare-fun src_reg_22_221 () (_ BitVec 32))
(declare-fun src_reg_22_248 () (_ BitVec 32))
(declare-fun src_reg_22_220 () (_ BitVec 32))
(declare-fun src_reg_22_247 () (_ BitVec 32))
(declare-fun src_reg_22_219 () (_ BitVec 32))
(declare-fun src_reg_22_246 () (_ BitVec 32))
(declare-fun src_reg_22_218 () (_ BitVec 32))
(declare-fun dst_reg_22_245 () (_ BitVec 8))
(declare-fun dst_reg_22_217 () (_ BitVec 8))
(declare-fun dst_reg_22_244 () (_ BitVec 32))
(declare-fun dst_reg_22_216 () (_ BitVec 32))
(declare-fun dst_reg_22_243 () (_ BitVec 32))
(declare-fun dst_reg_22_215 () (_ BitVec 32))
(declare-fun dst_reg_22_242 () (_ BitVec 32))
(declare-fun dst_reg_22_214 () (_ BitVec 32))
(declare-fun dst_reg_22_241 () (_ BitVec 64))
(declare-fun dst_reg_22_213 () (_ BitVec 64))
(declare-fun dst_reg_22_240 () (_ BitVec 64))
(declare-fun dst_reg_22_212 () (_ BitVec 64))
(declare-fun dst_reg_22_239 () (_ BitVec 64))
(declare-fun dst_reg_22_211 () (_ BitVec 64))
(declare-fun dst_reg_22_238 () (_ BitVec 64))
(declare-fun dst_reg_22_210 () (_ BitVec 64))
(declare-fun dst_reg_22_237 () (_ BitVec 64))
(declare-fun dst_reg_22_209 () (_ BitVec 64))
(declare-fun dst_reg_22_236 () (_ BitVec 64))
(declare-fun dst_reg_22_208 () (_ BitVec 64))
(declare-fun dst_reg_22_235 () (_ BitVec 32))
(declare-fun dst_reg_22_207 () (_ BitVec 32))
(declare-fun dst_reg_22_234 () (_ BitVec 32))
(declare-fun dst_reg_22_206 () (_ BitVec 32))
(declare-fun dst_reg_22_233 () (_ BitVec 32))
(declare-fun dst_reg_22_205 () (_ BitVec 32))
(declare-fun dst_reg_22_232 () (_ BitVec 32))
(declare-fun dst_reg_22_204 () (_ BitVec 32))
(declare-fun xor.i.i.i_22_134 () (_ BitVec 64))
(declare-fun i20.i300.i_22_120 () (_ BitVec 64))
(declare-fun i18.i298.i_22_119 () (_ BitVec 64))
(declare-fun add.i.i.i335.i_22_180 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_22_179 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_22_176 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_22_178 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_22_175 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_22_168 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_22_172 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_22_170 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_22_167 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_22_174 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_22_160 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_22_164 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_22_162 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_22_159 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_22_166 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_22_152 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_22_156 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_22_154 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_22_151 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_22_158 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_22_144 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_22_148 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_22_146 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_22_141 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_22_150 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_22_138 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_22_140 () (_ BitVec 64))
(assert
 (let (($x90 (= cmp.i.i_22_43 (_ bv0 1))))
 (let (($x92 (= cmp.i.i_22_43 (_ bv1 1))))
 (let (($x93 (ite (bvult i25.i.i_22_41 (_ bv4294967296 64)) $x92 $x90)))
 (let (($x85 (= i25.i.i_22_41 (bvxor i24.i.i_22_40 i23.i.i_22_39))))
 (let (($x82 (= dst_reg_22_9 i24.i.i_22_40)))
 (let (($x80 (= dst_reg_22_8 i23.i.i_22_39)))
 (let (($x78 (= and6.i.i.i_22_38 (bvand i20.i.i_22_34 (_ bv4294967295 64)))))
 (let (($x75 (= and.i.i.i_22_36 (bvand i18.i.i_22_33 (_ bv4294967295 64)))))
 (let (($x71 (= dst_reg_22_5 i20.i.i_22_34)))
 (let (($x69 (= dst_reg_22_4 i18.i.i_22_33)))
 (let (($x67 (= src_reg_22_23 src_reg1.sroa.22.0.copyload_22_32)))
 (let (($x65 (= src_reg_22_22 src_reg1.sroa.17.0.copyload_22_31)))
 (let (($x63 (= src_reg_22_19 src_reg1.sroa.10.0.copyload_22_30)))
 (let (($x60 (= src_reg_22_27 src_reg_22_27)))
 (let (($x59 (= src_reg_22_26 src_reg_22_26)))
 (let (($x58 (= src_reg_22_25 src_reg_22_25)))
 (let (($x57 (= src_reg_22_24 src_reg_22_24)))
 (let (($x56 (= src_reg_22_23 src_reg_22_23)))
 (let (($x55 (= src_reg_22_22 src_reg_22_22)))
 (let (($x54 (= src_reg_22_21 src_reg_22_21)))
 (let (($x53 (= src_reg_22_20 src_reg_22_20)))
 (let (($x52 (= src_reg_22_19 src_reg_22_19)))
 (let (($x51 (= src_reg_22_18 src_reg_22_18)))
 (let (($x50 (= src_reg_22_17 src_reg_22_17)))
 (let (($x49 (= src_reg_22_16 src_reg_22_16)))
 (let (($x48 (= src_reg_22_15 src_reg_22_15)))
 (let (($x47 (= src_reg_22_14 src_reg_22_14)))
 (let (($x32 (= dst_reg_22_13 dst_reg_22_13)))
 (let (($x31 (= dst_reg_22_12 dst_reg_22_12)))
 (let (($x30 (= dst_reg_22_11 dst_reg_22_11)))
 (let (($x29 (= dst_reg_22_10 dst_reg_22_10)))
 (let (($x28 (= dst_reg_22_9 dst_reg_22_9)))
 (let (($x27 (= dst_reg_22_8 dst_reg_22_8)))
 (let (($x26 (= dst_reg_22_7 dst_reg_22_7)))
 (let (($x25 (= dst_reg_22_6 dst_reg_22_6)))
 (let (($x24 (= dst_reg_22_5 dst_reg_22_5)))
 (let (($x23 (= dst_reg_22_4 dst_reg_22_4)))
 (let (($x22 (= dst_reg_22_3 dst_reg_22_3)))
 (let (($x21 (= dst_reg_22_2 dst_reg_22_2)))
 (let (($x20 (= dst_reg_22_1 dst_reg_22_1)))
 (let (($x19 (= dst_reg_22_0 dst_reg_22_0)))
 (let (($x99 (= and8.i.i_22_47 (bvand i24.i.i_22_40 (_ bv4294967295 64)))))
 (let (($x96 (= and6.i.i_22_45 (bvand i23.i.i_22_39 (_ bv4294967295 64)))))
 (let (($x558 (=> $x92 (and $x96 $x99))))
 (let (($x479 (= if.then.i.i_coerce_reg_to_size.exit.i_22_78 $x92)))
 (let (($x478 (= if.else.i.i_coerce_reg_to_size.exit.i_22_77 $x90)))
 (let (($x156 (= dst_reg_22_13 dst_reg_22_62)))
 (let (($x155 (= dst_reg_22_12 dst_reg_22_61)))
 (let (($x154 (= dst_reg_22_11 dst_reg_22_60)))
 (let (($x153 (= dst_reg_22_10 dst_reg_22_59)))
 (let (($x152 (= dst_reg_22_9 dst_reg_22_58)))
 (let (($x157 (= (_ bv0 64) dst_reg_22_57)))
 (let (($x150 (= dst_reg_22_7 dst_reg_22_56)))
 (let (($x149 (= dst_reg_22_6 dst_reg_22_55)))
 (let (($x148 (= and6.i.i.i_22_38 dst_reg_22_54)))
 (let (($x147 (= and.i.i.i_22_36 dst_reg_22_53)))
 (let (($x146 (= dst_reg_22_3 dst_reg_22_52)))
 (let (($x145 (= dst_reg_22_2 dst_reg_22_51)))
 (let (($x144 (= dst_reg_22_1 dst_reg_22_50)))
 (let (($x143 (= (_ bv1 32) dst_reg_22_49)))
 (let (($x142 (= src_reg_22_27 src_reg_22_76)))
 (let (($x141 (= src_reg_22_26 src_reg_22_75)))
 (let (($x140 (= src_reg_22_25 src_reg_22_74)))
 (let (($x139 (= src_reg_22_24 src_reg_22_73)))
 (let (($x138 (= src_reg_22_23 src_reg_22_72)))
 (let (($x137 (= src_reg_22_22 src_reg_22_71)))
 (let (($x136 (= src_reg_22_21 src_reg_22_70)))
 (let (($x135 (= src_reg_22_20 src_reg_22_69)))
 (let (($x134 (= src_reg_22_19 src_reg_22_68)))
 (let (($x133 (= src_reg_22_18 src_reg_22_67)))
 (let (($x132 (= src_reg_22_17 src_reg_22_66)))
 (let (($x131 (= src_reg_22_16 src_reg_22_65)))
 (let (($x130 (= src_reg_22_15 src_reg_22_64)))
 (let (($x129 (= (_ bv1 32) src_reg_22_63)))
 (let (($x476 (and $x129 $x130 $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x157 $x152 $x153 $x154 $x155 $x156)))
 (let (($x477 (=> $x90 $x476)))
 (let (($x151 (= and6.i.i_22_45 dst_reg_22_57)))
 (let (($x474 (and $x129 $x130 $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x153 $x154 $x155 $x156)))
 (let (($x475 (=> $x92 $x474)))
 (let (($x194 (= tobool.not.i.i_22_96 (_ bv0 1))))
 (let (($x195 (= tobool.not.i.i_22_96 (_ bv1 1))))
 (let (($x196 (ite (= and6.i.i6.i_22_83 (_ bv0 64)) $x195 $x194)))
 (let (($x176 (= cmp.i15.i_22_86 (_ bv1 1))))
 (let (($x191 (ite $x176 (= storemerge.i20.i_22_94 and8.i17.i_22_90) (= storemerge.i20.i_22_94 (_ bv4294967295 64)))))
 (let (($x187 (ite $x176 (= src_reg1.sroa.17.0_22_92 and6.i16.i_22_88) (= src_reg1.sroa.17.0_22_92 (_ bv0 64)))))
 (let (($x183 (= and8.i17.i_22_90 (bvand src_reg1.sroa.22.0.copyload_22_32 (_ bv4294967295 64)))))
 (let (($x180 (= and6.i16.i_22_88 (bvand src_reg1.sroa.17.0.copyload_22_31 (_ bv4294967295 64)))))
 (let (($x175 (= cmp.i15.i_22_86 (_ bv0 1))))
 (let (($x177 (ite (bvult i25.i13.i_22_84 (_ bv4294967296 64)) $x176 $x175)))
 (let ((?x171 (bvxor src_reg1.sroa.22.0.copyload_22_32 src_reg1.sroa.17.0.copyload_22_31)))
 (let (($x172 (= i25.i13.i_22_84 ?x171)))
 (let (($x169 (= and6.i.i6.i_22_83 (bvand src_reg1.sroa.10.0.copyload_22_30 (_ bv4294967295 64)))))
 (let (($x166 (= dst_reg_22_57 i27.i.i_22_81)))
 (let (($x163 (= storemerge.i.i_22_79 and8.i.i_22_47)))
 (let (($x164 (=> if.then.i.i_coerce_reg_to_size.exit.i_22_78 $x163)))
 (let (($x161 (= storemerge.i.i_22_79 (_ bv4294967295 64))))
 (let (($x162 (=> if.else.i.i_coerce_reg_to_size.exit.i_22_77 $x161)))
 (let (($x555 (and $x162 $x164 $x166 $x169 $x172 $x177 $x180 $x183 $x187 $x191 $x196 $x475 $x477 $x478 $x479)))
 (let (($x458 (or $x90 $x92)))
 (let (($x556 (=> $x458 $x555)))
 (let (($x459 (and $x195 $x458)))
 (let (($x200 (= cmp18.not.i.not_22_97 (_ bv1 1))))
 (let (($x461 (and $x200 $x459)))
 (let (($x460 (and $x194 $x458)))
 (let (($x204 (= cmp24.old.i_22_98 (_ bv0 1))))
 (let (($x464 (and $x204 $x460)))
 (let (($x466 (or $x464 $x461)))
 (let (($x467 (and $x195 $x466)))
 (let (($x229 (= cmp.i.i.i.i_22_136 (_ bv1 1))))
 (let (($x470 (and $x229 $x467)))
 (let (($x481 (= sw.default.i___reg_bound_offset.exit.i_22_184 $x470)))
 (let (($x228 (= cmp.i.i.i.i_22_136 (_ bv0 1))))
 (let (($x471 (and $x228 $x467)))
 (let (($x480 (= if.end.i.i.i.i___reg_bound_offset.exit.i_22_183 $x471)))
 (let (($x395 (= and4.i.i.i_22_203 (bvand or.i.i.i_22_199 neg.i.i.i_22_202))))
 (let (($x392 (= neg.i.i.i_22_202 (bvxor and.i1.i.i_22_200 (_ bv18446744073709551615 64)))))
 (let (($x389 (= and.i1.i.i_22_200 (bvand retval.sroa.3.0.i.i.i_22_198 and6.i.i302.i_22_124))))
 (let (($x386 (= or.i.i.i_22_199 (bvor retval.sroa.0.0.i.i.i_22_196 and.i.i301.i_22_122))))
 (let (($x362 (= cmp.i.i.i_22_188 (_ bv1 1))))
 (let (($x383 (ite $x362 (= retval.sroa.3.0.i.i.i_22_198 (_ bv4294967295 64)) (= retval.sroa.3.0.i.i.i_22_198 sub.i.i.i_22_193))))
 (let (($x379 (ite $x362 (= retval.sroa.0.0.i.i.i_22_196 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_22_196 and.i.i336.i_22_194))))
 (let (($x375 (= and.i.i336.i_22_194 (bvand notmask.i.i.i_22_191 i.i333.i_22_132))))
 (let (($x372 (= sub.i.i.i_22_193 (bvxor notmask.i.i.i_22_191 (_ bv18446744073709551615 64)))))
 (let (($x369 (= notmask.i.i.i_22_191 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_22_189))))
 (let (($x366 (= sh_prom.i.i.i_22_189 ((_ zero_extend 32) retval.0.i.i.i.i_22_185))))
 (let (($x361 (= cmp.i.i.i_22_188 (_ bv0 1))))
 (let (($x363 (ite (bvugt retval.0.i.i.i.i_22_185 (_ bv63 32)) $x362 $x361)))
 (let (($x357 (= retval.0.i.i.i.i_22_185 (_ bv0 32))))
 (let (($x358 (=> sw.default.i___reg_bound_offset.exit.i_22_184 $x357)))
 (let (($x355 (= retval.0.i.i.i.i_22_185 phi.bo_22_182)))
 (let (($x356 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_22_183 $x355)))
 (let (($x553 (and $x356 $x358 $x363 $x366 $x369 $x372 $x375 $x379 $x383 $x386 $x389 $x392 $x395 $x480 $x481)))
 (let (($x472 (or $x471 $x470)))
 (let (($x554 (=> $x472 $x553)))
 (let (($x542 (= src_reg_22_231 src_reg_22_259)))
 (let (($x541 (= src_reg_22_230 src_reg_22_258)))
 (let (($x540 (= src_reg_22_229 src_reg_22_257)))
 (let (($x539 (= src_reg_22_228 src_reg_22_256)))
 (let (($x538 (= src_reg_22_227 src_reg_22_255)))
 (let (($x537 (= src_reg_22_226 src_reg_22_254)))
 (let (($x536 (= src_reg_22_225 src_reg_22_253)))
 (let (($x535 (= src_reg_22_224 src_reg_22_252)))
 (let (($x534 (= src_reg_22_223 src_reg_22_251)))
 (let (($x533 (= src_reg_22_222 src_reg_22_250)))
 (let (($x532 (= src_reg_22_221 src_reg_22_249)))
 (let (($x531 (= src_reg_22_220 src_reg_22_248)))
 (let (($x530 (= src_reg_22_219 src_reg_22_247)))
 (let (($x529 (= src_reg_22_218 src_reg_22_246)))
 (let (($x514 (= dst_reg_22_217 dst_reg_22_245)))
 (let (($x513 (= dst_reg_22_216 dst_reg_22_244)))
 (let (($x512 (= dst_reg_22_215 dst_reg_22_243)))
 (let (($x511 (= dst_reg_22_214 dst_reg_22_242)))
 (let (($x510 (= dst_reg_22_213 dst_reg_22_241)))
 (let (($x509 (= dst_reg_22_212 dst_reg_22_240)))
 (let (($x508 (= dst_reg_22_211 dst_reg_22_239)))
 (let (($x507 (= dst_reg_22_210 dst_reg_22_238)))
 (let (($x506 (= dst_reg_22_209 dst_reg_22_237)))
 (let (($x505 (= dst_reg_22_208 dst_reg_22_236)))
 (let (($x504 (= dst_reg_22_207 dst_reg_22_235)))
 (let (($x503 (= dst_reg_22_206 dst_reg_22_234)))
 (let (($x502 (= dst_reg_22_205 dst_reg_22_233)))
 (let (($x501 (= dst_reg_22_204 dst_reg_22_232)))
 (let (($x451 (= dst_reg_22_62 dst_reg_22_217)))
 (let (($x450 (= dst_reg_22_61 dst_reg_22_216)))
 (let (($x449 (= dst_reg_22_60 dst_reg_22_215)))
 (let (($x457 (= (_ bv0 32) dst_reg_22_214)))
 (let (($x456 (= (_ bv18446744073709551615 64) dst_reg_22_213)))
 (let (($x446 (= (_ bv0 64) dst_reg_22_212)))
 (let (($x455 (= (_ bv9223372036854775807 64) dst_reg_22_211)))
 (let (($x454 (= (_ bv9223372036854775808 64) dst_reg_22_210)))
 (let (($x453 (= (_ bv18446744073709551615 64) dst_reg_22_209)))
 (let (($x452 (= (_ bv0 64) dst_reg_22_208)))
 (let (($x441 (= dst_reg_22_52 dst_reg_22_207)))
 (let (($x440 (= dst_reg_22_51 dst_reg_22_206)))
 (let (($x439 (= dst_reg_22_50 dst_reg_22_205)))
 (let (($x438 (= (_ bv1 32) dst_reg_22_204)))
 (let (($x437 (= src_reg_22_76 src_reg_22_231)))
 (let (($x436 (= src_reg_22_75 src_reg_22_230)))
 (let (($x435 (= src_reg_22_74 src_reg_22_229)))
 (let (($x434 (= src_reg_22_73 src_reg_22_228)))
 (let (($x433 (= src_reg_22_72 src_reg_22_227)))
 (let (($x432 (= src_reg_22_71 src_reg_22_226)))
 (let (($x431 (= src_reg_22_70 src_reg_22_225)))
 (let (($x430 (= src_reg_22_69 src_reg_22_224)))
 (let (($x429 (= src_reg_22_68 src_reg_22_223)))
 (let (($x428 (= src_reg_22_67 src_reg_22_222)))
 (let (($x427 (= src_reg_22_66 src_reg_22_221)))
 (let (($x426 (= src_reg_22_65 src_reg_22_220)))
 (let (($x425 (= src_reg_22_64 src_reg_22_219)))
 (let (($x424 (= src_reg_22_63 src_reg_22_218)))
 (let (($x484 (and $x424 $x425 $x426 $x427 $x428 $x429 $x430 $x431 $x432 $x433 $x434 $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x452 $x453 $x454 $x455 $x446 $x456 $x457 $x449 $x450 $x451)))
 (let (($x199 (= cmp18.not.i.not_22_97 (_ bv0 1))))
 (let (($x462 (and $x199 $x459)))
 (let (($x205 (= cmp24.old.i_22_98 (_ bv1 1))))
 (let (($x463 (and $x205 $x460)))
 (let (($x465 (or $x463 $x462)))
 (let (($x486 (=> $x465 $x484)))
 (let (($x468 (and $x194 $x466)))
 (let (($x485 (=> $x468 $x484)))
 (let (($x448 (= dst_reg_22_59 dst_reg_22_214)))
 (let (($x447 (= (_ bv4294967295 64) dst_reg_22_213)))
 (let (($x445 (= (_ bv4294967295 64) dst_reg_22_211)))
 (let (($x444 (= (_ bv0 64) dst_reg_22_210)))
 (let (($x443 (= and.i1.i.i_22_200 dst_reg_22_209)))
 (let (($x442 (= and4.i.i.i_22_203 dst_reg_22_208)))
 (let (($x482 (and $x424 $x425 $x426 $x427 $x428 $x429 $x430 $x431 $x432 $x433 $x434 $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451)))
 (let (($x483 (=> $x472 $x482)))
 (let (($x551 (and $x483 $x485 $x486 $x501 $x502 $x503 $x504 $x505 $x506 $x507 $x508 $x509 $x510 $x511 $x512 $x513 $x514 $x529 $x530 $x531 $x532 $x533 $x534 $x535 $x536 $x537 $x538 $x539 $x540 $x541 $x542)))
 (let (($x473 (or $x472 (or $x468 $x465))))
 (let (($x552 (=> $x473 $x551)))
 (let (($x201 (ite (= src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94) $x200 $x199)))
 (let (($x550 (=> $x459 (and $x201))))
 (let (($x206 (ite (bvugt src_reg1.sroa.17.0_22_92 storemerge.i20.i_22_94) $x205 $x204)))
 (let (($x548 (=> $x460 (and $x206))))
 (let (($x230 (ite (= xor.i.i.i_22_134 (_ bv0 64)) $x229 $x228)))
 (let (($x225 (= xor.i.i.i_22_134 (bvxor i.i333.i_22_132 (_ bv4294967295 64)))))
 (let (($x222 (= (_ bv0 64) i.i333.i_22_132)))
 (let (($x220 (= and6.i.i302.i_22_124 (bvand i20.i300.i_22_120 (_ bv4294967295 64)))))
 (let (($x217 (= and.i.i301.i_22_122 (bvand i18.i298.i_22_119 (_ bv4294967295 64)))))
 (let (($x214 (= (_ bv18446744073709551615 64) i20.i300.i_22_120)))
 (let (($x212 (= (_ bv0 64) i18.i298.i_22_119)))
 (let (($x546 (=> $x467 (and $x212 $x214 $x217 $x220 $x222 $x225 $x230))))
 (let (($x351 (= phi.bo_22_182 (bvand add.i.i.i335.i_22_180 (_ bv255 32)))))
 (let (($x347 (= add.i.i.i335.i_22_180 (bvadd num.4.i.i.i.i.i_22_176 i.i.i.i.i.i.neg_22_179))))
 (let (($x344 (= i.i.i.i.i.i.neg_22_179 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_22_178))))
 (let (($x341 (= word.addr.4.lobit.i.i.i.i.i.neg_22_178 (bvlshr word.addr.4.i.i.i.i.i_22_175 (_ bv63 64)))))
 (let (($x320 (= tobool20.not.i.i.i.i.i_22_170 (_ bv1 1))))
 (let (($x337 (ite $x320 (= num.4.i.i.i.i.i_22_176 sub22.i.i.i.i.i_22_172) (= num.4.i.i.i.i.i_22_176 num.3.i.i.i.i.i_22_168))))
 (let (($x333 (ite $x320 (= word.addr.4.i.i.i.i.i_22_175 shl23.i.i.i.i.i_22_174) (= word.addr.4.i.i.i.i.i_22_175 word.addr.3.i.i.i.i.i_22_167))))
 (let (($x329 (= shl23.i.i.i.i.i_22_174 (bvshl word.addr.3.i.i.i.i.i_22_167 (_ bv2 64)))))
 (let (($x325 (= sub22.i.i.i.i.i_22_172 (bvadd num.3.i.i.i.i.i_22_168 (_ bv254 32)))))
 (let (($x319 (= tobool20.not.i.i.i.i.i_22_170 (_ bv0 1))))
 (let (($x321 (ite (bvult word.addr.3.i.i.i.i.i_22_167 (_ bv4611686018427387904 64)) $x320 $x319)))
 (let (($x298 (= tobool14.not.i.i.i.i.i_22_162 (_ bv1 1))))
 (let (($x315 (ite $x298 (= num.3.i.i.i.i.i_22_168 sub16.i.i.i.i.i_22_164) (= num.3.i.i.i.i.i_22_168 num.2.i.i.i.i.i_22_160))))
 (let (($x311 (ite $x298 (= word.addr.3.i.i.i.i.i_22_167 shl17.i.i.i.i.i_22_166) (= word.addr.3.i.i.i.i.i_22_167 word.addr.2.i.i.i.i.i_22_159))))
 (let (($x307 (= shl17.i.i.i.i.i_22_166 (bvshl word.addr.2.i.i.i.i.i_22_159 (_ bv4 64)))))
 (let (($x303 (= sub16.i.i.i.i.i_22_164 (bvadd num.2.i.i.i.i.i_22_160 (_ bv4294967292 32)))))
 (let (($x297 (= tobool14.not.i.i.i.i.i_22_162 (_ bv0 1))))
 (let (($x299 (ite (bvult word.addr.2.i.i.i.i.i_22_159 (_ bv1152921504606846976 64)) $x298 $x297)))
 (let (($x276 (= tobool8.not.i.i.i.i.i_22_154 (_ bv1 1))))
 (let (($x293 (ite $x276 (= num.2.i.i.i.i.i_22_160 sub10.i.i.i.i.i_22_156) (= num.2.i.i.i.i.i_22_160 num.1.i.i.i.i.i_22_152))))
 (let (($x289 (ite $x276 (= word.addr.2.i.i.i.i.i_22_159 shl11.i.i.i.i.i_22_158) (= word.addr.2.i.i.i.i.i_22_159 word.addr.1.i.i.i.i.i_22_151))))
 (let (($x285 (= shl11.i.i.i.i.i_22_158 (bvshl word.addr.1.i.i.i.i.i_22_151 (_ bv8 64)))))
 (let (($x281 (= sub10.i.i.i.i.i_22_156 (bvadd num.1.i.i.i.i.i_22_152 (_ bv4294967288 32)))))
 (let (($x275 (= tobool8.not.i.i.i.i.i_22_154 (_ bv0 1))))
 (let (($x277 (ite (bvult word.addr.1.i.i.i.i.i_22_151 (_ bv72057594037927936 64)) $x276 $x275)))
 (let (($x254 (= tobool2.not.i.i.i.i.i_22_146 (_ bv1 1))))
 (let (($x271 (ite $x254 (= num.1.i.i.i.i.i_22_152 sub4.i.i.i.i.i_22_148) (= num.1.i.i.i.i.i_22_152 spec.select17.i.i.i.i.i_22_144))))
 (let (($x267 (ite $x254 (= word.addr.1.i.i.i.i.i_22_151 shl5.i.i.i.i.i_22_150) (= word.addr.1.i.i.i.i.i_22_151 spec.select.i.i.i.i.i_22_141))))
 (let (($x263 (= shl5.i.i.i.i.i_22_150 (bvshl spec.select.i.i.i.i.i_22_141 (_ bv16 64)))))
 (let (($x259 (= sub4.i.i.i.i.i_22_148 (bvadd spec.select17.i.i.i.i.i_22_144 (_ bv4294967280 32)))))
 (let (($x253 (= tobool2.not.i.i.i.i.i_22_146 (_ bv0 1))))
 (let (($x255 (ite (bvult spec.select.i.i.i.i.i_22_141 (_ bv281474976710656 64)) $x254 $x253)))
 (let (($x234 (= tobool.not.i.i.i.i.i_22_138 (_ bv1 1))))
 (let (($x249 (ite $x234 (= spec.select17.i.i.i.i.i_22_144 (_ bv31 32)) (= spec.select17.i.i.i.i.i_22_144 (_ bv63 32)))))
 (let (($x243 (ite $x234 (= spec.select.i.i.i.i.i_22_141 shl.i.i.i.i.i_22_140) (= spec.select.i.i.i.i.i_22_141 xor.i.i.i_22_134))))
 (let (($x239 (= shl.i.i.i.i.i_22_140 (bvshl xor.i.i.i_22_134 (_ bv32 64)))))
 (let (($x233 (= tobool.not.i.i.i.i.i_22_138 (_ bv0 1))))
 (let (($x235 (ite (bvult xor.i.i.i_22_134 (_ bv4294967296 64)) $x234 $x233)))
 (let (($x543 (and $x235 $x239 $x243 $x249 $x255 $x259 $x263 $x267 $x271 $x277 $x281 $x285 $x289 $x293 $x299 $x303 $x307 $x311 $x315 $x321 $x325 $x329 $x333 $x337 $x341 $x344 $x347 $x351)))
 (let (($x544 (=> $x471 $x543)))
 (and $x544 $x546 $x548 $x550 $x552 $x554 $x556 $x558 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x75 $x78 $x80 $x82 $x85 $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32/BPF_XOR_32.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR_32 BPF_XOR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR_32 22 BPF_XOR_32.smt2

Finished llvm_to_smt_pass
