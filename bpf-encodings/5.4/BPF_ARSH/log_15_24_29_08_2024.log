Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0xa7f2a0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ARSH'<<0xa7f2a0>>  #uses=1
  CS<0x9de500> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ARSH'<<0x12a9250>>  #uses=1
  CS<0x1134540> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_ARSH
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_ARSH
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i28.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy2 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy2, %struct.tnum* %var_off.i254.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_ARSH:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i29.i = bitcast %struct.tnum* %var_off.i28.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i255.i = bitcast %struct.tnum* %var_off.i254.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ARSH'<<0x107ba80>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_ARSH
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_ARSH
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_ARSH -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
GLOBAL_BITVECTOR_SUFFIX: 11
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_0
[lookInsideStruct] singleValueType:dst_reg_11_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_1
[lookInsideStruct] singleValueType:dst_reg_11_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_2
[lookInsideStruct] singleValueType:dst_reg_11_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_3
[lookInsideStruct] singleValueType:dst_reg_11_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_4
[lookInsideStruct] singleValueType:dst_reg_11_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_5
[lookInsideStruct] singleValueType:dst_reg_11_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_6
[lookInsideStruct] singleValueType:dst_reg_11_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_7
[lookInsideStruct] singleValueType:dst_reg_11_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_8
[lookInsideStruct] singleValueType:dst_reg_11_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_9
[lookInsideStruct] singleValueType:dst_reg_11_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_10
[lookInsideStruct] singleValueType:dst_reg_11_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_11
[lookInsideStruct] singleValueType:dst_reg_11_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_12
[lookInsideStruct] singleValueType:dst_reg_11_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_13
[lookInsideStruct] singleValueType:dst_reg_11_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_14
[lookInsideStruct] singleValueType:src_reg_11_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_15
[lookInsideStruct] singleValueType:src_reg_11_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_16
[lookInsideStruct] singleValueType:src_reg_11_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_17
[lookInsideStruct] singleValueType:src_reg_11_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_18
[lookInsideStruct] singleValueType:src_reg_11_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_19
[lookInsideStruct] singleValueType:src_reg_11_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_20
[lookInsideStruct] singleValueType:src_reg_11_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_21
[lookInsideStruct] singleValueType:src_reg_11_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_22
[lookInsideStruct] singleValueType:src_reg_11_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_23
[lookInsideStruct] singleValueType:src_reg_11_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_24
[lookInsideStruct] singleValueType:src_reg_11_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_25
[lookInsideStruct] singleValueType:src_reg_11_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_26
[lookInsideStruct] singleValueType:src_reg_11_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_27
[lookInsideStruct] singleValueType:src_reg_11_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_11_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_11_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_11_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleLoadInst] (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_11_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_11_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleLoadInst] (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleLoadInst] (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_11_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_11_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleLoadInst] (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_11_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_11_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleLoadInst] (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_11_34
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_11_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_11_36
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_11_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_11_37
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleLoadInst] (= dst_reg_11_5 i215.i_11_37)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_11_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_11_31
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_11_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_11_38
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_11_33
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_11_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_11_39
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_11_38
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_11_39
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_11_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_11_41
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_11_38
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_11_39
[handleSelectInst] z3ExprRes: or.cond197.i_11_41
[handleSelectInst](ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_11_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_11_31
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_11_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_11_42
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_11_42
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_11_41
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_11_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_11_43
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_11_33
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_11_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_11_44
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_11_43
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_11_44
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_11_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_11_46
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_11_43
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_11_44
[handleSelectInst] z3ExprRes: or.cond199.i_11_46
[handleSelectInst](ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_11_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_11_31
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_11_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_11_47
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_11_33
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_11_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_11_48
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_11_47
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_11_48
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_11_50
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_11_50
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_11_47
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_11_48
[handleSelectInst] z3ExprRes: or.cond200.i_11_50
[handleSelectInst](ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb287.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}

-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.bb287.i
=========================
-------------------
  %cmp288.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_11_33
[getBitVecSingValType] i64 64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000040
[getBitVecSingValType]   %cmp288.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp288.not.i_11_68
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp288.not.i_11_68
[handleICmpInst] (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  br i1 %cmp288.not.i, label %if.end291.i, label %if.then290.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then290.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %var_off.i254.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i254.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %var_off.i254.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i254.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i254.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %var_off.i254.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i254.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %var_off.i254.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i254.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i254.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smin_value.i.i256.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i256.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i256.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i256.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i256.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smax_value.i.i257.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i257.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i257.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i257.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i257.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umin_value.i.i258.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i258.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i258.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i258.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i258.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i258.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umax_value.i.i259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i259.i, dst_reg, [9]
umin_value.i.i258.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i254.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i259.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end291.i
=========================
-------------------
  %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i271.i = load i64, i64* %smin_value292.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i271.i = load i64, i64* %smin_value292.i, align 8
[handleLoadInst] pointerValue:   %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i271.i = load i64, i64* %smin_value292.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i271.i_11_76
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i271.i_11_76
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleLoadInst] (= dst_reg_11_6 i271.i_11_76)
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:1
  (= dst_reg_11_6 i271.i_11_76)
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i271.i = load i64, i64* %smin_value292.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %i271.i = load i64, i64* %smin_value292.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i271.i_11_76
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType]   %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shr293.i_11_77
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shr293.i_11_77
[handleBinaryOperatorInst] ASHR instruction
(= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
-------------------
  store i64 %shr293.i, i64* %smin_value292.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr293.i_11_77
[handleStoreInst] BVToStore: shr293.i_11_77
[handleStoreInst] destPointerValue:   %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shr293.i_11_77 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i272.i = load i64, i64* %smax_value294.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i272.i = load i64, i64* %smax_value294.i, align 8
[handleLoadInst] pointerValue:   %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i272.i = load i64, i64* %smax_value294.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i272.i_11_78
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i272.i_11_78
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleLoadInst] (= dst_reg_11_7 i272.i_11_78)
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:3
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i272.i = load i64, i64* %smax_value294.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %i272.i = load i64, i64* %smax_value294.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i272.i_11_78
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType]   %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shr295.i_11_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shr295.i_11_79
[handleBinaryOperatorInst] ASHR instruction
(= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
-------------------
  store i64 %shr295.i, i64* %smax_value294.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr295.i_11_79
[handleStoreInst] BVToStore: shr295.i_11_79
[handleStoreInst] destPointerValue:   %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shr295.i_11_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %i273.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i273.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i273.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i273.i_11_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i273.i_11_80
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleLoadInst] (= dst_reg_11_4 i273.i_11_80)
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:5
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 255
[handleBinaryOperatorInst] opResVal:   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_11_32
[getBitVecSingValType] i64 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000000000ff
[getBitVecSingValType]   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i260.i_11_82
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i260.i_11_82
[handleBinaryOperatorInst] AND instruction
(= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
-------------------
  %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i273.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[handleBinaryOperatorInst] opResVal:   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType]   %i273.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i273.i_11_80
[getBitVecSingValType]   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i260.i_11_82
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shr.i261.i_11_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shr.i261.i_11_83
[handleBinaryOperatorInst] ASHR instruction
(= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
-------------------
  %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[handleBinaryOperatorInst] opResVal:   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_11_37
[getBitVecSingValType]   %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i260.i_11_82
[getBitVecSingValType]   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shr5.i262.i_11_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shr5.i262.i_11_84
[handleBinaryOperatorInst] ASHR instruction
(= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
-------------------
  store i64 %shr.i261.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr.i261.i_11_83
[handleStoreInst] BVToStore: shr.i261.i_11_83
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shr.i261.i_11_83 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %shr5.i262.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr5.i262.i_11_84
[handleStoreInst] BVToStore: shr5.i262.i_11_84
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shr5.i262.i_11_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  store i64 0, i64* %umin_value301.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  store i64 -1, i64* %umax_value302.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[handleBinaryOperatorInst] op1Val: i64 -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
[getBitVecSingValType]   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr5.i262.i_11_84
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i271.i_11_88
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i271.i_11_88
[handleBinaryOperatorInst] AND instruction
(= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
-------------------
  %or.i272.i = or i64 %shr.i261.i, %and.i271.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[handleBinaryOperatorInst] op1Val:   %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %or.i272.i = or i64 %shr.i261.i, %and.i271.i
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr.i261.i_11_83
[getBitVecSingValType]   %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i271.i_11_88
[getBitVecSingValType]   %or.i272.i = or i64 %shr.i261.i, %and.i271.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i272.i_11_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i272.i_11_89
[handleBinaryOperatorInst] OR instruction
(= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
-------------------
  %cmp.i273.i = icmp sgt i64 %shr293.i, %or.i272.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr293.i_11_77
[getBitVecSingValType]   %or.i272.i = or i64 %shr.i261.i, %and.i271.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i272.i_11_89
[getBitVecSingValType]   %cmp.i273.i = icmp sgt i64 %shr293.i, %or.i272.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i273.i_11_90
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i273.i_11_90
[handleICmpInst] (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:11
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cond.i274.i = select i1 %cmp.i273.i, i64 %shr293.i, i64 %or.i272.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 31 = MemoryDef(30)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleSelectInst]SelectMap:
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i273.i = icmp sgt i64 %shr293.i, %or.i272.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i273.i_11_90
[getBitVecSingValType]   %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr293.i_11_77
[getBitVecSingValType]   %or.i272.i = or i64 %shr.i261.i, %and.i271.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i272.i_11_89
[getBitVecSingValType]   %cond.i274.i = select i1 %cmp.i273.i, i64 %shr293.i, i64 %or.i272.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i274.i_11_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i274.i_11_91
[handleSelectInst] z3ExprSelectOp1: cmp.i273.i_11_90
[handleSelectInst] z3ExprSelectOp2: shr293.i_11_77
[handleSelectInst] z3ExprSelectOp3: or.i272.i_11_89
[handleSelectInst] z3ExprRes: cond.i274.i_11_91
[handleSelectInst](ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
-------------------
  store i64 %cond.i274.i, i64* %smin_value292.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i274.i = select i1 %cmp.i273.i, i64 %shr293.i, i64 %or.i272.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i274.i_11_91
[handleStoreInst] BVToStore: cond.i274.i_11_91
[handleStoreInst] destPointerValue:   %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ shr293.i_11_77 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i274.i_11_91 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[handleBinaryOperatorInst] op1Val: i64 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
[getBitVecSingValType]   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr5.i262.i_11_84
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and7.i277.i_11_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and7.i277.i_11_93
[handleBinaryOperatorInst] AND instruction
(= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
-------------------
  %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[handleBinaryOperatorInst] op1Val:   %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr.i261.i_11_83
[getBitVecSingValType]   %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and7.i277.i_11_93
[getBitVecSingValType]   %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i278.i_11_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i278.i_11_94
[handleBinaryOperatorInst] OR instruction
(= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
-------------------
  %cmp10.i279.i = icmp slt i64 %shr295.i, %or8.i278.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr295.i_11_79
[getBitVecSingValType]   %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i278.i_11_94
[getBitVecSingValType]   %cmp10.i279.i = icmp slt i64 %shr295.i, %or8.i278.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp10.i279.i_11_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp10.i279.i_11_95
[handleICmpInst] (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:15
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cond14.i280.i = select i1 %cmp10.i279.i, i64 %shr295.i, i64 %or8.i278.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 32 = MemoryDef(31)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleSelectInst]SelectMap:
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp10.i279.i = icmp slt i64 %shr295.i, %or8.i278.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp10.i279.i_11_95
[getBitVecSingValType]   %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr295.i_11_79
[getBitVecSingValType]   %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i278.i_11_94
[getBitVecSingValType]   %cond14.i280.i = select i1 %cmp10.i279.i, i64 %shr295.i, i64 %or8.i278.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond14.i280.i_11_96
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond14.i280.i_11_96
[handleSelectInst] z3ExprSelectOp1: cmp10.i279.i_11_95
[handleSelectInst] z3ExprSelectOp2: shr295.i_11_79
[handleSelectInst] z3ExprSelectOp3: or8.i278.i_11_94
[handleSelectInst] z3ExprRes: cond14.i280.i_11_96
[handleSelectInst](ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
-------------------
  store i64 %cond14.i280.i, i64* %smax_value294.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond14.i280.i = select i1 %cmp10.i279.i, i64 %shr295.i, i64 %or8.i278.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond14.i280.i_11_96
[handleStoreInst] BVToStore: cond14.i280.i_11_96
[handleStoreInst] destPointerValue:   %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ shr295.i_11_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond14.i280.i_11_96 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %shr.i261.i, i64* %umin_value301.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr.i261.i_11_83
[handleStoreInst] BVToStore: shr.i261.i_11_83
[handleStoreInst] destPointerValue:   %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shr.i261.i_11_83 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %or29.i287.i = or i64 %shr.i261.i, %shr5.i262.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[handleBinaryOperatorInst] op1Val:   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[handleBinaryOperatorInst] opResVal:   %or29.i287.i = or i64 %shr.i261.i, %shr5.i262.i
[getBitVecSingValType]   %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr.i261.i_11_83
[getBitVecSingValType]   %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shr5.i262.i_11_84
[getBitVecSingValType]   %or29.i287.i = or i64 %shr.i261.i, %shr5.i262.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or29.i287.i_11_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or29.i287.i_11_97
[handleBinaryOperatorInst] OR instruction
(= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
-------------------
  store i64 %or29.i287.i, i64* %umax_value302.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or29.i287.i = or i64 %shr.i261.i, %shr5.i262.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i287.i_11_97
[handleStoreInst] BVToStore: or29.i287.i_11_97
[handleStoreInst] destPointerValue:   %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or29.i287.i_11_97 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_98
[lookInsideStruct] singleValueType:dst_reg_11_98
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_99
[lookInsideStruct] singleValueType:dst_reg_11_99
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_100
[lookInsideStruct] singleValueType:dst_reg_11_100
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_101
[lookInsideStruct] singleValueType:dst_reg_11_101
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_102
[lookInsideStruct] singleValueType:dst_reg_11_102
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_103
[lookInsideStruct] singleValueType:dst_reg_11_103
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_104
[lookInsideStruct] singleValueType:dst_reg_11_104
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_105
[lookInsideStruct] singleValueType:dst_reg_11_105
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_106
[lookInsideStruct] singleValueType:dst_reg_11_106
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_107
[lookInsideStruct] singleValueType:dst_reg_11_107
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_108
[lookInsideStruct] singleValueType:dst_reg_11_108
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_109
[lookInsideStruct] singleValueType:dst_reg_11_109
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_110
[lookInsideStruct] singleValueType:dst_reg_11_110
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_111
[lookInsideStruct] singleValueType:dst_reg_11_111
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_112
[lookInsideStruct] singleValueType:src_reg_11_112
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_113
[lookInsideStruct] singleValueType:src_reg_11_113
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_114
[lookInsideStruct] singleValueType:src_reg_11_114
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_115
[lookInsideStruct] singleValueType:src_reg_11_115
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_116
[lookInsideStruct] singleValueType:src_reg_11_116
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_117
[lookInsideStruct] singleValueType:src_reg_11_117
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_118
[lookInsideStruct] singleValueType:src_reg_11_118
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_119
[lookInsideStruct] singleValueType:src_reg_11_119
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_120
[lookInsideStruct] singleValueType:src_reg_11_120
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_121
[lookInsideStruct] singleValueType:src_reg_11_121
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_122
[lookInsideStruct] singleValueType:src_reg_11_122
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_123
[lookInsideStruct] singleValueType:src_reg_11_123
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_124
[lookInsideStruct] singleValueType:src_reg_11_124
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_125
[lookInsideStruct] singleValueType:src_reg_11_125
[setupBVTreeForArg] returning BVTree: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleMemoryPhiNode] incomingBBI: if.end291.i
[handleMemoryPhiNode] incomingAccessI: 35 = MemoryDef(34)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_11_112)
(= src_reg_11_15 src_reg_11_113)
(= src_reg_11_16 src_reg_11_114)
(= src_reg_11_17 src_reg_11_115)
(= src_reg_11_18 src_reg_11_116)
(= src_reg_11_19 src_reg_11_117)
(= src_reg_11_20 src_reg_11_118)
(= src_reg_11_21 src_reg_11_119)
(= src_reg_11_22 src_reg_11_120)
(= src_reg_11_23 src_reg_11_121)
(= src_reg_11_24 src_reg_11_122)
(= src_reg_11_25 src_reg_11_123)
(= src_reg_11_26 src_reg_11_124)
(= src_reg_11_27 src_reg_11_125)
(= #x00000001 dst_reg_11_98)
(= dst_reg_11_1 dst_reg_11_99)
(= dst_reg_11_2 dst_reg_11_100)
(= dst_reg_11_3 dst_reg_11_101)
(= shr.i261.i_11_83 dst_reg_11_102)
(= shr5.i262.i_11_84 dst_reg_11_103)
(= cond.i274.i_11_91 dst_reg_11_104)
(= cond14.i280.i_11_96 dst_reg_11_105)
(= shr.i261.i_11_83 dst_reg_11_106)
(= or29.i287.i_11_97 dst_reg_11_107)
(= dst_reg_11_10 dst_reg_11_108)
(= dst_reg_11_11 dst_reg_11_109)
(= dst_reg_11_12 dst_reg_11_110)
(= dst_reg_11_13 dst_reg_11_111)
]
[handleMemoryPhiNode] incomingBBI: if.then290.i
[handleMemoryPhiNode] incomingAccessI: 25 = MemoryDef(24)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_11_112)
(= src_reg_11_15 src_reg_11_113)
(= src_reg_11_16 src_reg_11_114)
(= src_reg_11_17 src_reg_11_115)
(= src_reg_11_18 src_reg_11_116)
(= src_reg_11_19 src_reg_11_117)
(= src_reg_11_20 src_reg_11_118)
(= src_reg_11_21 src_reg_11_119)
(= src_reg_11_22 src_reg_11_120)
(= src_reg_11_23 src_reg_11_121)
(= src_reg_11_24 src_reg_11_122)
(= src_reg_11_25 src_reg_11_123)
(= src_reg_11_26 src_reg_11_124)
(= src_reg_11_27 src_reg_11_125)
(= #x00000001 dst_reg_11_98)
(= dst_reg_11_1 dst_reg_11_99)
(= dst_reg_11_2 dst_reg_11_100)
(= dst_reg_11_3 dst_reg_11_101)
(= #x0000000000000000 dst_reg_11_102)
(= #xffffffffffffffff dst_reg_11_103)
(= #x8000000000000000 dst_reg_11_104)
(= #x7fffffffffffffff dst_reg_11_105)
(= #x0000000000000000 dst_reg_11_106)
(= #xffffffffffffffff dst_reg_11_107)
(= dst_reg_11_10 dst_reg_11_108)
(= dst_reg_11_11 dst_reg_11_109)
(= dst_reg_11_12 dst_reg_11_110)
(= dst_reg_11_13 dst_reg_11_111)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then290.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= #x0000000000000000 dst_reg_11_102)
  (= #xffffffffffffffff dst_reg_11_103)
  (= #x8000000000000000 dst_reg_11_104)
  (= #x7fffffffffffffff dst_reg_11_105)
  (= #x0000000000000000 dst_reg_11_106)
  (= #xffffffffffffffff dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
<if.end291.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= shr.i261.i_11_83 dst_reg_11_102)
  (= shr5.i262.i_11_84 dst_reg_11_103)
  (= cond.i274.i_11_91 dst_reg_11_104)
  (= cond14.i280.i_11_96 dst_reg_11_105)
  (= shr.i261.i_11_83 dst_reg_11_106)
  (= or29.i287.i_11_97 dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[handleLoadInst] pointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_11_126
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_11_126
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_104 i.i322.i_11_126)
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.end309.i, Size:1
  (= dst_reg_11_104 i.i322.i_11_126)
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_11_126
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_11_128
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_11_128
[handleICmpInst] (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_11_129
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_11_129
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_105 i33.i.i_11_129)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_11_105 i33.i.i_11_129)
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_11_129
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_11_131
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_11_131
[handleICmpInst] (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i326.i, dst_reg, [8]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i326.i, dst_reg, [8]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_11_132
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_11_132
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_106 i34.i.i_11_132)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_11_106 i34.i.i_11_132)
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_11_126
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_11_132
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_11_133
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_11_133
[handleICmpInst] (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_11_133
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_11_126
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_11_132
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_11_134
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_11_134
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_11_133
[handleSelectInst] z3ExprSelectOp2: i.i322.i_11_126
[handleSelectInst] z3ExprSelectOp3: i34.i.i_11_132
[handleSelectInst] z3ExprRes: cond.i327.i_11_134
[handleSelectInst](ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_11_134
[handleStoreInst] BVToStore: cond.i327.i_11_134
[handleStoreInst] destPointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(50)
[handleStoreInst] definingMemoryAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_11_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_11_134
[handleStoreInst] BVToStore: cond.i327.i_11_134
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryDef(50)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_104 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_11_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
umin_value.i326.i, dst_reg, [8]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i326.i, dst_reg, [8]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_11_135
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_11_135
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_105 i35.i.i_11_135)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_11_136
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_11_136
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_107 i36.i.i_11_136)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_11_135
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_11_136
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_11_137
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_11_137
[handleICmpInst] (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 37 = MemoryDef(36)
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_11_137
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_11_135
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_11_136
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_11_138
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_11_138
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_11_137
[handleSelectInst] z3ExprSelectOp2: i35.i.i_11_135
[handleSelectInst] z3ExprSelectOp3: i36.i.i_11_136
[handleSelectInst] z3ExprRes: cond12.i.i_11_138
[handleSelectInst](ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_11_138
[handleStoreInst] BVToStore: cond12.i.i_11_138
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_107 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_11_138 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_11_138
[handleStoreInst] BVToStore: cond12.i.i_11_138
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_105 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_11_138 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_11_139
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_11_139
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_107 i37.i.i_11_139)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_11_107 i37.i.i_11_139)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_11_139
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_11_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_11_141
[handleICmpInst] (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_11_142
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_11_142
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_106 i38.i.i_11_142)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_11_142
[handleStoreInst] BVToStore: i38.i.i_11_142
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(50)
[handleStoreInst] definingMemoryAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_104 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_11_142 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_11_129
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_11_139
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_11_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_11_143
[handleICmpInst] (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 40 = MemoryDef(50)
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_11_143
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_11_129
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_11_139
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_11_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_11_144
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_11_143
[handleSelectInst] z3ExprSelectOp2: i33.i.i_11_129
[handleSelectInst] z3ExprSelectOp3: i37.i.i_11_139
[handleSelectInst] z3ExprRes: cond27.i.i_11_144
[handleSelectInst](ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_11_144
[handleStoreInst] BVToStore: cond27.i.i_11_144
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryDef(50)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_107 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_11_144 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_11_144
[handleStoreInst] BVToStore: cond27.i.i_11_144
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_105 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_11_144 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_11_142
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_11_146
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_11_146
[handleICmpInst] (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_11_126
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_11_142
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_11_147
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_11_147
[handleICmpInst] (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_11_147
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_11_126
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_11_142
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_11_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_11_148
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_11_147
[handleSelectInst] z3ExprSelectOp2: i.i322.i_11_126
[handleSelectInst] z3ExprSelectOp3: i38.i.i_11_142
[handleSelectInst] z3ExprRes: cond40.i.i_11_148
[handleSelectInst](ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_11_148
[handleStoreInst] BVToStore: cond40.i.i_11_148
[handleStoreInst] destPointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(50)
[handleStoreInst] definingMemoryAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_11_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_11_148
[handleStoreInst] BVToStore: cond40.i.i_11_148
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] definingMemoryAccess: 43 = MemoryDef(50)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_104 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_11_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_11_139
[handleStoreInst] BVToStore: i37.i.i_11_139
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 45 = MemoryDef(44)
[handleStoreInst] definingMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_105 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_11_139 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
45 = MemoryDef(44) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_149
[lookInsideStruct] singleValueType:dst_reg_11_149
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_150
[lookInsideStruct] singleValueType:dst_reg_11_150
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_151
[lookInsideStruct] singleValueType:dst_reg_11_151
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_152
[lookInsideStruct] singleValueType:dst_reg_11_152
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_153
[lookInsideStruct] singleValueType:dst_reg_11_153
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_154
[lookInsideStruct] singleValueType:dst_reg_11_154
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_155
[lookInsideStruct] singleValueType:dst_reg_11_155
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_156
[lookInsideStruct] singleValueType:dst_reg_11_156
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_157
[lookInsideStruct] singleValueType:dst_reg_11_157
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_158
[lookInsideStruct] singleValueType:dst_reg_11_158
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_159
[lookInsideStruct] singleValueType:dst_reg_11_159
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_160
[lookInsideStruct] singleValueType:dst_reg_11_160
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_161
[lookInsideStruct] singleValueType:dst_reg_11_161
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_162
[lookInsideStruct] singleValueType:dst_reg_11_162
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_163
[lookInsideStruct] singleValueType:src_reg_11_163
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_164
[lookInsideStruct] singleValueType:src_reg_11_164
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_165
[lookInsideStruct] singleValueType:src_reg_11_165
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_166
[lookInsideStruct] singleValueType:src_reg_11_166
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_167
[lookInsideStruct] singleValueType:src_reg_11_167
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_168
[lookInsideStruct] singleValueType:src_reg_11_168
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_169
[lookInsideStruct] singleValueType:src_reg_11_169
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_170
[lookInsideStruct] singleValueType:src_reg_11_170
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_171
[lookInsideStruct] singleValueType:src_reg_11_171
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_172
[lookInsideStruct] singleValueType:src_reg_11_172
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_173
[lookInsideStruct] singleValueType:src_reg_11_173
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_174
[lookInsideStruct] singleValueType:src_reg_11_174
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_175
[lookInsideStruct] singleValueType:src_reg_11_175
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_176
[lookInsideStruct] singleValueType:src_reg_11_176
[setupBVTreeForArg] returning BVTree: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 39 = MemoryDef(38)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_11_112 src_reg_11_163)
(= src_reg_11_113 src_reg_11_164)
(= src_reg_11_114 src_reg_11_165)
(= src_reg_11_115 src_reg_11_166)
(= src_reg_11_116 src_reg_11_167)
(= src_reg_11_117 src_reg_11_168)
(= src_reg_11_118 src_reg_11_169)
(= src_reg_11_119 src_reg_11_170)
(= src_reg_11_120 src_reg_11_171)
(= src_reg_11_121 src_reg_11_172)
(= src_reg_11_122 src_reg_11_173)
(= src_reg_11_123 src_reg_11_174)
(= src_reg_11_124 src_reg_11_175)
(= src_reg_11_125 src_reg_11_176)
(= dst_reg_11_98 dst_reg_11_149)
(= dst_reg_11_99 dst_reg_11_150)
(= dst_reg_11_100 dst_reg_11_151)
(= dst_reg_11_101 dst_reg_11_152)
(= dst_reg_11_102 dst_reg_11_153)
(= dst_reg_11_103 dst_reg_11_154)
(= cond.i327.i_11_134 dst_reg_11_155)
(= cond12.i.i_11_138 dst_reg_11_156)
(= cond.i327.i_11_134 dst_reg_11_157)
(= cond12.i.i_11_138 dst_reg_11_158)
(= dst_reg_11_108 dst_reg_11_159)
(= dst_reg_11_109 dst_reg_11_160)
(= dst_reg_11_110 dst_reg_11_161)
(= dst_reg_11_111 dst_reg_11_162)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 42 = MemoryDef(41)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_11_112 src_reg_11_163)
(= src_reg_11_113 src_reg_11_164)
(= src_reg_11_114 src_reg_11_165)
(= src_reg_11_115 src_reg_11_166)
(= src_reg_11_116 src_reg_11_167)
(= src_reg_11_117 src_reg_11_168)
(= src_reg_11_118 src_reg_11_169)
(= src_reg_11_119 src_reg_11_170)
(= src_reg_11_120 src_reg_11_171)
(= src_reg_11_121 src_reg_11_172)
(= src_reg_11_122 src_reg_11_173)
(= src_reg_11_123 src_reg_11_174)
(= src_reg_11_124 src_reg_11_175)
(= src_reg_11_125 src_reg_11_176)
(= dst_reg_11_98 dst_reg_11_149)
(= dst_reg_11_99 dst_reg_11_150)
(= dst_reg_11_100 dst_reg_11_151)
(= dst_reg_11_101 dst_reg_11_152)
(= dst_reg_11_102 dst_reg_11_153)
(= dst_reg_11_103 dst_reg_11_154)
(= i38.i.i_11_142 dst_reg_11_155)
(= cond27.i.i_11_144 dst_reg_11_156)
(= dst_reg_11_106 dst_reg_11_157)
(= cond27.i.i_11_144 dst_reg_11_158)
(= dst_reg_11_108 dst_reg_11_159)
(= dst_reg_11_109 dst_reg_11_160)
(= dst_reg_11_110 dst_reg_11_161)
(= dst_reg_11_111 dst_reg_11_162)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_11_112 src_reg_11_163)
(= src_reg_11_113 src_reg_11_164)
(= src_reg_11_114 src_reg_11_165)
(= src_reg_11_115 src_reg_11_166)
(= src_reg_11_116 src_reg_11_167)
(= src_reg_11_117 src_reg_11_168)
(= src_reg_11_118 src_reg_11_169)
(= src_reg_11_119 src_reg_11_170)
(= src_reg_11_120 src_reg_11_171)
(= src_reg_11_121 src_reg_11_172)
(= src_reg_11_122 src_reg_11_173)
(= src_reg_11_123 src_reg_11_174)
(= src_reg_11_124 src_reg_11_175)
(= src_reg_11_125 src_reg_11_176)
(= dst_reg_11_98 dst_reg_11_149)
(= dst_reg_11_99 dst_reg_11_150)
(= dst_reg_11_100 dst_reg_11_151)
(= dst_reg_11_101 dst_reg_11_152)
(= dst_reg_11_102 dst_reg_11_153)
(= dst_reg_11_103 dst_reg_11_154)
(= dst_reg_11_104 dst_reg_11_155)
(= dst_reg_11_105 dst_reg_11_156)
(= dst_reg_11_106 dst_reg_11_157)
(= dst_reg_11_107 dst_reg_11_158)
(= dst_reg_11_108 dst_reg_11_159)
(= dst_reg_11_109 dst_reg_11_160)
(= dst_reg_11_110 dst_reg_11_161)
(= dst_reg_11_111 dst_reg_11_162)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 45 = MemoryDef(44)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_11_112 src_reg_11_163)
(= src_reg_11_113 src_reg_11_164)
(= src_reg_11_114 src_reg_11_165)
(= src_reg_11_115 src_reg_11_166)
(= src_reg_11_116 src_reg_11_167)
(= src_reg_11_117 src_reg_11_168)
(= src_reg_11_118 src_reg_11_169)
(= src_reg_11_119 src_reg_11_170)
(= src_reg_11_120 src_reg_11_171)
(= src_reg_11_121 src_reg_11_172)
(= src_reg_11_122 src_reg_11_173)
(= src_reg_11_123 src_reg_11_174)
(= src_reg_11_124 src_reg_11_175)
(= src_reg_11_125 src_reg_11_176)
(= dst_reg_11_98 dst_reg_11_149)
(= dst_reg_11_99 dst_reg_11_150)
(= dst_reg_11_100 dst_reg_11_151)
(= dst_reg_11_101 dst_reg_11_152)
(= dst_reg_11_102 dst_reg_11_153)
(= dst_reg_11_103 dst_reg_11_154)
(= cond40.i.i_11_148 dst_reg_11_155)
(= i37.i.i_11_139 dst_reg_11_156)
(= cond40.i.i_11_148 dst_reg_11_157)
(= dst_reg_11_107 dst_reg_11_158)
(= dst_reg_11_108 dst_reg_11_159)
(= dst_reg_11_109 dst_reg_11_160)
(= dst_reg_11_110 dst_reg_11_161)
(= dst_reg_11_111 dst_reg_11_162)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= cond40.i.i_11_148 dst_reg_11_155)
  (= i37.i.i_11_139 dst_reg_11_156)
  (= cond40.i.i_11_148 dst_reg_11_157)
  (= dst_reg_11_107 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= dst_reg_11_104 dst_reg_11_155)
  (= dst_reg_11_105 dst_reg_11_156)
  (= dst_reg_11_106 dst_reg_11_157)
  (= dst_reg_11_107 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= i38.i.i_11_142 dst_reg_11_155)
  (= cond27.i.i_11_144 dst_reg_11_156)
  (= dst_reg_11_106 dst_reg_11_157)
  (= cond27.i.i_11_144 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= cond.i327.i_11_134 dst_reg_11_155)
  (= cond12.i.i_11_138 dst_reg_11_156)
  (= cond.i327.i_11_134 dst_reg_11_157)
  (= cond12.i.i_11_138 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then290.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= #x0000000000000000 dst_reg_11_102)
  (= #xffffffffffffffff dst_reg_11_103)
  (= #x8000000000000000 dst_reg_11_104)
  (= #x7fffffffffffffff dst_reg_11_105)
  (= #x0000000000000000 dst_reg_11_106)
  (= #xffffffffffffffff dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
<if.end291.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= shr.i261.i_11_83 dst_reg_11_102)
  (= shr5.i262.i_11_84 dst_reg_11_103)
  (= cond.i274.i_11_91 dst_reg_11_104)
  (= cond14.i280.i_11_96 dst_reg_11_105)
  (= shr.i261.i_11_83 dst_reg_11_106)
  (= or29.i287.i_11_97 dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_11_177
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_11_177
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleLoadInst] (= dst_reg_11_157 i.i333.i_11_177)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_11_157 i.i333.i_11_177)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
umax_value.i334.i, dst_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
umax_value.i334.i, dst_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_11_178
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_11_178
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleLoadInst] (= dst_reg_11_158 i5.i.i_11_178)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_11_178
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_11_177
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_11_179
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_11_179
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_11_179
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_11_181
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_11_181
[handleICmpInst] (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_11_179
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_11_183
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_11_183
[handleICmpInst] (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_11_179
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_11_185
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_11_185
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_11_183
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_11_185
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_11_179
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_11_186
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_11_186
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_11_183
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_11_185
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_11_179
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_11_186
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
spec.select17.i.i.i.i.i,,
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_11_183
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_11_189
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_11_189
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_11_183
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_11_189
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_11_186
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_11_191
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_11_191
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_11_189
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_11_193
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_11_193
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_11_186
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_11_195
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_11_195
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_11_191
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_11_195
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_11_186
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_11_196
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_11_196
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_11_191
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_11_195
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_11_186
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_11_196
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i274.i,shr293.i,or.i272.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond27.i.i,i33.i.i,i37.i.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_11_191
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_11_193
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_11_189
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_11_197
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_11_197
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_11_191
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_11_193
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_11_189
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_11_197
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_11_196
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_11_199
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_11_199
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_11_197
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_11_201
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_11_201
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_11_196
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_11_203
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_11_203
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_11_199
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_11_203
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_11_196
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_11_204
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_11_204
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_11_199
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_11_203
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_11_196
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_11_204
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_11_199
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_11_201
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_11_197
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_11_205
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_11_205
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_11_199
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_11_201
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_11_197
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_11_205
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_11_204
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_11_207
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_11_207
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_11_205
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_11_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_11_209
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_11_204
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_11_211
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_11_211
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_11_207
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_11_211
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_11_204
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_11_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_11_212
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_11_207
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_11_211
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_11_204
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_11_212
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_11_207
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_11_209
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_11_205
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_11_213
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_11_213
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_11_207
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_11_209
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_11_205
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_11_213
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_11_212
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_11_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_11_215
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
  (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
  (= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
  (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_11_213
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_11_217
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_11_217
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_11_212
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_11_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_11_219
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_11_219
   (bvshl word.addr.3.i.i.i.i.i_11_212 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_11_215
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_11_219
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_11_212
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_11_220
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_11_220
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_11_215
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_11_219
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_11_212
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_11_220
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219)
     (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_11_215
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_11_217
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_11_213
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_11_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_11_221
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_11_215
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_11_217
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_11_213
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_11_221
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217)
     (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_11_220
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_11_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_11_223
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_11_223
   (bvlshr word.addr.4.i.i.i.i.i_11_220 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_11_223
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_11_224
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_11_224
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_11_224
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_11_221
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_11_224
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_11_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_11_225
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_11_225
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_11_227
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_11_227
[handleBinaryOperatorInst] AND instruction
(= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_11_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_11_230
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_11_227
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_11_230
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_11_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_11_233
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
  (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
  (= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
  (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
  (= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 #x000000fe))
  (= shl23.i.i.i.i.i_11_219
   (bvshl word.addr.3.i.i.i.i.i_11_212 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219)
     (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217)
     (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))
  (= word.addr.4.lobit.i.i.i.i.i.neg_11_223
   (bvlshr word.addr.4.i.i.i.i.i_11_220 #x000000000000003f))
  (= i.i.i.i.i.i.neg_11_224
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))
  (= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))
  (= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 #x000000ff))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_11_230
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_11_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_11_234
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_11_234
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_11_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_11_236
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_11_236 (bvshl #xffffffffffffffff sh_prom.i.i.i_11_234))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_11_236
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_11_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_11_238
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_11_236
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_11_177
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_11_239
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_11_239
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_11_233
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_11_239
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_11_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_11_241
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_11_233
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_11_239
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_11_241
[handleSelectInst](ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.0.0.i.i.i_11_241 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
cond27.i.i,i33.i.i,i37.i.i
or.cond200.i,,cmp24.old.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond.i274.i,shr293.i,or.i272.i
cond14.i280.i,shr295.i,or8.i278.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
cond.i327.i,i.i322.i,i34.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_11_233
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_11_238
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_11_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_11_243
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_11_233
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_11_238
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_11_243
[handleSelectInst](ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.3.0.i.i.i_11_243 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
umax_value.i334.i, dst_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i.i_11_244
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i.i_11_244
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_102 i9.i.i_11_244)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:10
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
  (= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))
  (= notmask.i.i.i_11_236 (bvshl #xffffffffffffffff sh_prom.i.i.i_11_234))
  (= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 #xffffffffffffffff))
  (= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.0.0.i.i.i_11_241 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.3.0.i.i.i_11_243 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))
  (= dst_reg_11_102 i9.i.i_11_244)
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
  (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
  (= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
  (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
  (= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 #x000000fe))
  (= shl23.i.i.i.i.i_11_219
   (bvshl word.addr.3.i.i.i.i.i_11_212 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219)
     (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217)
     (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))
  (= word.addr.4.lobit.i.i.i.i.i.neg_11_223
   (bvlshr word.addr.4.i.i.i.i.i_11_220 #x000000000000003f))
  (= i.i.i.i.i.i.neg_11_224
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))
  (= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))
  (= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 #x000000ff))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 50 = MemoryPhi({if.end291.i,35},{if.then290.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smin_value292.i, dst_reg, [6]
var_off.i254.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i257.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value301.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
umax_value302.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
smax_value294.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i256.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
umax_value.i334.i, dst_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i254.i.repack2, dst_reg, [5, 1]
umin_value.i.i258.i, dst_reg, [8]
umax_value.i.i259.i, dst_reg, [9]
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i.i_11_245
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i.i_11_245
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
[handleLoadInst] (= dst_reg_11_103 i11.i.i_11_245)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:11
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
  (= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))
  (= notmask.i.i.i_11_236 (bvshl #xffffffffffffffff sh_prom.i.i.i_11_234))
  (= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 #xffffffffffffffff))
  (= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.0.0.i.i.i_11_241 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.3.0.i.i.i_11_243 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))
  (= dst_reg_11_102 i9.i.i_11_244)
  (= dst_reg_11_103 i11.i.i_11_245)
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
  (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
  (= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
  (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
  (= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 #x000000fe))
  (= shl23.i.i.i.i.i_11_219
   (bvshl word.addr.3.i.i.i.i.i_11_212 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219)
     (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217)
     (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))
  (= word.addr.4.lobit.i.i.i.i.i.neg_11_223
   (bvlshr word.addr.4.i.i.i.i.i_11_220 #x000000000000003f))
  (= i.i.i.i.i.i.neg_11_224
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))
  (= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))
  (= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 #x000000ff))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_11_241
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i.i_11_244
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_11_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_11_246
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_11_246 (bvor retval.sroa.0.0.i.i.i_11_241 i9.i.i_11_244))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_11_243
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_11_245
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_11_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_11_247
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_11_247 (bvand retval.sroa.3.0.i.i.i_11_243 i11.i.i_11_245))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_11_247
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_11_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_11_249
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_11_249 (bvxor and.i1.i.i_11_247 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_11_246
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_11_249
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_11_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_11_250
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_11_250 (bvand or.i.i.i_11_246 neg.i.i.i_11_249))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_11_250
[handleStoreInst] BVToStore: and4.i.i.i_11_250
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 46 = MemoryDef(48)
[handleStoreInst] definingMemoryAccess: 48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_153 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_11_250 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
}
45 = MemoryDef(44) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45}) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_11_247
[handleStoreInst] BVToStore: and.i1.i.i_11_247
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 47 = MemoryDef(46)
[handleStoreInst] definingMemoryAccess: 46 = MemoryDef(48)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_11_154 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_11_247 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
47 = MemoryDef(46) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ and.i1.i.i_11_247 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
46 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
}
45 = MemoryDef(44) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45}) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_251
[lookInsideStruct] singleValueType:dst_reg_11_251
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_252
[lookInsideStruct] singleValueType:dst_reg_11_252
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_253
[lookInsideStruct] singleValueType:dst_reg_11_253
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_254
[lookInsideStruct] singleValueType:dst_reg_11_254
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_255
[lookInsideStruct] singleValueType:dst_reg_11_255
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_256
[lookInsideStruct] singleValueType:dst_reg_11_256
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_257
[lookInsideStruct] singleValueType:dst_reg_11_257
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_258
[lookInsideStruct] singleValueType:dst_reg_11_258
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_259
[lookInsideStruct] singleValueType:dst_reg_11_259
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_260
[lookInsideStruct] singleValueType:dst_reg_11_260
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_261
[lookInsideStruct] singleValueType:dst_reg_11_261
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_262
[lookInsideStruct] singleValueType:dst_reg_11_262
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_263
[lookInsideStruct] singleValueType:dst_reg_11_263
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_264
[lookInsideStruct] singleValueType:dst_reg_11_264
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_265
[lookInsideStruct] singleValueType:src_reg_11_265
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_266
[lookInsideStruct] singleValueType:src_reg_11_266
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_267
[lookInsideStruct] singleValueType:src_reg_11_267
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_268
[lookInsideStruct] singleValueType:src_reg_11_268
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_269
[lookInsideStruct] singleValueType:src_reg_11_269
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_270
[lookInsideStruct] singleValueType:src_reg_11_270
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_271
[lookInsideStruct] singleValueType:src_reg_11_271
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_272
[lookInsideStruct] singleValueType:src_reg_11_272
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_273
[lookInsideStruct] singleValueType:src_reg_11_273
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_274
[lookInsideStruct] singleValueType:src_reg_11_274
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_275
[lookInsideStruct] singleValueType:src_reg_11_275
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_276
[lookInsideStruct] singleValueType:src_reg_11_276
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_277
[lookInsideStruct] singleValueType:src_reg_11_277
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_278
[lookInsideStruct] singleValueType:src_reg_11_278
[setupBVTreeForArg] returning BVTree: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
- dst_reg: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_11_265)
(= src_reg_11_15 src_reg_11_266)
(= src_reg_11_16 src_reg_11_267)
(= src_reg_11_17 src_reg_11_268)
(= src_reg_11_18 src_reg_11_269)
(= src_reg_11_19 src_reg_11_270)
(= src_reg_11_20 src_reg_11_271)
(= src_reg_11_21 src_reg_11_272)
(= src_reg_11_22 src_reg_11_273)
(= src_reg_11_23 src_reg_11_274)
(= src_reg_11_24 src_reg_11_275)
(= src_reg_11_25 src_reg_11_276)
(= src_reg_11_26 src_reg_11_277)
(= src_reg_11_27 src_reg_11_278)
(= #x00000001 dst_reg_11_251)
(= dst_reg_11_1 dst_reg_11_252)
(= dst_reg_11_2 dst_reg_11_253)
(= dst_reg_11_3 dst_reg_11_254)
(= #x0000000000000000 dst_reg_11_255)
(= #xffffffffffffffff dst_reg_11_256)
(= #x8000000000000000 dst_reg_11_257)
(= #x7fffffffffffffff dst_reg_11_258)
(= #x0000000000000000 dst_reg_11_259)
(= #xffffffffffffffff dst_reg_11_260)
(= #x00000000 dst_reg_11_261)
(= dst_reg_11_11 dst_reg_11_262)
(= dst_reg_11_12 dst_reg_11_263)
(= dst_reg_11_13 dst_reg_11_264)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 47 = MemoryDef(46)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ and.i1.i.i_11_247 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ and.i1.i.i_11_247 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_11_163 src_reg_11_265)
(= src_reg_11_164 src_reg_11_266)
(= src_reg_11_165 src_reg_11_267)
(= src_reg_11_166 src_reg_11_268)
(= src_reg_11_167 src_reg_11_269)
(= src_reg_11_168 src_reg_11_270)
(= src_reg_11_169 src_reg_11_271)
(= src_reg_11_170 src_reg_11_272)
(= src_reg_11_171 src_reg_11_273)
(= src_reg_11_172 src_reg_11_274)
(= src_reg_11_173 src_reg_11_275)
(= src_reg_11_174 src_reg_11_276)
(= src_reg_11_175 src_reg_11_277)
(= src_reg_11_176 src_reg_11_278)
(= dst_reg_11_149 dst_reg_11_251)
(= dst_reg_11_150 dst_reg_11_252)
(= dst_reg_11_151 dst_reg_11_253)
(= dst_reg_11_152 dst_reg_11_254)
(= and4.i.i.i_11_250 dst_reg_11_255)
(= and.i1.i.i_11_247 dst_reg_11_256)
(= dst_reg_11_155 dst_reg_11_257)
(= dst_reg_11_156 dst_reg_11_258)
(= dst_reg_11_157 dst_reg_11_259)
(= dst_reg_11_158 dst_reg_11_260)
(= dst_reg_11_159 dst_reg_11_261)
(= dst_reg_11_160 dst_reg_11_262)
(= dst_reg_11_161 dst_reg_11_263)
(= dst_reg_11_162 dst_reg_11_264)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_11_265)
(= src_reg_11_15 src_reg_11_266)
(= src_reg_11_16 src_reg_11_267)
(= src_reg_11_17 src_reg_11_268)
(= src_reg_11_18 src_reg_11_269)
(= src_reg_11_19 src_reg_11_270)
(= src_reg_11_20 src_reg_11_271)
(= src_reg_11_21 src_reg_11_272)
(= src_reg_11_22 src_reg_11_273)
(= src_reg_11_23 src_reg_11_274)
(= src_reg_11_24 src_reg_11_275)
(= src_reg_11_25 src_reg_11_276)
(= src_reg_11_26 src_reg_11_277)
(= src_reg_11_27 src_reg_11_278)
(= #x00000001 dst_reg_11_251)
(= dst_reg_11_1 dst_reg_11_252)
(= dst_reg_11_2 dst_reg_11_253)
(= dst_reg_11_3 dst_reg_11_254)
(= #x0000000000000000 dst_reg_11_255)
(= #xffffffffffffffff dst_reg_11_256)
(= #x8000000000000000 dst_reg_11_257)
(= #x7fffffffffffffff dst_reg_11_258)
(= #x0000000000000000 dst_reg_11_259)
(= #xffffffffffffffff dst_reg_11_260)
(= #x00000000 dst_reg_11_261)
(= dst_reg_11_11 dst_reg_11_262)
(= dst_reg_11_12 dst_reg_11_263)
(= dst_reg_11_13 dst_reg_11_264)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_11_163 src_reg_11_265)
  (= src_reg_11_164 src_reg_11_266)
  (= src_reg_11_165 src_reg_11_267)
  (= src_reg_11_166 src_reg_11_268)
  (= src_reg_11_167 src_reg_11_269)
  (= src_reg_11_168 src_reg_11_270)
  (= src_reg_11_169 src_reg_11_271)
  (= src_reg_11_170 src_reg_11_272)
  (= src_reg_11_171 src_reg_11_273)
  (= src_reg_11_172 src_reg_11_274)
  (= src_reg_11_173 src_reg_11_275)
  (= src_reg_11_174 src_reg_11_276)
  (= src_reg_11_175 src_reg_11_277)
  (= src_reg_11_176 src_reg_11_278)
  (= dst_reg_11_149 dst_reg_11_251)
  (= dst_reg_11_150 dst_reg_11_252)
  (= dst_reg_11_151 dst_reg_11_253)
  (= dst_reg_11_152 dst_reg_11_254)
  (= and4.i.i.i_11_250 dst_reg_11_255)
  (= and.i1.i.i_11_247 dst_reg_11_256)
  (= dst_reg_11_155 dst_reg_11_257)
  (= dst_reg_11_156 dst_reg_11_258)
  (= dst_reg_11_157 dst_reg_11_259)
  (= dst_reg_11_158 dst_reg_11_260)
  (= dst_reg_11_159 dst_reg_11_261)
  (= dst_reg_11_160 dst_reg_11_262)
  (= dst_reg_11_161 dst_reg_11_263)
  (= dst_reg_11_162 dst_reg_11_264)
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_11_265)
  (= src_reg_11_15 src_reg_11_266)
  (= src_reg_11_16 src_reg_11_267)
  (= src_reg_11_17 src_reg_11_268)
  (= src_reg_11_18 src_reg_11_269)
  (= src_reg_11_19 src_reg_11_270)
  (= src_reg_11_20 src_reg_11_271)
  (= src_reg_11_21 src_reg_11_272)
  (= src_reg_11_22 src_reg_11_273)
  (= src_reg_11_23 src_reg_11_274)
  (= src_reg_11_24 src_reg_11_275)
  (= src_reg_11_25 src_reg_11_276)
  (= src_reg_11_26 src_reg_11_277)
  (= src_reg_11_27 src_reg_11_278)
  (= #x00000001 dst_reg_11_251)
  (= dst_reg_11_1 dst_reg_11_252)
  (= dst_reg_11_2 dst_reg_11_253)
  (= dst_reg_11_3 dst_reg_11_254)
  (= #x0000000000000000 dst_reg_11_255)
  (= #xffffffffffffffff dst_reg_11_256)
  (= #x8000000000000000 dst_reg_11_257)
  (= #x7fffffffffffffff dst_reg_11_258)
  (= #x0000000000000000 dst_reg_11_259)
  (= #xffffffffffffffff dst_reg_11_260)
  (= #x00000000 dst_reg_11_261)
  (= dst_reg_11_11 dst_reg_11_262)
  (= dst_reg_11_12 dst_reg_11_263)
  (= dst_reg_11_13 dst_reg_11_264)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= cond40.i.i_11_148 dst_reg_11_155)
  (= i37.i.i_11_139 dst_reg_11_156)
  (= cond40.i.i_11_148 dst_reg_11_157)
  (= dst_reg_11_107 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= dst_reg_11_104 dst_reg_11_155)
  (= dst_reg_11_105 dst_reg_11_156)
  (= dst_reg_11_106 dst_reg_11_157)
  (= dst_reg_11_107 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_11_265)
  (= src_reg_11_15 src_reg_11_266)
  (= src_reg_11_16 src_reg_11_267)
  (= src_reg_11_17 src_reg_11_268)
  (= src_reg_11_18 src_reg_11_269)
  (= src_reg_11_19 src_reg_11_270)
  (= src_reg_11_20 src_reg_11_271)
  (= src_reg_11_21 src_reg_11_272)
  (= src_reg_11_22 src_reg_11_273)
  (= src_reg_11_23 src_reg_11_274)
  (= src_reg_11_24 src_reg_11_275)
  (= src_reg_11_25 src_reg_11_276)
  (= src_reg_11_26 src_reg_11_277)
  (= src_reg_11_27 src_reg_11_278)
  (= #x00000001 dst_reg_11_251)
  (= dst_reg_11_1 dst_reg_11_252)
  (= dst_reg_11_2 dst_reg_11_253)
  (= dst_reg_11_3 dst_reg_11_254)
  (= #x0000000000000000 dst_reg_11_255)
  (= #xffffffffffffffff dst_reg_11_256)
  (= #x8000000000000000 dst_reg_11_257)
  (= #x7fffffffffffffff dst_reg_11_258)
  (= #x0000000000000000 dst_reg_11_259)
  (= #xffffffffffffffff dst_reg_11_260)
  (= #x00000000 dst_reg_11_261)
  (= dst_reg_11_11 dst_reg_11_262)
  (= dst_reg_11_12 dst_reg_11_263)
  (= dst_reg_11_13 dst_reg_11_264)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= i38.i.i_11_142 dst_reg_11_155)
  (= cond27.i.i_11_144 dst_reg_11_156)
  (= dst_reg_11_106 dst_reg_11_157)
  (= cond27.i.i_11_144 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_11_112 src_reg_11_163)
  (= src_reg_11_113 src_reg_11_164)
  (= src_reg_11_114 src_reg_11_165)
  (= src_reg_11_115 src_reg_11_166)
  (= src_reg_11_116 src_reg_11_167)
  (= src_reg_11_117 src_reg_11_168)
  (= src_reg_11_118 src_reg_11_169)
  (= src_reg_11_119 src_reg_11_170)
  (= src_reg_11_120 src_reg_11_171)
  (= src_reg_11_121 src_reg_11_172)
  (= src_reg_11_122 src_reg_11_173)
  (= src_reg_11_123 src_reg_11_174)
  (= src_reg_11_124 src_reg_11_175)
  (= src_reg_11_125 src_reg_11_176)
  (= dst_reg_11_98 dst_reg_11_149)
  (= dst_reg_11_99 dst_reg_11_150)
  (= dst_reg_11_100 dst_reg_11_151)
  (= dst_reg_11_101 dst_reg_11_152)
  (= dst_reg_11_102 dst_reg_11_153)
  (= dst_reg_11_103 dst_reg_11_154)
  (= cond.i327.i_11_134 dst_reg_11_155)
  (= cond12.i.i_11_138 dst_reg_11_156)
  (= cond.i327.i_11_134 dst_reg_11_157)
  (= cond12.i.i_11_138 dst_reg_11_158)
  (= dst_reg_11_108 dst_reg_11_159)
  (= dst_reg_11_109 dst_reg_11_160)
  (= dst_reg_11_110 dst_reg_11_161)
  (= dst_reg_11_111 dst_reg_11_162)
<if.then290.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= #x0000000000000000 dst_reg_11_102)
  (= #xffffffffffffffff dst_reg_11_103)
  (= #x8000000000000000 dst_reg_11_104)
  (= #x7fffffffffffffff dst_reg_11_105)
  (= #x0000000000000000 dst_reg_11_106)
  (= #xffffffffffffffff dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
<if.end291.i, if.end309.i> :
  (= #x00000001 src_reg_11_112)
  (= src_reg_11_15 src_reg_11_113)
  (= src_reg_11_16 src_reg_11_114)
  (= src_reg_11_17 src_reg_11_115)
  (= src_reg_11_18 src_reg_11_116)
  (= src_reg_11_19 src_reg_11_117)
  (= src_reg_11_20 src_reg_11_118)
  (= src_reg_11_21 src_reg_11_119)
  (= src_reg_11_22 src_reg_11_120)
  (= src_reg_11_23 src_reg_11_121)
  (= src_reg_11_24 src_reg_11_122)
  (= src_reg_11_25 src_reg_11_123)
  (= src_reg_11_26 src_reg_11_124)
  (= src_reg_11_27 src_reg_11_125)
  (= #x00000001 dst_reg_11_98)
  (= dst_reg_11_1 dst_reg_11_99)
  (= dst_reg_11_2 dst_reg_11_100)
  (= dst_reg_11_3 dst_reg_11_101)
  (= shr.i261.i_11_83 dst_reg_11_102)
  (= shr5.i262.i_11_84 dst_reg_11_103)
  (= cond.i274.i_11_91 dst_reg_11_104)
  (= cond14.i280.i_11_96 dst_reg_11_105)
  (= shr.i261.i_11_83 dst_reg_11_106)
  (= or29.i287.i_11_97 dst_reg_11_107)
  (= dst_reg_11_10 dst_reg_11_108)
  (= dst_reg_11_11 dst_reg_11_109)
  (= dst_reg_11_12 dst_reg_11_110)
  (= dst_reg_11_13 dst_reg_11_111)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_11_36
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_11_36 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_11_36 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_11_36 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_11_46
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
if.then26.i
  (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
if.then26.i
  (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_11_50
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb287.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_11_36
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.bb287.i>: (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i>: (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.bb287.i: (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] if.then41.i: (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
sw.bb287.i
=========================
-------------------
  %cmp288.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
-------------------
-------------------
  br i1 %cmp288.not.i, label %if.end291.i, label %if.then290.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp288.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp288.not.i_11_68
[handleBranchInst] Edge Assertions:
<sw.bb287.i, if.end291.i>: (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i>: (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end291.i: (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] if.then290.i: (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.then290.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i254.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i254.i.repack, align 8
-------------------
-------------------
  %var_off.i254.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i254.i.repack2, align 8
-------------------
-------------------
  %smin_value.i.i256.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i256.i, align 8
-------------------
-------------------
  %smax_value.i.i257.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i257.i, align 8
-------------------
-------------------
  %umin_value.i.i258.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i258.i, align 8
-------------------
-------------------
  %umax_value.i.i259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i259.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] if.end309.i: (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] <if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.end291.i
=========================
-------------------
  %smin_value292.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i271.i = load i64, i64* %smin_value292.i, align 8
-------------------
-------------------
  %shr293.i = ashr i64 %i271.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  store i64 %shr293.i, i64* %smin_value292.i, align 8
-------------------
-------------------
  %smax_value294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i272.i = load i64, i64* %smax_value294.i, align 8
-------------------
-------------------
  %shr295.i = ashr i64 %i272.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  store i64 %shr295.i, i64* %smax_value294.i, align 8
-------------------
-------------------
  %i273.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %sh_prom.i260.i = and i64 %src_reg1.sroa.17.0.copyload, 255
-------------------
-------------------
  %shr.i261.i = ashr i64 %i273.i, %sh_prom.i260.i
-------------------
-------------------
  %shr5.i262.i = ashr i64 %i215.i, %sh_prom.i260.i
-------------------
-------------------
  store i64 %shr.i261.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %shr5.i262.i, i64* %i214.i, align 8
-------------------
-------------------
  %umin_value301.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value301.i, align 8
-------------------
-------------------
  %umax_value302.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value302.i, align 8
-------------------
-------------------
  %and.i271.i = and i64 %shr5.i262.i, -9223372036854775808
-------------------
-------------------
  %or.i272.i = or i64 %shr.i261.i, %and.i271.i
-------------------
-------------------
  %cmp.i273.i = icmp sgt i64 %shr293.i, %or.i272.i
-------------------
-------------------
  %cond.i274.i = select i1 %cmp.i273.i, i64 %shr293.i, i64 %or.i272.i
-------------------
-------------------
  store i64 %cond.i274.i, i64* %smin_value292.i, align 8
-------------------
-------------------
  %and7.i277.i = and i64 %shr5.i262.i, 9223372036854775807
-------------------
-------------------
  %or8.i278.i = or i64 %shr.i261.i, %and7.i277.i
-------------------
-------------------
  %cmp10.i279.i = icmp slt i64 %shr295.i, %or8.i278.i
-------------------
-------------------
  %cond14.i280.i = select i1 %cmp10.i279.i, i64 %shr295.i, i64 %or8.i278.i
-------------------
-------------------
  store i64 %cond14.i280.i, i64* %smax_value294.i, align 8
-------------------
-------------------
  store i64 %shr.i261.i, i64* %umin_value301.i, align 8
-------------------
-------------------
  %or29.i287.i = or i64 %shr.i261.i, %shr5.i262.i
-------------------
-------------------
  store i64 %or29.i287.i, i64* %umax_value302.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] if.end309.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
[handleBranchInst] <if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.end309.i
=========================
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_11_128
[handleBranchInst] Edge Assertions:
<if.end309.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_11_131
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
[handleBranchInst] if.end.i.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_11_141
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] if.else.i331.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp16.i.i_11_141 #b1)
           (= cmp1.i325.i_11_131 #b0)
           (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp16.i.i_11_141 #b1)
           (= cmp1.i325.i_11_131 #b0)
           (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp16.i.i_11_141 #b1)
           (= cmp1.i325.i_11_131 #b0)
           (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_11_146
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_11_146 #b0)
                (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_11_146 #b0)
                (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_11_146 #b0)
                (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_11_181
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
               (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1)
                    (and (= tobool.not.i.i_11_36 #b1) a!1))
               (and (= cmp288.not.i_11_68 #b0)
                    (and (= tobool.not.i.i_11_36 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
      (and (= cmp.i.i.i.i_11_181 #b1) a!5)
      (and (= tobool.not.i.i_11_36 #b0) a!1)
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
               (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1)
                    (and (= tobool.not.i.i_11_36 #b1) a!1))
               (and (= cmp288.not.i_11_68 #b0)
                    (and (= tobool.not.i.i_11_36 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
      (and (= cmp.i.i.i.i_11_181 #b1) a!5)
      (and (= tobool.not.i.i_11_36 #b0) a!1)
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.bb287.i
=========================
=========================
if.then290.i
=========================
=========================
if.end291.i
=========================
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= cmp288.not.i_11_68 #b1)
                (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_112)
           (= src_reg_11_15 src_reg_11_113)
           (= src_reg_11_16 src_reg_11_114)
           (= src_reg_11_17 src_reg_11_115)
           (= src_reg_11_18 src_reg_11_116)
           (= src_reg_11_19 src_reg_11_117)
           (= src_reg_11_20 src_reg_11_118)
           (= src_reg_11_21 src_reg_11_119)
           (= src_reg_11_22 src_reg_11_120)
           (= src_reg_11_23 src_reg_11_121)
           (= src_reg_11_24 src_reg_11_122)
           (= src_reg_11_25 src_reg_11_123)
           (= src_reg_11_26 src_reg_11_124)
           (= src_reg_11_27 src_reg_11_125)
           (= #x00000001 dst_reg_11_98)
           (= dst_reg_11_1 dst_reg_11_99)
           (= dst_reg_11_2 dst_reg_11_100)
           (= dst_reg_11_3 dst_reg_11_101)
           (= shr.i261.i_11_83 dst_reg_11_102)
           (= shr5.i262.i_11_84 dst_reg_11_103)
           (= cond.i274.i_11_91 dst_reg_11_104)
           (= cond14.i280.i_11_96 dst_reg_11_105)
           (= shr.i261.i_11_83 dst_reg_11_106)
           (= or29.i287.i_11_97 dst_reg_11_107)
           (= dst_reg_11_10 dst_reg_11_108)
           (= dst_reg_11_11 dst_reg_11_109)
           (= dst_reg_11_12 dst_reg_11_110)
           (= dst_reg_11_13 dst_reg_11_111))))
phiResolveI (i=1) (let ((a!1 (and (= cmp288.not.i_11_68 #b0)
                (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_112)
           (= src_reg_11_15 src_reg_11_113)
           (= src_reg_11_16 src_reg_11_114)
           (= src_reg_11_17 src_reg_11_115)
           (= src_reg_11_18 src_reg_11_116)
           (= src_reg_11_19 src_reg_11_117)
           (= src_reg_11_20 src_reg_11_118)
           (= src_reg_11_21 src_reg_11_119)
           (= src_reg_11_22 src_reg_11_120)
           (= src_reg_11_23 src_reg_11_121)
           (= src_reg_11_24 src_reg_11_122)
           (= src_reg_11_25 src_reg_11_123)
           (= src_reg_11_26 src_reg_11_124)
           (= src_reg_11_27 src_reg_11_125)
           (= #x00000001 dst_reg_11_98)
           (= dst_reg_11_1 dst_reg_11_99)
           (= dst_reg_11_2 dst_reg_11_100)
           (= dst_reg_11_3 dst_reg_11_101)
           (= #x0000000000000000 dst_reg_11_102)
           (= #xffffffffffffffff dst_reg_11_103)
           (= #x8000000000000000 dst_reg_11_104)
           (= #x7fffffffffffffff dst_reg_11_105)
           (= #x0000000000000000 dst_reg_11_106)
           (= #xffffffffffffffff dst_reg_11_107)
           (= dst_reg_11_10 dst_reg_11_108)
           (= dst_reg_11_11 dst_reg_11_109)
           (= dst_reg_11_12 dst_reg_11_110)
           (= dst_reg_11_13 dst_reg_11_111))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (=> (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
          (and (= cmp.i323.i_11_128 #b1) a!2))
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= cond.i327.i_11_134 dst_reg_11_155)
           (= cond12.i.i_11_138 dst_reg_11_156)
           (= cond.i327.i_11_134 dst_reg_11_157)
           (= cond12.i.i_11_138 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp16.i.i_11_141 #b1)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= i38.i.i_11_142 dst_reg_11_155)
           (= cond27.i.i_11_144 dst_reg_11_156)
           (= dst_reg_11_106 dst_reg_11_157)
           (= cond27.i.i_11_144 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_11_146 #b0)
                (= cmp16.i.i_11_141 #b0)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= dst_reg_11_104 dst_reg_11_155)
           (= dst_reg_11_105 dst_reg_11_156)
           (= dst_reg_11_106 dst_reg_11_157)
           (= dst_reg_11_107 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
phiResolveI (i=3) (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_11_146 #b1)
                (= cmp16.i.i_11_141 #b0)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= cond40.i.i_11_148 dst_reg_11_155)
           (= i37.i.i_11_139 dst_reg_11_156)
           (= cond40.i.i_11_148 dst_reg_11_157)
           (= dst_reg_11_107 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
     (and (= cmp.i.i.i.i_11_181 #b0) a!5))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
     (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
  (= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))
  (= notmask.i.i.i_11_236 (bvshl #xffffffffffffffff sh_prom.i.i.i_11_234))
  (= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 #xffffffffffffffff))
  (= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.0.0.i.i.i_11_241 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.3.0.i.i.i_11_243 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))
  (= dst_reg_11_102 i9.i.i_11_244)
  (= dst_reg_11_103 i11.i.i_11_245)
  (= or.i.i.i_11_246 (bvor retval.sroa.0.0.i.i.i_11_241 i9.i.i_11_244))
  (= and.i1.i.i_11_247 (bvand retval.sroa.3.0.i.i.i_11_243 i11.i.i_11_245))
  (= neg.i.i.i_11_249 (bvxor and.i1.i.i_11_247 #xffffffffffffffff))
  (= and4.i.i.i_11_250 (bvand or.i.i.i_11_246 neg.i.i.i_11_249))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
     (and (= cmp.i.i.i.i_11_181 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
     (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
        (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
    (and (= #x00000001 src_reg_11_265)
         (= src_reg_11_15 src_reg_11_266)
         (= src_reg_11_16 src_reg_11_267)
         (= src_reg_11_17 src_reg_11_268)
         (= src_reg_11_18 src_reg_11_269)
         (= src_reg_11_19 src_reg_11_270)
         (= src_reg_11_20 src_reg_11_271)
         (= src_reg_11_21 src_reg_11_272)
         (= src_reg_11_22 src_reg_11_273)
         (= src_reg_11_23 src_reg_11_274)
         (= src_reg_11_24 src_reg_11_275)
         (= src_reg_11_25 src_reg_11_276)
         (= src_reg_11_26 src_reg_11_277)
         (= src_reg_11_27 src_reg_11_278)
         (= #x00000001 dst_reg_11_251)
         (= dst_reg_11_1 dst_reg_11_252)
         (= dst_reg_11_2 dst_reg_11_253)
         (= dst_reg_11_3 dst_reg_11_254)
         (= #x0000000000000000 dst_reg_11_255)
         (= #xffffffffffffffff dst_reg_11_256)
         (= #x8000000000000000 dst_reg_11_257)
         (= #x7fffffffffffffff dst_reg_11_258)
         (= #x0000000000000000 dst_reg_11_259)
         (= #xffffffffffffffff dst_reg_11_260)
         (= #x00000000 dst_reg_11_261)
         (= dst_reg_11_11 dst_reg_11_262)
         (= dst_reg_11_12 dst_reg_11_263)
         (= dst_reg_11_13 dst_reg_11_264)))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
          (and (= cmp.i.i.i.i_11_181 #b1) a!5))
      (and (= src_reg_11_163 src_reg_11_265)
           (= src_reg_11_164 src_reg_11_266)
           (= src_reg_11_165 src_reg_11_267)
           (= src_reg_11_166 src_reg_11_268)
           (= src_reg_11_167 src_reg_11_269)
           (= src_reg_11_168 src_reg_11_270)
           (= src_reg_11_169 src_reg_11_271)
           (= src_reg_11_170 src_reg_11_272)
           (= src_reg_11_171 src_reg_11_273)
           (= src_reg_11_172 src_reg_11_274)
           (= src_reg_11_173 src_reg_11_275)
           (= src_reg_11_174 src_reg_11_276)
           (= src_reg_11_175 src_reg_11_277)
           (= src_reg_11_176 src_reg_11_278)
           (= dst_reg_11_149 dst_reg_11_251)
           (= dst_reg_11_150 dst_reg_11_252)
           (= dst_reg_11_151 dst_reg_11_253)
           (= dst_reg_11_152 dst_reg_11_254)
           (= and4.i.i.i_11_250 dst_reg_11_255)
           (= and.i1.i.i_11_247 dst_reg_11_256)
           (= dst_reg_11_155 dst_reg_11_257)
           (= dst_reg_11_156 dst_reg_11_258)
           (= dst_reg_11_157 dst_reg_11_259)
           (= dst_reg_11_158 dst_reg_11_260)
           (= dst_reg_11_159 dst_reg_11_261)
           (= dst_reg_11_160 dst_reg_11_262)
           (= dst_reg_11_161 dst_reg_11_263)
           (= dst_reg_11_162 dst_reg_11_264)))))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_265)
           (= src_reg_11_15 src_reg_11_266)
           (= src_reg_11_16 src_reg_11_267)
           (= src_reg_11_17 src_reg_11_268)
           (= src_reg_11_18 src_reg_11_269)
           (= src_reg_11_19 src_reg_11_270)
           (= src_reg_11_20 src_reg_11_271)
           (= src_reg_11_21 src_reg_11_272)
           (= src_reg_11_22 src_reg_11_273)
           (= src_reg_11_23 src_reg_11_274)
           (= src_reg_11_24 src_reg_11_275)
           (= src_reg_11_25 src_reg_11_276)
           (= src_reg_11_26 src_reg_11_277)
           (= src_reg_11_27 src_reg_11_278)
           (= #x00000001 dst_reg_11_251)
           (= dst_reg_11_1 dst_reg_11_252)
           (= dst_reg_11_2 dst_reg_11_253)
           (= dst_reg_11_3 dst_reg_11_254)
           (= #x0000000000000000 dst_reg_11_255)
           (= #xffffffffffffffff dst_reg_11_256)
           (= #x8000000000000000 dst_reg_11_257)
           (= #x7fffffffffffffff dst_reg_11_258)
           (= #x0000000000000000 dst_reg_11_259)
           (= #xffffffffffffffff dst_reg_11_260)
           (= #x00000000 dst_reg_11_261)
           (= dst_reg_11_11 dst_reg_11_262)
           (= dst_reg_11_12 dst_reg_11_263)
           (= dst_reg_11_13 dst_reg_11_264))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
=========================
sw.bb287.i
=========================
=========================
if.then290.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i254.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i254.i.repack2, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i256.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i257.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i258.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i259.i, align 8
-------------------
=========================
if.end291.i
=========================
-------------------
  store i64 %shr293.i, i64* %smin_value292.i, align 8
-------------------
-------------------
  store i64 %shr295.i, i64* %smax_value294.i, align 8
-------------------
-------------------
  store i64 %shr.i261.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %shr5.i262.i, i64* %i214.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value301.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value302.i, align 8
-------------------
-------------------
  store i64 %cond.i274.i, i64* %smin_value292.i, align 8
-------------------
-------------------
  store i64 %cond14.i280.i, i64* %smax_value294.i, align 8
-------------------
-------------------
  store i64 %shr.i261.i, i64* %umin_value301.i, align 8
-------------------
-------------------
  store i64 %or29.i287.i, i64* %umax_value302.i, align 8
-------------------
=========================
if.end309.i
=========================
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,47},{if.then41.i,18})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
49 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,47},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
- dst_reg: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
}
47 = MemoryDef(46) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ and.i1.i.i_11_247 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
46 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
}
45 = MemoryDef(44) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45}) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 49 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,47},{if.then41.i,18})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_279
[lookInsideStruct] singleValueType:dst_reg_11_279
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_280
[lookInsideStruct] singleValueType:dst_reg_11_280
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_281
[lookInsideStruct] singleValueType:dst_reg_11_281
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_282
[lookInsideStruct] singleValueType:dst_reg_11_282
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_283
[lookInsideStruct] singleValueType:dst_reg_11_283
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_284
[lookInsideStruct] singleValueType:dst_reg_11_284
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_285
[lookInsideStruct] singleValueType:dst_reg_11_285
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_286
[lookInsideStruct] singleValueType:dst_reg_11_286
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_287
[lookInsideStruct] singleValueType:dst_reg_11_287
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_288
[lookInsideStruct] singleValueType:dst_reg_11_288
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_289
[lookInsideStruct] singleValueType:dst_reg_11_289
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_290
[lookInsideStruct] singleValueType:dst_reg_11_290
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_291
[lookInsideStruct] singleValueType:dst_reg_11_291
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_11_292
[lookInsideStruct] singleValueType:dst_reg_11_292
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_11_279 ] [ ] [ dst_reg_11_280 ] [ dst_reg_11_281 ] [ dst_reg_11_282 ] [ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] [ dst_reg_11_285 ] [ dst_reg_11_286 ] [ dst_reg_11_287 ] [ dst_reg_11_288 ] [ ] [ dst_reg_11_289 ] [ dst_reg_11_290 ] [ dst_reg_11_291 ] [ dst_reg_11_292 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_11_251 dst_reg_11_279)
(= dst_reg_11_252 dst_reg_11_280)
(= dst_reg_11_253 dst_reg_11_281)
(= dst_reg_11_254 dst_reg_11_282)
(= dst_reg_11_255 dst_reg_11_283)
(= dst_reg_11_256 dst_reg_11_284)
(= dst_reg_11_257 dst_reg_11_285)
(= dst_reg_11_258 dst_reg_11_286)
(= dst_reg_11_259 dst_reg_11_287)
(= dst_reg_11_260 dst_reg_11_288)
(= dst_reg_11_261 dst_reg_11_289)
(= dst_reg_11_262 dst_reg_11_290)
(= dst_reg_11_263 dst_reg_11_291)
(= dst_reg_11_264 dst_reg_11_292)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_293
[lookInsideStruct] singleValueType:src_reg_11_293
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_294
[lookInsideStruct] singleValueType:src_reg_11_294
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_295
[lookInsideStruct] singleValueType:src_reg_11_295
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_296
[lookInsideStruct] singleValueType:src_reg_11_296
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_297
[lookInsideStruct] singleValueType:src_reg_11_297
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_298
[lookInsideStruct] singleValueType:src_reg_11_298
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_299
[lookInsideStruct] singleValueType:src_reg_11_299
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_300
[lookInsideStruct] singleValueType:src_reg_11_300
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_301
[lookInsideStruct] singleValueType:src_reg_11_301
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_302
[lookInsideStruct] singleValueType:src_reg_11_302
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_303
[lookInsideStruct] singleValueType:src_reg_11_303
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_304
[lookInsideStruct] singleValueType:src_reg_11_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_305
[lookInsideStruct] singleValueType:src_reg_11_305
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_11_306
[lookInsideStruct] singleValueType:src_reg_11_306
[setupBVTreeForArg] returning BVTree: [ [ src_reg_11_293 ] [ ] [ src_reg_11_294 ] [ src_reg_11_295 ] [ src_reg_11_296 ] [ [ src_reg_11_297 ] [ src_reg_11_298 ] ] [ src_reg_11_299 ] [ src_reg_11_300 ] [ src_reg_11_301 ] [ src_reg_11_302 ] [ ] [ src_reg_11_303 ] [ src_reg_11_304 ] [ src_reg_11_305 ] [ src_reg_11_306 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_11_265 src_reg_11_293)
(= src_reg_11_266 src_reg_11_294)
(= src_reg_11_267 src_reg_11_295)
(= src_reg_11_268 src_reg_11_296)
(= src_reg_11_269 src_reg_11_297)
(= src_reg_11_270 src_reg_11_298)
(= src_reg_11_271 src_reg_11_299)
(= src_reg_11_272 src_reg_11_300)
(= src_reg_11_273 src_reg_11_301)
(= src_reg_11_274 src_reg_11_302)
(= src_reg_11_275 src_reg_11_303)
(= src_reg_11_276 src_reg_11_304)
(= src_reg_11_277 src_reg_11_305)
(= src_reg_11_278 src_reg_11_306)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_11_293 ] [ ] [ src_reg_11_294 ] [ src_reg_11_295 ] [ src_reg_11_296 ] [ [ src_reg_11_297 ] [ src_reg_11_298 ] ] [ src_reg_11_299 ] [ src_reg_11_300 ] [ src_reg_11_301 ] [ src_reg_11_302 ] [ ] [ src_reg_11_303 ] [ src_reg_11_304 ] [ src_reg_11_305 ] [ src_reg_11_306 ] ] 
- dst_reg: [ [ dst_reg_11_279 ] [ ] [ dst_reg_11_280 ] [ dst_reg_11_281 ] [ dst_reg_11_282 ] [ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] [ dst_reg_11_285 ] [ dst_reg_11_286 ] [ dst_reg_11_287 ] [ dst_reg_11_288 ] [ ] [ dst_reg_11_289 ] [ dst_reg_11_290 ] [ dst_reg_11_291 ] [ dst_reg_11_292 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
        (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
    (and (= #x00000001 src_reg_11_265)
         (= src_reg_11_15 src_reg_11_266)
         (= src_reg_11_16 src_reg_11_267)
         (= src_reg_11_17 src_reg_11_268)
         (= src_reg_11_18 src_reg_11_269)
         (= src_reg_11_19 src_reg_11_270)
         (= src_reg_11_20 src_reg_11_271)
         (= src_reg_11_21 src_reg_11_272)
         (= src_reg_11_22 src_reg_11_273)
         (= src_reg_11_23 src_reg_11_274)
         (= src_reg_11_24 src_reg_11_275)
         (= src_reg_11_25 src_reg_11_276)
         (= src_reg_11_26 src_reg_11_277)
         (= src_reg_11_27 src_reg_11_278)
         (= #x00000001 dst_reg_11_251)
         (= dst_reg_11_1 dst_reg_11_252)
         (= dst_reg_11_2 dst_reg_11_253)
         (= dst_reg_11_3 dst_reg_11_254)
         (= #x0000000000000000 dst_reg_11_255)
         (= #xffffffffffffffff dst_reg_11_256)
         (= #x8000000000000000 dst_reg_11_257)
         (= #x7fffffffffffffff dst_reg_11_258)
         (= #x0000000000000000 dst_reg_11_259)
         (= #xffffffffffffffff dst_reg_11_260)
         (= #x00000000 dst_reg_11_261)
         (= dst_reg_11_11 dst_reg_11_262)
         (= dst_reg_11_12 dst_reg_11_263)
         (= dst_reg_11_13 dst_reg_11_264)))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
          (and (= cmp.i.i.i.i_11_181 #b1) a!5))
      (and (= src_reg_11_163 src_reg_11_265)
           (= src_reg_11_164 src_reg_11_266)
           (= src_reg_11_165 src_reg_11_267)
           (= src_reg_11_166 src_reg_11_268)
           (= src_reg_11_167 src_reg_11_269)
           (= src_reg_11_168 src_reg_11_270)
           (= src_reg_11_169 src_reg_11_271)
           (= src_reg_11_170 src_reg_11_272)
           (= src_reg_11_171 src_reg_11_273)
           (= src_reg_11_172 src_reg_11_274)
           (= src_reg_11_173 src_reg_11_275)
           (= src_reg_11_174 src_reg_11_276)
           (= src_reg_11_175 src_reg_11_277)
           (= src_reg_11_176 src_reg_11_278)
           (= dst_reg_11_149 dst_reg_11_251)
           (= dst_reg_11_150 dst_reg_11_252)
           (= dst_reg_11_151 dst_reg_11_253)
           (= dst_reg_11_152 dst_reg_11_254)
           (= and4.i.i.i_11_250 dst_reg_11_255)
           (= and.i1.i.i_11_247 dst_reg_11_256)
           (= dst_reg_11_155 dst_reg_11_257)
           (= dst_reg_11_156 dst_reg_11_258)
           (= dst_reg_11_157 dst_reg_11_259)
           (= dst_reg_11_158 dst_reg_11_260)
           (= dst_reg_11_159 dst_reg_11_261)
           (= dst_reg_11_160 dst_reg_11_262)
           (= dst_reg_11_161 dst_reg_11_263)
           (= dst_reg_11_162 dst_reg_11_264)))))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_265)
           (= src_reg_11_15 src_reg_11_266)
           (= src_reg_11_16 src_reg_11_267)
           (= src_reg_11_17 src_reg_11_268)
           (= src_reg_11_18 src_reg_11_269)
           (= src_reg_11_19 src_reg_11_270)
           (= src_reg_11_20 src_reg_11_271)
           (= src_reg_11_21 src_reg_11_272)
           (= src_reg_11_22 src_reg_11_273)
           (= src_reg_11_23 src_reg_11_274)
           (= src_reg_11_24 src_reg_11_275)
           (= src_reg_11_25 src_reg_11_276)
           (= src_reg_11_26 src_reg_11_277)
           (= src_reg_11_27 src_reg_11_278)
           (= #x00000001 dst_reg_11_251)
           (= dst_reg_11_1 dst_reg_11_252)
           (= dst_reg_11_2 dst_reg_11_253)
           (= dst_reg_11_3 dst_reg_11_254)
           (= #x0000000000000000 dst_reg_11_255)
           (= #xffffffffffffffff dst_reg_11_256)
           (= #x8000000000000000 dst_reg_11_257)
           (= #x7fffffffffffffff dst_reg_11_258)
           (= #x0000000000000000 dst_reg_11_259)
           (= #xffffffffffffffff dst_reg_11_260)
           (= #x00000000 dst_reg_11_261)
           (= dst_reg_11_11 dst_reg_11_262)
           (= dst_reg_11_12 dst_reg_11_263)
           (= dst_reg_11_13 dst_reg_11_264))))
  (= dst_reg_11_251 dst_reg_11_279)
  (= dst_reg_11_252 dst_reg_11_280)
  (= dst_reg_11_253 dst_reg_11_281)
  (= dst_reg_11_254 dst_reg_11_282)
  (= dst_reg_11_255 dst_reg_11_283)
  (= dst_reg_11_256 dst_reg_11_284)
  (= dst_reg_11_257 dst_reg_11_285)
  (= dst_reg_11_258 dst_reg_11_286)
  (= dst_reg_11_259 dst_reg_11_287)
  (= dst_reg_11_260 dst_reg_11_288)
  (= dst_reg_11_261 dst_reg_11_289)
  (= dst_reg_11_262 dst_reg_11_290)
  (= dst_reg_11_263 dst_reg_11_291)
  (= dst_reg_11_264 dst_reg_11_292)
  (= src_reg_11_265 src_reg_11_293)
  (= src_reg_11_266 src_reg_11_294)
  (= src_reg_11_267 src_reg_11_295)
  (= src_reg_11_268 src_reg_11_296)
  (= src_reg_11_269 src_reg_11_297)
  (= src_reg_11_270 src_reg_11_298)
  (= src_reg_11_271 src_reg_11_299)
  (= src_reg_11_272 src_reg_11_300)
  (= src_reg_11_273 src_reg_11_301)
  (= src_reg_11_274 src_reg_11_302)
  (= src_reg_11_275 src_reg_11_303)
  (= src_reg_11_276 src_reg_11_304)
  (= src_reg_11_277 src_reg_11_305)
  (= src_reg_11_278 src_reg_11_306)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:17
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
    (= retval.0.i.i.i.i_11_230 phi.bo_11_227))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
    (= retval.0.i.i.i.i_11_230 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_11_230 #x0000003f)
     (= cmp.i.i.i_11_233 #b1)
     (= cmp.i.i.i_11_233 #b0))
  (= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))
  (= notmask.i.i.i_11_236 (bvshl #xffffffffffffffff sh_prom.i.i.i_11_234))
  (= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 #xffffffffffffffff))
  (= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.0.0.i.i.i_11_241 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))
  (ite (= cmp.i.i.i_11_233 #b1)
     (= retval.sroa.3.0.i.i.i_11_243 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))
  (= dst_reg_11_102 i9.i.i_11_244)
  (= dst_reg_11_103 i11.i.i_11_245)
  (= or.i.i.i_11_246 (bvor retval.sroa.0.0.i.i.i_11_241 i9.i.i_11_244))
  (= and.i1.i.i_11_247 (bvand retval.sroa.3.0.i.i.i_11_243 i11.i.i_11_245))
  (= neg.i.i.i_11_249 (bvxor and.i1.i.i_11_247 #xffffffffffffffff))
  (= and4.i.i.i_11_250 (bvand or.i.i.i_11_246 neg.i.i.i_11_249))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_11_228
     (and (= cmp.i.i.i.i_11_181 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229
     (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_11_157 i.i333.i_11_177)
  (= dst_reg_11_158 i5.i.i_11_178)
  (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))
  (ite (= xor.i.i.i_11_179 #x0000000000000000)
     (= cmp.i.i.i.i_11_181 #b1)
     (= cmp.i.i.i.i_11_181 #b0))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (=> (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
          (and (= cmp.i323.i_11_128 #b1) a!2))
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= cond.i327.i_11_134 dst_reg_11_155)
           (= cond12.i.i_11_138 dst_reg_11_156)
           (= cond.i327.i_11_134 dst_reg_11_157)
           (= cond12.i.i_11_138 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp16.i.i_11_141 #b1)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= i38.i.i_11_142 dst_reg_11_155)
           (= cond27.i.i_11_144 dst_reg_11_156)
           (= dst_reg_11_106 dst_reg_11_157)
           (= cond27.i.i_11_144 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_11_146 #b0)
                (= cmp16.i.i_11_141 #b0)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= dst_reg_11_104 dst_reg_11_155)
           (= dst_reg_11_105 dst_reg_11_156)
           (= dst_reg_11_106 dst_reg_11_157)
           (= dst_reg_11_107 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_11_146 #b1)
                (= cmp16.i.i_11_141 #b0)
                (= cmp1.i325.i_11_131 #b0)
                (= cmp.i323.i_11_128 #b0)
                (or (and (= cmp288.not.i_11_68 #b1) a!1)
                    (and (= cmp288.not.i_11_68 #b0) a!1)))))
  (=> a!2
      (and (= src_reg_11_112 src_reg_11_163)
           (= src_reg_11_113 src_reg_11_164)
           (= src_reg_11_114 src_reg_11_165)
           (= src_reg_11_115 src_reg_11_166)
           (= src_reg_11_116 src_reg_11_167)
           (= src_reg_11_117 src_reg_11_168)
           (= src_reg_11_118 src_reg_11_169)
           (= src_reg_11_119 src_reg_11_170)
           (= src_reg_11_120 src_reg_11_171)
           (= src_reg_11_121 src_reg_11_172)
           (= src_reg_11_122 src_reg_11_173)
           (= src_reg_11_123 src_reg_11_174)
           (= src_reg_11_124 src_reg_11_175)
           (= src_reg_11_125 src_reg_11_176)
           (= dst_reg_11_98 dst_reg_11_149)
           (= dst_reg_11_99 dst_reg_11_150)
           (= dst_reg_11_100 dst_reg_11_151)
           (= dst_reg_11_101 dst_reg_11_152)
           (= dst_reg_11_102 dst_reg_11_153)
           (= dst_reg_11_103 dst_reg_11_154)
           (= cond40.i.i_11_148 dst_reg_11_155)
           (= i37.i.i_11_139 dst_reg_11_156)
           (= cond40.i.i_11_148 dst_reg_11_157)
           (= dst_reg_11_107 dst_reg_11_158)
           (= dst_reg_11_108 dst_reg_11_159)
           (= dst_reg_11_109 dst_reg_11_160)
           (= dst_reg_11_110 dst_reg_11_161)
           (= dst_reg_11_111 dst_reg_11_162)))))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_11_126 i38.i.i_11_142)
     (= cmp36.i.i_11_147 #b1)
     (= cmp36.i.i_11_147 #b0))
  (ite (= cmp36.i.i_11_147 #b1)
     (= cond40.i.i_11_148 i.i322.i_11_126)
     (= cond40.i.i_11_148 i38.i.i_11_142))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_11_142 #x0000000000000000)
     (= cmp31.i330.i_11_146 #b1)
     (= cmp31.i330.i_11_146 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_11_0 dst_reg_11_0)
  (= dst_reg_11_1 dst_reg_11_1)
  (= dst_reg_11_2 dst_reg_11_2)
  (= dst_reg_11_3 dst_reg_11_3)
  (= dst_reg_11_4 dst_reg_11_4)
  (= dst_reg_11_5 dst_reg_11_5)
  (= dst_reg_11_6 dst_reg_11_6)
  (= dst_reg_11_7 dst_reg_11_7)
  (= dst_reg_11_8 dst_reg_11_8)
  (= dst_reg_11_9 dst_reg_11_9)
  (= dst_reg_11_10 dst_reg_11_10)
  (= dst_reg_11_11 dst_reg_11_11)
  (= dst_reg_11_12 dst_reg_11_12)
  (= dst_reg_11_13 dst_reg_11_13)
  (= src_reg_11_14 src_reg_11_14)
  (= src_reg_11_15 src_reg_11_15)
  (= src_reg_11_16 src_reg_11_16)
  (= src_reg_11_17 src_reg_11_17)
  (= src_reg_11_18 src_reg_11_18)
  (= src_reg_11_19 src_reg_11_19)
  (= src_reg_11_20 src_reg_11_20)
  (= src_reg_11_21 src_reg_11_21)
  (= src_reg_11_22 src_reg_11_22)
  (= src_reg_11_23 src_reg_11_23)
  (= src_reg_11_24 src_reg_11_24)
  (= src_reg_11_25 src_reg_11_25)
  (= src_reg_11_26 src_reg_11_26)
  (= src_reg_11_27 src_reg_11_27)
  (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)
  (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)
  (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)
  (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)
  (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)
  (ite (= src_reg1.sroa.10.0.copyload_11_34 #x0000000000000000)
     (= tobool.not.i.i_11_36 #b1)
     (= tobool.not.i.i_11_36 #b0))
  (= dst_reg_11_5 i215.i_11_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_11_179 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= tobool.not.i.i.i.i.i_11_183 #b0))
  (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185)
     (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))
  (ite (= tobool.not.i.i.i.i.i_11_183 #b1)
     (= spec.select17.i.i.i.i.i_11_189 #x0000001f)
     (= spec.select17.i.i.i.i.i_11_189 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_11_186 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= tobool2.not.i.i.i.i.i_11_191 #b0))
  (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 #xfffffff0))
  (= shl5.i.i.i.i.i_11_195
   (bvshl spec.select.i.i.i.i.i_11_186 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195)
     (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))
  (ite (= tobool2.not.i.i.i.i.i_11_191 #b1)
     (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193)
     (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))
  (ite (bvult word.addr.1.i.i.i.i.i_11_196 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= tobool8.not.i.i.i.i.i_11_199 #b0))
  (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 #xfffffff8))
  (= shl11.i.i.i.i.i_11_203
   (bvshl word.addr.1.i.i.i.i.i_11_196 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203)
     (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))
  (ite (= tobool8.not.i.i.i.i.i_11_199 #b1)
     (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201)
     (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))
  (ite (bvult word.addr.2.i.i.i.i.i_11_204 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= tobool14.not.i.i.i.i.i_11_207 #b0))
  (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 #xfffffffc))
  (= shl17.i.i.i.i.i_11_211
   (bvshl word.addr.2.i.i.i.i.i_11_204 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211)
     (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))
  (ite (= tobool14.not.i.i.i.i.i_11_207 #b1)
     (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209)
     (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))
  (ite (bvult word.addr.3.i.i.i.i.i_11_212 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= tobool20.not.i.i.i.i.i_11_215 #b0))
  (= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 #x000000fe))
  (= shl23.i.i.i.i.i_11_219
   (bvshl word.addr.3.i.i.i.i.i_11_212 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219)
     (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))
  (ite (= tobool20.not.i.i.i.i.i_11_215 #b1)
     (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217)
     (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))
  (= word.addr.4.lobit.i.i.i.i.i.neg_11_223
   (bvlshr word.addr.4.i.i.i.i.i_11_220 #x000000000000003f))
  (= i.i.i.i.i.i.neg_11_224
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))
  (= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))
  (= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 #x000000ff))
BasicBlock: if.end309.i, Size:4
  (= dst_reg_11_104 i.i322.i_11_126)
  (ite (bvsgt i.i322.i_11_126 #xffffffffffffffff)
     (= cmp.i323.i_11_128 #b1)
     (= cmp.i323.i_11_128 #b0))
  (let ((a!1 (and (= cmp288.not.i_11_68 #b1)
                (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_112)
           (= src_reg_11_15 src_reg_11_113)
           (= src_reg_11_16 src_reg_11_114)
           (= src_reg_11_17 src_reg_11_115)
           (= src_reg_11_18 src_reg_11_116)
           (= src_reg_11_19 src_reg_11_117)
           (= src_reg_11_20 src_reg_11_118)
           (= src_reg_11_21 src_reg_11_119)
           (= src_reg_11_22 src_reg_11_120)
           (= src_reg_11_23 src_reg_11_121)
           (= src_reg_11_24 src_reg_11_122)
           (= src_reg_11_25 src_reg_11_123)
           (= src_reg_11_26 src_reg_11_124)
           (= src_reg_11_27 src_reg_11_125)
           (= #x00000001 dst_reg_11_98)
           (= dst_reg_11_1 dst_reg_11_99)
           (= dst_reg_11_2 dst_reg_11_100)
           (= dst_reg_11_3 dst_reg_11_101)
           (= shr.i261.i_11_83 dst_reg_11_102)
           (= shr5.i262.i_11_84 dst_reg_11_103)
           (= cond.i274.i_11_91 dst_reg_11_104)
           (= cond14.i280.i_11_96 dst_reg_11_105)
           (= shr.i261.i_11_83 dst_reg_11_106)
           (= or29.i287.i_11_97 dst_reg_11_107)
           (= dst_reg_11_10 dst_reg_11_108)
           (= dst_reg_11_11 dst_reg_11_109)
           (= dst_reg_11_12 dst_reg_11_110)
           (= dst_reg_11_13 dst_reg_11_111))))
  (let ((a!1 (and (= cmp288.not.i_11_68 #b0)
                (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_112)
           (= src_reg_11_15 src_reg_11_113)
           (= src_reg_11_16 src_reg_11_114)
           (= src_reg_11_17 src_reg_11_115)
           (= src_reg_11_18 src_reg_11_116)
           (= src_reg_11_19 src_reg_11_117)
           (= src_reg_11_20 src_reg_11_118)
           (= src_reg_11_21 src_reg_11_119)
           (= src_reg_11_22 src_reg_11_120)
           (= src_reg_11_23 src_reg_11_121)
           (= src_reg_11_24 src_reg_11_122)
           (= src_reg_11_25 src_reg_11_123)
           (= src_reg_11_26 src_reg_11_124)
           (= src_reg_11_27 src_reg_11_125)
           (= #x00000001 dst_reg_11_98)
           (= dst_reg_11_1 dst_reg_11_99)
           (= dst_reg_11_2 dst_reg_11_100)
           (= dst_reg_11_3 dst_reg_11_101)
           (= #x0000000000000000 dst_reg_11_102)
           (= #xffffffffffffffff dst_reg_11_103)
           (= #x8000000000000000 dst_reg_11_104)
           (= #x7fffffffffffffff dst_reg_11_105)
           (= #x0000000000000000 dst_reg_11_106)
           (= #xffffffffffffffff dst_reg_11_107)
           (= dst_reg_11_10 dst_reg_11_108)
           (= dst_reg_11_11 dst_reg_11_109)
           (= dst_reg_11_12 dst_reg_11_110)
           (= dst_reg_11_13 dst_reg_11_111))))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_11_106 i34.i.i_11_132)
  (ite (bvugt i.i322.i_11_126 i34.i.i_11_132)
     (= cmp3.i.i_11_133 #b1)
     (= cmp3.i.i_11_133 #b0))
  (ite (= cmp3.i.i_11_133 #b1)
     (= cond.i327.i_11_134 i.i322.i_11_126)
     (= cond.i327.i_11_134 i34.i.i_11_132))
  (= dst_reg_11_105 i35.i.i_11_135)
  (= dst_reg_11_107 i36.i.i_11_136)
  (ite (bvult i35.i.i_11_135 i36.i.i_11_136)
     (= cmp8.i.i_11_137 #b1)
     (= cmp8.i.i_11_137 #b0))
  (ite (= cmp8.i.i_11_137 #b1)
     (= cond12.i.i_11_138 i35.i.i_11_135)
     (= cond12.i.i_11_138 i36.i.i_11_136))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_11_30
               src_reg1.sroa.15.0.copyload_11_31)
     (= cmp16.not.i_11_38 #b1)
     (= cmp16.not.i_11_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_11_32
               src_reg1.sroa.22.0.copyload_11_33)
     (= cmp18.not.i_11_39 #b1)
     (= cmp18.not.i_11_39 #b0))
  (ite (= cmp16.not.i_11_38 #b1)
     (= or.cond197.i_11_41 #b1)
     (= or.cond197.i_11_41 cmp18.not.i_11_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.i_11_42 #b1)
     (= cmp21.i_11_42 #b0))
  (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.i_11_44 #b1)
     (= cmp24.i_11_44 #b0))
  (ite (= or.cond198.i_11_43 #b1)
     (= or.cond199.i_11_46 #b1)
     (= or.cond199.i_11_46 cmp24.i_11_44))
BasicBlock: sw.bb287.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_11_33 #x0000000000000040)
     (= cmp288.not.i_11_68 #b1)
     (= cmp288.not.i_11_68 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)
     (= cmp21.old.i_11_47 #b1)
     (= cmp21.old.i_11_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)
     (= cmp24.old.i_11_48 #b1)
     (= cmp24.old.i_11_48 #b0))
  (ite (= cmp21.old.i_11_47 #b1)
     (= or.cond200.i_11_50 #b1)
     (= or.cond200.i_11_50 cmp24.old.i_11_48))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_11_129 i37.i.i_11_139)
     (= cmp23.i.i_11_143 #b1)
     (= cmp23.i.i_11_143 #b0))
  (ite (= cmp23.i.i_11_143 #b1)
     (= cond27.i.i_11_144 i33.i.i_11_129)
     (= cond27.i.i_11_144 i37.i.i_11_139))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then290.i, Size:0
BasicBlock: if.end291.i, Size:17
  (= dst_reg_11_6 i271.i_11_76)
  (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_7 i272.i_11_78)
  (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))
  (= dst_reg_11_4 i273.i_11_80)
  (= sh_prom.i260.i_11_82
   (bvand src_reg1.sroa.17.0.copyload_11_32 #x00000000000000ff))
  (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))
  (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))
  (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 #x8000000000000000))
  (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))
  (ite (bvsgt shr293.i_11_77 or.i272.i_11_89)
     (= cmp.i273.i_11_90 #b1)
     (= cmp.i273.i_11_90 #b0))
  (ite (= cmp.i273.i_11_90 #b1)
     (= cond.i274.i_11_91 shr293.i_11_77)
     (= cond.i274.i_11_91 or.i272.i_11_89))
  (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 #x7fffffffffffffff))
  (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))
  (ite (bvslt shr295.i_11_79 or8.i278.i_11_94)
     (= cmp10.i279.i_11_95 #b1)
     (= cmp10.i279.i_11_95 #b0))
  (ite (= cmp10.i279.i_11_95 #b1)
     (= cond14.i280.i_11_96 shr295.i_11_79)
     (= cond14.i280.i_11_96 or8.i278.i_11_94))
  (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_11_105 i33.i.i_11_129)
  (ite (bvslt i33.i.i_11_129 #x0000000000000000)
     (= cmp1.i325.i_11_131 #b1)
     (= cmp1.i325.i_11_131 #b0))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (=> (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
        (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
    (and (= #x00000001 src_reg_11_265)
         (= src_reg_11_15 src_reg_11_266)
         (= src_reg_11_16 src_reg_11_267)
         (= src_reg_11_17 src_reg_11_268)
         (= src_reg_11_18 src_reg_11_269)
         (= src_reg_11_19 src_reg_11_270)
         (= src_reg_11_20 src_reg_11_271)
         (= src_reg_11_21 src_reg_11_272)
         (= src_reg_11_22 src_reg_11_273)
         (= src_reg_11_23 src_reg_11_274)
         (= src_reg_11_24 src_reg_11_275)
         (= src_reg_11_25 src_reg_11_276)
         (= src_reg_11_26 src_reg_11_277)
         (= src_reg_11_27 src_reg_11_278)
         (= #x00000001 dst_reg_11_251)
         (= dst_reg_11_1 dst_reg_11_252)
         (= dst_reg_11_2 dst_reg_11_253)
         (= dst_reg_11_3 dst_reg_11_254)
         (= #x0000000000000000 dst_reg_11_255)
         (= #xffffffffffffffff dst_reg_11_256)
         (= #x8000000000000000 dst_reg_11_257)
         (= #x7fffffffffffffff dst_reg_11_258)
         (= #x0000000000000000 dst_reg_11_259)
         (= #xffffffffffffffff dst_reg_11_260)
         (= #x00000000 dst_reg_11_261)
         (= dst_reg_11_11 dst_reg_11_262)
         (= dst_reg_11_12 dst_reg_11_263)
         (= dst_reg_11_13 dst_reg_11_264)))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
          (and (= cmp.i.i.i.i_11_181 #b1) a!5))
      (and (= src_reg_11_163 src_reg_11_265)
           (= src_reg_11_164 src_reg_11_266)
           (= src_reg_11_165 src_reg_11_267)
           (= src_reg_11_166 src_reg_11_268)
           (= src_reg_11_167 src_reg_11_269)
           (= src_reg_11_168 src_reg_11_270)
           (= src_reg_11_169 src_reg_11_271)
           (= src_reg_11_170 src_reg_11_272)
           (= src_reg_11_171 src_reg_11_273)
           (= src_reg_11_172 src_reg_11_274)
           (= src_reg_11_173 src_reg_11_275)
           (= src_reg_11_174 src_reg_11_276)
           (= src_reg_11_175 src_reg_11_277)
           (= src_reg_11_176 src_reg_11_278)
           (= dst_reg_11_149 dst_reg_11_251)
           (= dst_reg_11_150 dst_reg_11_252)
           (= dst_reg_11_151 dst_reg_11_253)
           (= dst_reg_11_152 dst_reg_11_254)
           (= and4.i.i.i_11_250 dst_reg_11_255)
           (= and.i1.i.i_11_247 dst_reg_11_256)
           (= dst_reg_11_155 dst_reg_11_257)
           (= dst_reg_11_156 dst_reg_11_258)
           (= dst_reg_11_157 dst_reg_11_259)
           (= dst_reg_11_158 dst_reg_11_260)
           (= dst_reg_11_159 dst_reg_11_261)
           (= dst_reg_11_160 dst_reg_11_262)
           (= dst_reg_11_161 dst_reg_11_263)
           (= dst_reg_11_162 dst_reg_11_264)))))))
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b0)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_11_265)
           (= src_reg_11_15 src_reg_11_266)
           (= src_reg_11_16 src_reg_11_267)
           (= src_reg_11_17 src_reg_11_268)
           (= src_reg_11_18 src_reg_11_269)
           (= src_reg_11_19 src_reg_11_270)
           (= src_reg_11_20 src_reg_11_271)
           (= src_reg_11_21 src_reg_11_272)
           (= src_reg_11_22 src_reg_11_273)
           (= src_reg_11_23 src_reg_11_274)
           (= src_reg_11_24 src_reg_11_275)
           (= src_reg_11_25 src_reg_11_276)
           (= src_reg_11_26 src_reg_11_277)
           (= src_reg_11_27 src_reg_11_278)
           (= #x00000001 dst_reg_11_251)
           (= dst_reg_11_1 dst_reg_11_252)
           (= dst_reg_11_2 dst_reg_11_253)
           (= dst_reg_11_3 dst_reg_11_254)
           (= #x0000000000000000 dst_reg_11_255)
           (= #xffffffffffffffff dst_reg_11_256)
           (= #x8000000000000000 dst_reg_11_257)
           (= #x7fffffffffffffff dst_reg_11_258)
           (= #x0000000000000000 dst_reg_11_259)
           (= #xffffffffffffffff dst_reg_11_260)
           (= #x00000000 dst_reg_11_261)
           (= dst_reg_11_11 dst_reg_11_262)
           (= dst_reg_11_12 dst_reg_11_263)
           (= dst_reg_11_13 dst_reg_11_264))))
  (= dst_reg_11_251 dst_reg_11_279)
  (= dst_reg_11_252 dst_reg_11_280)
  (= dst_reg_11_253 dst_reg_11_281)
  (= dst_reg_11_254 dst_reg_11_282)
  (= dst_reg_11_255 dst_reg_11_283)
  (= dst_reg_11_256 dst_reg_11_284)
  (= dst_reg_11_257 dst_reg_11_285)
  (= dst_reg_11_258 dst_reg_11_286)
  (= dst_reg_11_259 dst_reg_11_287)
  (= dst_reg_11_260 dst_reg_11_288)
  (= dst_reg_11_261 dst_reg_11_289)
  (= dst_reg_11_262 dst_reg_11_290)
  (= dst_reg_11_263 dst_reg_11_291)
  (= dst_reg_11_264 dst_reg_11_292)
  (= src_reg_11_265 src_reg_11_293)
  (= src_reg_11_266 src_reg_11_294)
  (= src_reg_11_267 src_reg_11_295)
  (= src_reg_11_268 src_reg_11_296)
  (= src_reg_11_269 src_reg_11_297)
  (= src_reg_11_270 src_reg_11_298)
  (= src_reg_11_271 src_reg_11_299)
  (= src_reg_11_272 src_reg_11_300)
  (= src_reg_11_273 src_reg_11_301)
  (= src_reg_11_274 src_reg_11_302)
  (= src_reg_11_275 src_reg_11_303)
  (= src_reg_11_276 src_reg_11_304)
  (= src_reg_11_277 src_reg_11_305)
  (= src_reg_11_278 src_reg_11_306)
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_11_107 i37.i.i_11_139)
  (ite (bvsgt i37.i.i_11_139 #xffffffffffffffff)
     (= cmp16.i.i_11_141 #b1)
     (= cmp16.i.i_11_141 #b0))
  (= dst_reg_11_106 i38.i.i_11_142)

[encodeFunctionBody] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
  (or (and (= cmp31.i330.i_11_146 #b1) a!3)
      (and (= cmp31.i330.i_11_146 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_11_131 #b1) (and (= cmp.i323.i_11_128 #b0) a!2))
      (and (= cmp.i323.i_11_128 #b1) a!2)))))
land.lhs.true.i
  (= tobool.not.i.i_11_36 #b1)
sw.bb287.i
  (and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_11_36 #b0)
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
if.then26.i
  (or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))
if.end291.i
  (and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (or (and (= cmp288.not.i_11_68 #b1) a!1) (and (= cmp288.not.i_11_68 #b0) a!1)))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
if.then290.i
  (and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
               (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1)))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1)
                    (and (= tobool.not.i.i_11_36 #b1) a!1))
               (and (= cmp288.not.i_11_68 #b0)
                    (and (= tobool.not.i.i_11_36 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5)
      (and (= cmp.i.i.i.i_11_181 #b1) a!5)
      (and (= tobool.not.i.i_11_36 #b0) a!1)
      (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
      (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_11_181 #b0) a!5) (and (= cmp.i.i.i.i_11_181 #b1) a!5))))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_11_141 #b0)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_11_141 #b1)
                (and (= cmp1.i325.i_11_131 #b0)
                     (and (= cmp.i323.i_11_128 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_11_146 #b1) a!3)
               (and (= cmp31.i330.i_11_146 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_11_131 #b1)
                    (and (= cmp.i323.i_11_128 #b0) a!2))
               (and (= cmp.i323.i_11_128 #b1) a!2))))
  (and (= cmp.i.i.i.i_11_181 #b1) a!5)))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b0)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
(let ((a!2 (or (and (= cmp288.not.i_11_68 #b1) a!1)
               (and (= cmp288.not.i_11_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_11_131 #b1) (= cmp.i323.i_11_128 #b0) a!2)
      (and (= cmp.i323.i_11_128 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp16.i.i_11_141 #b1)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp.i323.i_11_128 #b1)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<if.end291.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp1.i325.i_11_131 #b1)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_11_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_11_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
    (and (= or.cond199.i_11_46 #b1) (= tobool.not.i.i_11_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_11_50 #b1) (= tobool.not.i.i_11_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_11_36 #b1)
                (or (and (= or.cond200.i_11_50 #b0)
                         (= tobool.not.i.i_11_36 #b0))
                    (and (= or.cond199.i_11_46 #b0)
                         (= tobool.not.i.i_11_36 #b1))))))
  (and (= cmp31.i330.i_11_146 #b1)
       (= cmp16.i.i_11_141 #b0)
       (= cmp1.i325.i_11_131 #b0)
       (= cmp.i323.i_11_128 #b0)
       (or (and (= cmp288.not.i_11_68 #b1) a!1)
           (and (= cmp288.not.i_11_68 #b0) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
<sw.bb287.i, if.end291.i> :(and (= cmp288.not.i_11_68 #b1)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, sw.bb287.i> :(and (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<sw.bb287.i, if.then290.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_11_36 #b0)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
<if.then290.i, if.end309.i> :(and (= cmp288.not.i_11_68 #b0)
     (= tobool.not.i.i_11_36 #b1)
     (or (and (= or.cond200.i_11_50 #b0) (= tobool.not.i.i_11_36 #b0))
         (and (= or.cond199.i_11_46 #b0) (= tobool.not.i.i_11_36 #b1))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
49 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,47},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_11_265 ] [ ] [ src_reg_11_266 ] [ src_reg_11_267 ] [ src_reg_11_268 ] [ [ src_reg_11_269 ] [ src_reg_11_270 ] ] [ src_reg_11_271 ] [ src_reg_11_272 ] [ src_reg_11_273 ] [ src_reg_11_274 ] [ ] [ src_reg_11_275 ] [ src_reg_11_276 ] [ src_reg_11_277 ] [ src_reg_11_278 ] ] 
- dst_reg: [ [ dst_reg_11_251 ] [ ] [ dst_reg_11_252 ] [ dst_reg_11_253 ] [ dst_reg_11_254 ] [ [ dst_reg_11_255 ] [ dst_reg_11_256 ] ] [ dst_reg_11_257 ] [ dst_reg_11_258 ] [ dst_reg_11_259 ] [ dst_reg_11_260 ] [ ] [ dst_reg_11_261 ] [ dst_reg_11_262 ] [ dst_reg_11_263 ] [ dst_reg_11_264 ] ] 
}
47 = MemoryDef(46) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ and.i1.i.i_11_247 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
46 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ and4.i.i.i_11_250 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
}
45 = MemoryDef(44) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ i37.i.i_11_139 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond40.i.i_11_148 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
36 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ or29.i287.i_11_97 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ shr.i261.i_11_83 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ cond14.i280.i_11_96 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ cond.i274.i_11_91 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
48 = MemoryPhi({if.then.i329.i,39},{if.then17.i.i,42},{if.else.i331.i,50},{if.then32.i.i,45}) : {
- src_reg: [ [ src_reg_11_163 ] [ ] [ src_reg_11_164 ] [ src_reg_11_165 ] [ src_reg_11_166 ] [ [ src_reg_11_167 ] [ src_reg_11_168 ] ] [ src_reg_11_169 ] [ src_reg_11_170 ] [ src_reg_11_171 ] [ src_reg_11_172 ] [ ] [ src_reg_11_173 ] [ src_reg_11_174 ] [ src_reg_11_175 ] [ src_reg_11_176 ] ] 
- dst_reg: [ [ dst_reg_11_149 ] [ ] [ dst_reg_11_150 ] [ dst_reg_11_151 ] [ dst_reg_11_152 ] [ [ dst_reg_11_153 ] [ dst_reg_11_154 ] ] [ dst_reg_11_155 ] [ dst_reg_11_156 ] [ dst_reg_11_157 ] [ dst_reg_11_158 ] [ ] [ dst_reg_11_159 ] [ dst_reg_11_160 ] [ dst_reg_11_161 ] [ dst_reg_11_162 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ shr5.i262.i_11_84 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ cond27.i.i_11_144 ] [ dst_reg_11_106 ] [ cond27.i.i_11_144 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
50 = MemoryPhi({if.end291.i,35},{if.then290.i,25}) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ shr.i261.i_11_83 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ dst_reg_11_105 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
43 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ dst_reg_11_104 ] [ dst_reg_11_105 ] [ cond40.i.i_11_148 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
40 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ i38.i.i_11_142 ] [ dst_reg_11_105 ] [ dst_reg_11_106 ] [ dst_reg_11_107 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ shr293.i_11_77 ] [ shr295.i_11_79 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_11_112 ] [ ] [ src_reg_11_113 ] [ src_reg_11_114 ] [ src_reg_11_115 ] [ [ src_reg_11_116 ] [ src_reg_11_117 ] ] [ src_reg_11_118 ] [ src_reg_11_119 ] [ src_reg_11_120 ] [ src_reg_11_121 ] [ ] [ src_reg_11_122 ] [ src_reg_11_123 ] [ src_reg_11_124 ] [ src_reg_11_125 ] ] 
- dst_reg: [ [ dst_reg_11_98 ] [ ] [ dst_reg_11_99 ] [ dst_reg_11_100 ] [ dst_reg_11_101 ] [ [ dst_reg_11_102 ] [ dst_reg_11_103 ] ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ cond.i327.i_11_134 ] [ cond12.i.i_11_138 ] [ ] [ dst_reg_11_108 ] [ dst_reg_11_109 ] [ dst_reg_11_110 ] [ dst_reg_11_111 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ #x00000000 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_11_0 ] [ ] [ dst_reg_11_1 ] [ dst_reg_11_2 ] [ dst_reg_11_3 ] [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] [ dst_reg_11_6 ] [ dst_reg_11_7 ] [ dst_reg_11_8 ] [ dst_reg_11_9 ] [ ] [ dst_reg_11_10 ] [ dst_reg_11_11 ] [ dst_reg_11_12 ] [ dst_reg_11_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_11_4 ] [ dst_reg_11_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_4",
	"dst_reg_11_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8",
	"dst_reg_11_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8",
	"dst_reg_11_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8",
	"dst_reg_11_9",
	"",
	"",
	"dst_reg_11_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8",
	"dst_reg_11_9",
	"",
	"",
	"dst_reg_11_10",
	"dst_reg_11_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_11_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_0",
	[
		""
	],
	"dst_reg_11_1",
	"dst_reg_11_2",
	"dst_reg_11_3",
	[
		"dst_reg_11_4",
		"dst_reg_11_5"
	],
	"dst_reg_11_6",
	"dst_reg_11_7",
	"dst_reg_11_8",
	"dst_reg_11_9",
	"",
	"",
	"dst_reg_11_10",
	"dst_reg_11_11",
	"dst_reg_11_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_11_14 ] [ ] [ src_reg_11_15 ] [ src_reg_11_16 ] [ src_reg_11_17 ] [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] [ src_reg_11_20 ] [ src_reg_11_21 ] [ src_reg_11_22 ] [ src_reg_11_23 ] [ ] [ src_reg_11_24 ] [ src_reg_11_25 ] [ src_reg_11_26 ] [ src_reg_11_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_11_18 ] [ src_reg_11_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_11_18 ] [ src_reg_11_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_18",
	"src_reg_11_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22",
	"src_reg_11_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22",
	"src_reg_11_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22",
	"src_reg_11_23",
	"",
	"",
	"src_reg_11_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22",
	"src_reg_11_23",
	"",
	"",
	"src_reg_11_24",
	"src_reg_11_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_11_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_14",
	[
		""
	],
	"src_reg_11_15",
	"src_reg_11_16",
	"src_reg_11_17",
	[
		"src_reg_11_18",
		"src_reg_11_19"
	],
	"src_reg_11_20",
	"src_reg_11_21",
	"src_reg_11_22",
	"src_reg_11_23",
	"",
	"",
	"src_reg_11_24",
	"src_reg_11_25",
	"src_reg_11_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_11_293 ] [ ] [ src_reg_11_294 ] [ src_reg_11_295 ] [ src_reg_11_296 ] [ [ src_reg_11_297 ] [ src_reg_11_298 ] ] [ src_reg_11_299 ] [ src_reg_11_300 ] [ src_reg_11_301 ] [ src_reg_11_302 ] [ ] [ src_reg_11_303 ] [ src_reg_11_304 ] [ src_reg_11_305 ] [ src_reg_11_306 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_11_293 ] [ ] [ src_reg_11_294 ] [ src_reg_11_295 ] [ src_reg_11_296 ] [ [ src_reg_11_297 ] [ src_reg_11_298 ] ] [ src_reg_11_299 ] [ src_reg_11_300 ] [ src_reg_11_301 ] [ src_reg_11_302 ] [ ] [ src_reg_11_303 ] [ src_reg_11_304 ] [ src_reg_11_305 ] [ src_reg_11_306 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_293 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_294 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_295 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_296 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_11_297 ] [ src_reg_11_298 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_11_297 ] [ src_reg_11_298 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_297 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_297"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_298 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_297",
	"src_reg_11_298"
]

[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_299 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_300 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_301 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_11_302 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301",
	"src_reg_11_302"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301",
	"src_reg_11_302",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_303 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301",
	"src_reg_11_302",
	"",
	"",
	"src_reg_11_303"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_11_304 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301",
	"src_reg_11_302",
	"",
	"",
	"src_reg_11_303",
	"src_reg_11_304"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_11_305 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_11_293",
	[
		""
	],
	"src_reg_11_294",
	"src_reg_11_295",
	"src_reg_11_296",
	[
		"src_reg_11_297",
		"src_reg_11_298"
	],
	"src_reg_11_299",
	"src_reg_11_300",
	"src_reg_11_301",
	"src_reg_11_302",
	"",
	"",
	"src_reg_11_303",
	"src_reg_11_304",
	"src_reg_11_305"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_11_279 ] [ ] [ dst_reg_11_280 ] [ dst_reg_11_281 ] [ dst_reg_11_282 ] [ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] [ dst_reg_11_285 ] [ dst_reg_11_286 ] [ dst_reg_11_287 ] [ dst_reg_11_288 ] [ ] [ dst_reg_11_289 ] [ dst_reg_11_290 ] [ dst_reg_11_291 ] [ dst_reg_11_292 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_11_279 ] [ ] [ dst_reg_11_280 ] [ dst_reg_11_281 ] [ dst_reg_11_282 ] [ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] [ dst_reg_11_285 ] [ dst_reg_11_286 ] [ dst_reg_11_287 ] [ dst_reg_11_288 ] [ ] [ dst_reg_11_289 ] [ dst_reg_11_290 ] [ dst_reg_11_291 ] [ dst_reg_11_292 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_279 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_280 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_281 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_282 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_11_283 ] [ dst_reg_11_284 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_283 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_283"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_284 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_283",
	"dst_reg_11_284"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_285 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_286 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_287 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_11_288 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287",
	"dst_reg_11_288"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287",
	"dst_reg_11_288",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_289 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287",
	"dst_reg_11_288",
	"",
	"",
	"dst_reg_11_289"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_11_290 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287",
	"dst_reg_11_288",
	"",
	"",
	"dst_reg_11_289",
	"dst_reg_11_290"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_11_291 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_11_279",
	[
		""
	],
	"dst_reg_11_280",
	"dst_reg_11_281",
	"dst_reg_11_282",
	[
		"dst_reg_11_283",
		"dst_reg_11_284"
	],
	"dst_reg_11_285",
	"dst_reg_11_286",
	"dst_reg_11_287",
	"dst_reg_11_288",
	"",
	"",
	"dst_reg_11_289",
	"dst_reg_11_290",
	"dst_reg_11_291"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_ARSH
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_11_0",
      [ "" ],
      "dst_reg_11_1",
      "dst_reg_11_2",
      "dst_reg_11_3",
      [ "dst_reg_11_4", "dst_reg_11_5" ],
      "dst_reg_11_6",
      "dst_reg_11_7",
      "dst_reg_11_8",
      "dst_reg_11_9",
      "",
      "",
      "dst_reg_11_10",
      "dst_reg_11_11",
      "dst_reg_11_12"
   ],
   "src_reg" : [
      "src_reg_11_14",
      [ "" ],
      "src_reg_11_15",
      "src_reg_11_16",
      "src_reg_11_17",
      [ "src_reg_11_18", "src_reg_11_19" ],
      "src_reg_11_20",
      "src_reg_11_21",
      "src_reg_11_22",
      "src_reg_11_23",
      "",
      "",
      "src_reg_11_24",
      "src_reg_11_25",
      "src_reg_11_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_11_279",
      [ "" ],
      "dst_reg_11_280",
      "dst_reg_11_281",
      "dst_reg_11_282",
      [ "dst_reg_11_283", "dst_reg_11_284" ],
      "dst_reg_11_285",
      "dst_reg_11_286",
      "dst_reg_11_287",
      "dst_reg_11_288",
      "",
      "",
      "dst_reg_11_289",
      "dst_reg_11_290",
      "dst_reg_11_291"
   ],
   "src_reg" : [
      "src_reg_11_293",
      [ "" ],
      "src_reg_11_294",
      "src_reg_11_295",
      "src_reg_11_296",
      [ "src_reg_11_297", "src_reg_11_298" ],
      "src_reg_11_299",
      "src_reg_11_300",
      "src_reg_11_301",
      "src_reg_11_302",
      "",
      "",
      "src_reg_11_303",
      "src_reg_11_304",
      "src_reg_11_305"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun i38.i.i_11_142 () (_ BitVec 64))
(declare-fun dst_reg_11_106 () (_ BitVec 64))
(declare-fun cmp16.i.i_11_141 () (_ BitVec 1))
(declare-fun i37.i.i_11_139 () (_ BitVec 64))
(declare-fun dst_reg_11_107 () (_ BitVec 64))
(declare-fun tobool.not.i.i_11_36 () (_ BitVec 1))
(declare-fun or.cond199.i_11_46 () (_ BitVec 1))
(declare-fun or.cond200.i_11_50 () (_ BitVec 1))
(declare-fun cmp288.not.i_11_68 () (_ BitVec 1))
(declare-fun cmp.i323.i_11_128 () (_ BitVec 1))
(declare-fun cmp1.i325.i_11_131 () (_ BitVec 1))
(declare-fun src_reg_11_306 () (_ BitVec 8))
(declare-fun src_reg_11_278 () (_ BitVec 8))
(declare-fun src_reg_11_305 () (_ BitVec 32))
(declare-fun src_reg_11_277 () (_ BitVec 32))
(declare-fun src_reg_11_304 () (_ BitVec 32))
(declare-fun src_reg_11_276 () (_ BitVec 32))
(declare-fun src_reg_11_303 () (_ BitVec 32))
(declare-fun src_reg_11_275 () (_ BitVec 32))
(declare-fun src_reg_11_302 () (_ BitVec 64))
(declare-fun src_reg_11_274 () (_ BitVec 64))
(declare-fun src_reg_11_301 () (_ BitVec 64))
(declare-fun src_reg_11_273 () (_ BitVec 64))
(declare-fun src_reg_11_300 () (_ BitVec 64))
(declare-fun src_reg_11_272 () (_ BitVec 64))
(declare-fun src_reg_11_299 () (_ BitVec 64))
(declare-fun src_reg_11_271 () (_ BitVec 64))
(declare-fun src_reg_11_298 () (_ BitVec 64))
(declare-fun src_reg_11_270 () (_ BitVec 64))
(declare-fun src_reg_11_297 () (_ BitVec 64))
(declare-fun src_reg_11_269 () (_ BitVec 64))
(declare-fun src_reg_11_296 () (_ BitVec 32))
(declare-fun src_reg_11_268 () (_ BitVec 32))
(declare-fun src_reg_11_295 () (_ BitVec 32))
(declare-fun src_reg_11_267 () (_ BitVec 32))
(declare-fun src_reg_11_294 () (_ BitVec 32))
(declare-fun src_reg_11_266 () (_ BitVec 32))
(declare-fun src_reg_11_293 () (_ BitVec 32))
(declare-fun src_reg_11_265 () (_ BitVec 32))
(declare-fun dst_reg_11_292 () (_ BitVec 8))
(declare-fun dst_reg_11_264 () (_ BitVec 8))
(declare-fun dst_reg_11_291 () (_ BitVec 32))
(declare-fun dst_reg_11_263 () (_ BitVec 32))
(declare-fun dst_reg_11_290 () (_ BitVec 32))
(declare-fun dst_reg_11_262 () (_ BitVec 32))
(declare-fun dst_reg_11_289 () (_ BitVec 32))
(declare-fun dst_reg_11_261 () (_ BitVec 32))
(declare-fun dst_reg_11_288 () (_ BitVec 64))
(declare-fun dst_reg_11_260 () (_ BitVec 64))
(declare-fun dst_reg_11_287 () (_ BitVec 64))
(declare-fun dst_reg_11_259 () (_ BitVec 64))
(declare-fun dst_reg_11_286 () (_ BitVec 64))
(declare-fun dst_reg_11_258 () (_ BitVec 64))
(declare-fun dst_reg_11_285 () (_ BitVec 64))
(declare-fun dst_reg_11_257 () (_ BitVec 64))
(declare-fun dst_reg_11_284 () (_ BitVec 64))
(declare-fun dst_reg_11_256 () (_ BitVec 64))
(declare-fun dst_reg_11_283 () (_ BitVec 64))
(declare-fun dst_reg_11_255 () (_ BitVec 64))
(declare-fun dst_reg_11_282 () (_ BitVec 32))
(declare-fun dst_reg_11_254 () (_ BitVec 32))
(declare-fun dst_reg_11_281 () (_ BitVec 32))
(declare-fun dst_reg_11_253 () (_ BitVec 32))
(declare-fun dst_reg_11_280 () (_ BitVec 32))
(declare-fun dst_reg_11_252 () (_ BitVec 32))
(declare-fun dst_reg_11_279 () (_ BitVec 32))
(declare-fun dst_reg_11_251 () (_ BitVec 32))
(declare-fun dst_reg_11_13 () (_ BitVec 8))
(declare-fun dst_reg_11_12 () (_ BitVec 32))
(declare-fun dst_reg_11_11 () (_ BitVec 32))
(declare-fun dst_reg_11_3 () (_ BitVec 32))
(declare-fun dst_reg_11_2 () (_ BitVec 32))
(declare-fun dst_reg_11_1 () (_ BitVec 32))
(declare-fun src_reg_11_27 () (_ BitVec 8))
(declare-fun src_reg_11_26 () (_ BitVec 32))
(declare-fun src_reg_11_25 () (_ BitVec 32))
(declare-fun src_reg_11_24 () (_ BitVec 32))
(declare-fun src_reg_11_23 () (_ BitVec 64))
(declare-fun src_reg_11_22 () (_ BitVec 64))
(declare-fun src_reg_11_21 () (_ BitVec 64))
(declare-fun src_reg_11_20 () (_ BitVec 64))
(declare-fun src_reg_11_19 () (_ BitVec 64))
(declare-fun src_reg_11_18 () (_ BitVec 64))
(declare-fun src_reg_11_17 () (_ BitVec 32))
(declare-fun src_reg_11_16 () (_ BitVec 32))
(declare-fun src_reg_11_15 () (_ BitVec 32))
(declare-fun dst_reg_11_162 () (_ BitVec 8))
(declare-fun dst_reg_11_161 () (_ BitVec 32))
(declare-fun dst_reg_11_160 () (_ BitVec 32))
(declare-fun dst_reg_11_159 () (_ BitVec 32))
(declare-fun dst_reg_11_158 () (_ BitVec 64))
(declare-fun dst_reg_11_157 () (_ BitVec 64))
(declare-fun dst_reg_11_156 () (_ BitVec 64))
(declare-fun dst_reg_11_155 () (_ BitVec 64))
(declare-fun and.i1.i.i_11_247 () (_ BitVec 64))
(declare-fun and4.i.i.i_11_250 () (_ BitVec 64))
(declare-fun dst_reg_11_152 () (_ BitVec 32))
(declare-fun dst_reg_11_151 () (_ BitVec 32))
(declare-fun dst_reg_11_150 () (_ BitVec 32))
(declare-fun dst_reg_11_149 () (_ BitVec 32))
(declare-fun src_reg_11_176 () (_ BitVec 8))
(declare-fun src_reg_11_175 () (_ BitVec 32))
(declare-fun src_reg_11_174 () (_ BitVec 32))
(declare-fun src_reg_11_173 () (_ BitVec 32))
(declare-fun src_reg_11_172 () (_ BitVec 64))
(declare-fun src_reg_11_171 () (_ BitVec 64))
(declare-fun src_reg_11_170 () (_ BitVec 64))
(declare-fun src_reg_11_169 () (_ BitVec 64))
(declare-fun src_reg_11_168 () (_ BitVec 64))
(declare-fun src_reg_11_167 () (_ BitVec 64))
(declare-fun src_reg_11_166 () (_ BitVec 32))
(declare-fun src_reg_11_165 () (_ BitVec 32))
(declare-fun src_reg_11_164 () (_ BitVec 32))
(declare-fun src_reg_11_163 () (_ BitVec 32))
(declare-fun cmp31.i330.i_11_146 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_11_181 () (_ BitVec 1))
(declare-fun i33.i.i_11_129 () (_ BitVec 64))
(declare-fun dst_reg_11_105 () (_ BitVec 64))
(declare-fun shr5.i262.i_11_84 () (_ BitVec 64))
(declare-fun shr.i261.i_11_83 () (_ BitVec 64))
(declare-fun or29.i287.i_11_97 () (_ BitVec 64))
(declare-fun or8.i278.i_11_94 () (_ BitVec 64))
(declare-fun cond14.i280.i_11_96 () (_ BitVec 64))
(declare-fun shr295.i_11_79 () (_ BitVec 64))
(declare-fun cmp10.i279.i_11_95 () (_ BitVec 1))
(declare-fun and7.i277.i_11_93 () (_ BitVec 64))
(declare-fun or.i272.i_11_89 () (_ BitVec 64))
(declare-fun cond.i274.i_11_91 () (_ BitVec 64))
(declare-fun shr293.i_11_77 () (_ BitVec 64))
(declare-fun cmp.i273.i_11_90 () (_ BitVec 1))
(declare-fun and.i271.i_11_88 () (_ BitVec 64))
(declare-fun sh_prom.i260.i_11_82 () (_ BitVec 64))
(declare-fun i215.i_11_37 () (_ BitVec 64))
(declare-fun i273.i_11_80 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_11_32 () (_ BitVec 64))
(declare-fun dst_reg_11_4 () (_ BitVec 64))
(declare-fun i272.i_11_78 () (_ BitVec 64))
(declare-fun dst_reg_11_7 () (_ BitVec 64))
(declare-fun i271.i_11_76 () (_ BitVec 64))
(declare-fun dst_reg_11_6 () (_ BitVec 64))
(declare-fun cond27.i.i_11_144 () (_ BitVec 64))
(declare-fun cmp23.i.i_11_143 () (_ BitVec 1))
(declare-fun cmp24.old.i_11_48 () (_ BitVec 1))
(declare-fun cmp21.old.i_11_47 () (_ BitVec 1))
(declare-fun src_reg1.sroa.22.0.copyload_11_33 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_11_31 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_11_30 () (_ BitVec 64))
(declare-fun cmp24.i_11_44 () (_ BitVec 1))
(declare-fun or.cond198.i_11_43 () (_ BitVec 1))
(declare-fun or.cond197.i_11_41 () (_ BitVec 1))
(declare-fun cmp21.i_11_42 () (_ BitVec 1))
(declare-fun cmp18.not.i_11_39 () (_ BitVec 1))
(declare-fun cmp16.not.i_11_38 () (_ BitVec 1))
(declare-fun i36.i.i_11_136 () (_ BitVec 64))
(declare-fun cond12.i.i_11_138 () (_ BitVec 64))
(declare-fun i35.i.i_11_135 () (_ BitVec 64))
(declare-fun cmp8.i.i_11_137 () (_ BitVec 1))
(declare-fun i34.i.i_11_132 () (_ BitVec 64))
(declare-fun cond.i327.i_11_134 () (_ BitVec 64))
(declare-fun i.i322.i_11_126 () (_ BitVec 64))
(declare-fun cmp3.i.i_11_133 () (_ BitVec 1))
(declare-fun dst_reg_11_111 () (_ BitVec 8))
(declare-fun dst_reg_11_110 () (_ BitVec 32))
(declare-fun dst_reg_11_109 () (_ BitVec 32))
(declare-fun dst_reg_11_108 () (_ BitVec 32))
(declare-fun dst_reg_11_10 () (_ BitVec 32))
(declare-fun dst_reg_11_104 () (_ BitVec 64))
(declare-fun dst_reg_11_103 () (_ BitVec 64))
(declare-fun dst_reg_11_102 () (_ BitVec 64))
(declare-fun dst_reg_11_101 () (_ BitVec 32))
(declare-fun dst_reg_11_100 () (_ BitVec 32))
(declare-fun dst_reg_11_99 () (_ BitVec 32))
(declare-fun dst_reg_11_98 () (_ BitVec 32))
(declare-fun src_reg_11_125 () (_ BitVec 8))
(declare-fun src_reg_11_124 () (_ BitVec 32))
(declare-fun src_reg_11_123 () (_ BitVec 32))
(declare-fun src_reg_11_122 () (_ BitVec 32))
(declare-fun src_reg_11_121 () (_ BitVec 64))
(declare-fun src_reg_11_120 () (_ BitVec 64))
(declare-fun src_reg_11_119 () (_ BitVec 64))
(declare-fun src_reg_11_118 () (_ BitVec 64))
(declare-fun src_reg_11_117 () (_ BitVec 64))
(declare-fun src_reg_11_116 () (_ BitVec 64))
(declare-fun src_reg_11_115 () (_ BitVec 32))
(declare-fun src_reg_11_114 () (_ BitVec 32))
(declare-fun src_reg_11_113 () (_ BitVec 32))
(declare-fun src_reg_11_112 () (_ BitVec 32))
(declare-fun add.i.i.i335.i_11_225 () (_ BitVec 32))
(declare-fun phi.bo_11_227 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_11_224 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_11_221 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_11_223 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_11_220 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_11_213 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_11_217 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_11_215 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_11_212 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_11_219 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_11_205 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_11_209 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_11_207 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_11_204 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_11_211 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_11_197 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_11_201 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_11_199 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_11_196 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_11_203 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_11_189 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_11_193 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_11_191 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_11_186 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_11_195 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_11_183 () (_ BitVec 1))
(declare-fun xor.i.i.i_11_179 () (_ BitVec 64))
(declare-fun shl.i.i.i.i.i_11_185 () (_ BitVec 64))
(declare-fun dst_reg_11_5 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_11_34 () (_ BitVec 64))
(declare-fun src_reg_11_14 () (_ BitVec 32))
(declare-fun dst_reg_11_9 () (_ BitVec 64))
(declare-fun dst_reg_11_8 () (_ BitVec 64))
(declare-fun dst_reg_11_0 () (_ BitVec 32))
(declare-fun cond40.i.i_11_148 () (_ BitVec 64))
(declare-fun cmp36.i.i_11_147 () (_ BitVec 1))
(declare-fun dst_reg_11_154 () (_ BitVec 64))
(declare-fun dst_reg_11_153 () (_ BitVec 64))
(declare-fun i.i333.i_11_177 () (_ BitVec 64))
(declare-fun i5.i.i_11_178 () (_ BitVec 64))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_11_228 () Bool)
(declare-fun neg.i.i.i_11_249 () (_ BitVec 64))
(declare-fun or.i.i.i_11_246 () (_ BitVec 64))
(declare-fun i11.i.i_11_245 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_11_243 () (_ BitVec 64))
(declare-fun i9.i.i_11_244 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_11_241 () (_ BitVec 64))
(declare-fun sub.i.i.i_11_238 () (_ BitVec 64))
(declare-fun cmp.i.i.i_11_233 () (_ BitVec 1))
(declare-fun and.i.i336.i_11_239 () (_ BitVec 64))
(declare-fun notmask.i.i.i_11_236 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_11_234 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_11_230 () (_ BitVec 32))
(assert
 (let (($x299 (= dst_reg_11_106 i38.i.i_11_142)))
 (let (($x295 (= cmp16.i.i_11_141 (_ bv0 1))))
 (let (($x296 (= cmp16.i.i_11_141 (_ bv1 1))))
 (let (($x297 (ite (bvsgt i37.i.i_11_139 (_ bv18446744073709551615 64)) $x296 $x295)))
 (let (($x292 (= dst_reg_11_107 i37.i.i_11_139)))
 (let (($x78 (= tobool.not.i.i_11_36 (_ bv1 1))))
 (let (($x655 (= or.cond199.i_11_46 (_ bv0 1))))
 (let (($x657 (and $x655 $x78)))
 (let (($x76 (= tobool.not.i.i_11_36 (_ bv0 1))))
 (let (($x658 (= or.cond200.i_11_50 (_ bv0 1))))
 (let (($x660 (and $x658 $x76)))
 (let (($x662 (or $x660 $x657)))
 (let (($x663 (and $x78 $x662)))
 (let (($x133 (= cmp288.not.i_11_68 (_ bv0 1))))
 (let (($x667 (and $x133 $x663)))
 (let (($x134 (= cmp288.not.i_11_68 (_ bv1 1))))
 (let (($x666 (and $x134 $x663)))
 (let (($x668 (or $x666 $x667)))
 (let (($x257 (= cmp.i323.i_11_128 (_ bv0 1))))
 (let (($x670 (and $x257 $x668)))
 (let (($x264 (= cmp1.i325.i_11_131 (_ bv0 1))))
 (let (($x672 (and $x264 $x670)))
 (let (($x789 (=> $x672 (and $x292 $x297 $x299))))
 (let (($x759 (= src_reg_11_278 src_reg_11_306)))
 (let (($x758 (= src_reg_11_277 src_reg_11_305)))
 (let (($x757 (= src_reg_11_276 src_reg_11_304)))
 (let (($x756 (= src_reg_11_275 src_reg_11_303)))
 (let (($x755 (= src_reg_11_274 src_reg_11_302)))
 (let (($x754 (= src_reg_11_273 src_reg_11_301)))
 (let (($x753 (= src_reg_11_272 src_reg_11_300)))
 (let (($x752 (= src_reg_11_271 src_reg_11_299)))
 (let (($x751 (= src_reg_11_270 src_reg_11_298)))
 (let (($x750 (= src_reg_11_269 src_reg_11_297)))
 (let (($x749 (= src_reg_11_268 src_reg_11_296)))
 (let (($x748 (= src_reg_11_267 src_reg_11_295)))
 (let (($x747 (= src_reg_11_266 src_reg_11_294)))
 (let (($x746 (= src_reg_11_265 src_reg_11_293)))
 (let (($x731 (= dst_reg_11_264 dst_reg_11_292)))
 (let (($x730 (= dst_reg_11_263 dst_reg_11_291)))
 (let (($x729 (= dst_reg_11_262 dst_reg_11_290)))
 (let (($x728 (= dst_reg_11_261 dst_reg_11_289)))
 (let (($x727 (= dst_reg_11_260 dst_reg_11_288)))
 (let (($x726 (= dst_reg_11_259 dst_reg_11_287)))
 (let (($x725 (= dst_reg_11_258 dst_reg_11_286)))
 (let (($x724 (= dst_reg_11_257 dst_reg_11_285)))
 (let (($x723 (= dst_reg_11_256 dst_reg_11_284)))
 (let (($x722 (= dst_reg_11_255 dst_reg_11_283)))
 (let (($x721 (= dst_reg_11_254 dst_reg_11_282)))
 (let (($x720 (= dst_reg_11_253 dst_reg_11_281)))
 (let (($x719 (= dst_reg_11_252 dst_reg_11_280)))
 (let (($x718 (= dst_reg_11_251 dst_reg_11_279)))
 (let (($x626 (= dst_reg_11_13 dst_reg_11_264)))
 (let (($x625 (= dst_reg_11_12 dst_reg_11_263)))
 (let (($x624 (= dst_reg_11_11 dst_reg_11_262)))
 (let (($x623 (= (_ bv0 32) dst_reg_11_261)))
 (let (($x622 (= (_ bv18446744073709551615 64) dst_reg_11_260)))
 (let (($x621 (= (_ bv0 64) dst_reg_11_259)))
 (let (($x620 (= (_ bv9223372036854775807 64) dst_reg_11_258)))
 (let (($x619 (= (_ bv9223372036854775808 64) dst_reg_11_257)))
 (let (($x618 (= (_ bv18446744073709551615 64) dst_reg_11_256)))
 (let (($x617 (= (_ bv0 64) dst_reg_11_255)))
 (let (($x616 (= dst_reg_11_3 dst_reg_11_254)))
 (let (($x615 (= dst_reg_11_2 dst_reg_11_253)))
 (let (($x614 (= dst_reg_11_1 dst_reg_11_252)))
 (let (($x613 (= (_ bv1 32) dst_reg_11_251)))
 (let (($x612 (= src_reg_11_27 src_reg_11_278)))
 (let (($x611 (= src_reg_11_26 src_reg_11_277)))
 (let (($x610 (= src_reg_11_25 src_reg_11_276)))
 (let (($x609 (= src_reg_11_24 src_reg_11_275)))
 (let (($x608 (= src_reg_11_23 src_reg_11_274)))
 (let (($x607 (= src_reg_11_22 src_reg_11_273)))
 (let (($x606 (= src_reg_11_21 src_reg_11_272)))
 (let (($x605 (= src_reg_11_20 src_reg_11_271)))
 (let (($x604 (= src_reg_11_19 src_reg_11_270)))
 (let (($x603 (= src_reg_11_18 src_reg_11_269)))
 (let (($x602 (= src_reg_11_17 src_reg_11_268)))
 (let (($x601 (= src_reg_11_16 src_reg_11_267)))
 (let (($x600 (= src_reg_11_15 src_reg_11_266)))
 (let (($x599 (= (_ bv1 32) src_reg_11_265)))
 (let (($x699 (and $x599 $x600 $x601 $x602 $x603 $x604 $x605 $x606 $x607 $x608 $x609 $x610 $x611 $x612 $x613 $x614 $x615 $x616 $x617 $x618 $x619 $x620 $x621 $x622 $x623 $x624 $x625 $x626)))
 (let (($x664 (and $x76 $x662)))
 (let (($x703 (=> $x664 $x699)))
 (let (($x654 (= dst_reg_11_162 dst_reg_11_264)))
 (let (($x653 (= dst_reg_11_161 dst_reg_11_263)))
 (let (($x652 (= dst_reg_11_160 dst_reg_11_262)))
 (let (($x651 (= dst_reg_11_159 dst_reg_11_261)))
 (let (($x650 (= dst_reg_11_158 dst_reg_11_260)))
 (let (($x649 (= dst_reg_11_157 dst_reg_11_259)))
 (let (($x648 (= dst_reg_11_156 dst_reg_11_258)))
 (let (($x647 (= dst_reg_11_155 dst_reg_11_257)))
 (let (($x646 (= and.i1.i.i_11_247 dst_reg_11_256)))
 (let (($x645 (= and4.i.i.i_11_250 dst_reg_11_255)))
 (let (($x644 (= dst_reg_11_152 dst_reg_11_254)))
 (let (($x643 (= dst_reg_11_151 dst_reg_11_253)))
 (let (($x642 (= dst_reg_11_150 dst_reg_11_252)))
 (let (($x641 (= dst_reg_11_149 dst_reg_11_251)))
 (let (($x640 (= src_reg_11_176 src_reg_11_278)))
 (let (($x639 (= src_reg_11_175 src_reg_11_277)))
 (let (($x638 (= src_reg_11_174 src_reg_11_276)))
 (let (($x637 (= src_reg_11_173 src_reg_11_275)))
 (let (($x636 (= src_reg_11_172 src_reg_11_274)))
 (let (($x635 (= src_reg_11_171 src_reg_11_273)))
 (let (($x634 (= src_reg_11_170 src_reg_11_272)))
 (let (($x633 (= src_reg_11_169 src_reg_11_271)))
 (let (($x632 (= src_reg_11_168 src_reg_11_270)))
 (let (($x631 (= src_reg_11_167 src_reg_11_269)))
 (let (($x630 (= src_reg_11_166 src_reg_11_268)))
 (let (($x629 (= src_reg_11_165 src_reg_11_267)))
 (let (($x628 (= src_reg_11_164 src_reg_11_266)))
 (let (($x627 (= src_reg_11_163 src_reg_11_265)))
 (let (($x701 (and $x627 $x628 $x629 $x630 $x631 $x632 $x633 $x634 $x635 $x636 $x637 $x638 $x639 $x640 $x641 $x642 $x643 $x644 $x645 $x646 $x647 $x648 $x649 $x650 $x651 $x652 $x653 $x654)))
 (let (($x258 (= cmp.i323.i_11_128 (_ bv1 1))))
 (let (($x669 (and $x258 $x668)))
 (let (($x265 (= cmp1.i325.i_11_131 (_ bv1 1))))
 (let (($x671 (and $x265 $x670)))
 (let (($x673 (or $x671 $x669)))
 (let (($x674 (and $x296 $x672)))
 (let (($x675 (and $x295 $x672)))
 (let (($x311 (= cmp31.i330.i_11_146 (_ bv0 1))))
 (let (($x678 (and $x311 $x675)))
 (let (($x312 (= cmp31.i330.i_11_146 (_ bv1 1))))
 (let (($x677 (and $x312 $x675)))
 (let (($x680 (or $x677 (or $x678 (or $x674 $x673)))))
 (let (($x399 (= cmp.i.i.i.i_11_181 (_ bv1 1))))
 (let (($x681 (and $x399 $x680)))
 (let (($x398 (= cmp.i.i.i.i_11_181 (_ bv0 1))))
 (let (($x682 (and $x398 $x680)))
 (let (($x683 (or $x682 $x681)))
 (let (($x702 (=> $x683 $x701)))
 (let (($x111 (= or.cond199.i_11_46 (_ bv1 1))))
 (let (($x656 (and $x111 $x78)))
 (let (($x124 (= or.cond200.i_11_50 (_ bv1 1))))
 (let (($x659 (and $x124 $x76)))
 (let (($x661 (or $x659 $x656)))
 (let (($x700 (=> $x661 $x699)))
 (let (($x786 (and $x700 $x702 $x703 $x718 $x719 $x720 $x721 $x722 $x723 $x724 $x725 $x726 $x727 $x728 $x729 $x730 $x731 $x746 $x747 $x748 $x749 $x750 $x751 $x752 $x753 $x754 $x755 $x756 $x757 $x758 $x759)))
 (let (($x684 (or $x683 (or $x664 $x661))))
 (let (($x787 (=> $x684 $x786)))
 (let (($x266 (ite (bvslt i33.i.i_11_129 (_ bv0 64)) $x265 $x264)))
 (let (($x261 (= dst_reg_11_105 i33.i.i_11_129)))
 (let (($x785 (=> $x670 (and $x261 $x266))))
 (let (($x190 (= or29.i287.i_11_97 (bvor shr.i261.i_11_83 shr5.i262.i_11_84))))
 (let (($x182 (= cmp10.i279.i_11_95 (_ bv1 1))))
 (let (($x187 (ite $x182 (= cond14.i280.i_11_96 shr295.i_11_79) (= cond14.i280.i_11_96 or8.i278.i_11_94))))
 (let (($x181 (= cmp10.i279.i_11_95 (_ bv0 1))))
 (let (($x183 (ite (bvslt shr295.i_11_79 or8.i278.i_11_94) $x182 $x181)))
 (let (($x178 (= or8.i278.i_11_94 (bvor shr.i261.i_11_83 and7.i277.i_11_93))))
 (let (($x175 (= and7.i277.i_11_93 (bvand shr5.i262.i_11_84 (_ bv9223372036854775807 64)))))
 (let (($x167 (= cmp.i273.i_11_90 (_ bv1 1))))
 (let (($x172 (ite $x167 (= cond.i274.i_11_91 shr293.i_11_77) (= cond.i274.i_11_91 or.i272.i_11_89))))
 (let (($x166 (= cmp.i273.i_11_90 (_ bv0 1))))
 (let (($x168 (ite (bvsgt shr293.i_11_77 or.i272.i_11_89) $x167 $x166)))
 (let (($x163 (= or.i272.i_11_89 (bvor shr.i261.i_11_83 and.i271.i_11_88))))
 (let (($x160 (= and.i271.i_11_88 (bvand shr5.i262.i_11_84 (_ bv9223372036854775808 64)))))
 (let (($x157 (= shr5.i262.i_11_84 (bvashr i215.i_11_37 sh_prom.i260.i_11_82))))
 (let (($x154 (= shr.i261.i_11_83 (bvashr i273.i_11_80 sh_prom.i260.i_11_82))))
 (let (($x151 (= sh_prom.i260.i_11_82 (bvand src_reg1.sroa.17.0.copyload_11_32 (_ bv255 64)))))
 (let (($x147 (= dst_reg_11_4 i273.i_11_80)))
 (let (($x145 (= shr295.i_11_79 (bvashr i272.i_11_78 src_reg1.sroa.17.0.copyload_11_32))))
 (let (($x142 (= dst_reg_11_7 i272.i_11_78)))
 (let (($x140 (= shr293.i_11_77 (bvashr i271.i_11_76 src_reg1.sroa.17.0.copyload_11_32))))
 (let (($x137 (= dst_reg_11_6 i271.i_11_76)))
 (let (($x782 (and $x137 $x140 $x142 $x145 $x147 $x151 $x154 $x157 $x160 $x163 $x168 $x172 $x175 $x178 $x183 $x187 $x190)))
 (let (($x783 (=> $x666 $x782)))
 (let (($x303 (= cmp23.i.i_11_143 (_ bv1 1))))
 (let (($x308 (ite $x303 (= cond27.i.i_11_144 i33.i.i_11_129) (= cond27.i.i_11_144 i37.i.i_11_139))))
 (let (($x302 (= cmp23.i.i_11_143 (_ bv0 1))))
 (let (($x304 (ite (bvult i33.i.i_11_129 i37.i.i_11_139) $x303 $x302)))
 (let (($x781 (=> $x674 (and $x304 $x308))))
 (let (($x116 (= cmp21.old.i_11_47 (_ bv1 1))))
 (let (($x125 (ite $x116 $x124 (= or.cond200.i_11_50 cmp24.old.i_11_48))))
 (let (($x119 (= cmp24.old.i_11_48 (_ bv0 1))))
 (let (($x120 (= cmp24.old.i_11_48 (_ bv1 1))))
 (let (($x105 (bvugt src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33)))
 (let (($x121 (ite $x105 $x120 $x119)))
 (let (($x115 (= cmp21.old.i_11_47 (_ bv0 1))))
 (let (($x97 (bvsgt src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31)))
 (let (($x117 (ite $x97 $x116 $x115)))
 (let (($x779 (=> $x76 (and $x117 $x121 $x125))))
 (let (($x777 (=> $x663 (and (ite (bvult src_reg1.sroa.22.0.copyload_11_33 (_ bv64 64)) $x134 $x133)))))
 (let (($x113 (ite (= or.cond198.i_11_43 (_ bv1 1)) $x111 (= or.cond199.i_11_46 cmp24.i_11_44))))
 (let (($x106 (= cmp24.i_11_44 (_ bv0 1))))
 (let (($x107 (= cmp24.i_11_44 (_ bv1 1))))
 (let (($x108 (ite $x105 $x107 $x106)))
 (let (($x103 (= or.cond198.i_11_43 (bvor cmp21.i_11_42 or.cond197.i_11_41))))
 (let (($x98 (= cmp21.i_11_42 (_ bv0 1))))
 (let (($x99 (= cmp21.i_11_42 (_ bv1 1))))
 (let (($x100 (ite $x97 $x99 $x98)))
 (let (($x85 (= cmp16.not.i_11_38 (_ bv1 1))))
 (let (($x95 (ite $x85 (= or.cond197.i_11_41 (_ bv1 1)) (= or.cond197.i_11_41 cmp18.not.i_11_39))))
 (let (($x89 (= cmp18.not.i_11_39 (_ bv0 1))))
 (let (($x90 (= cmp18.not.i_11_39 (_ bv1 1))))
 (let (($x88 (and (distinct src_reg1.sroa.17.0.copyload_11_32 src_reg1.sroa.22.0.copyload_11_33) true)))
 (let (($x91 (ite $x88 $x90 $x89)))
 (let (($x84 (= cmp16.not.i_11_38 (_ bv0 1))))
 (let (($x83 (and (distinct src_reg1.sroa.13.0.copyload_11_30 src_reg1.sroa.15.0.copyload_11_31) true)))
 (let (($x86 (ite $x83 $x85 $x84)))
 (let (($x775 (=> $x78 (and $x86 $x91 $x95 $x100 $x103 $x108 $x113))))
 (let (($x285 (= cmp8.i.i_11_137 (_ bv1 1))))
 (let (($x290 (ite $x285 (= cond12.i.i_11_138 i35.i.i_11_135) (= cond12.i.i_11_138 i36.i.i_11_136))))
 (let (($x284 (= cmp8.i.i_11_137 (_ bv0 1))))
 (let (($x286 (ite (bvult i35.i.i_11_135 i36.i.i_11_136) $x285 $x284)))
 (let (($x281 (= dst_reg_11_107 i36.i.i_11_136)))
 (let (($x279 (= dst_reg_11_105 i35.i.i_11_135)))
 (let (($x272 (= cmp3.i.i_11_133 (_ bv1 1))))
 (let (($x277 (ite $x272 (= cond.i327.i_11_134 i.i322.i_11_126) (= cond.i327.i_11_134 i34.i.i_11_132))))
 (let (($x271 (= cmp3.i.i_11_133 (_ bv0 1))))
 (let (($x273 (ite (bvugt i.i322.i_11_126 i34.i.i_11_132) $x272 $x271)))
 (let (($x268 (= dst_reg_11_106 i34.i.i_11_132)))
 (let (($x773 (=> $x673 (and $x268 $x273 $x277 $x279 $x281 $x286 $x290))))
 (let (($x246 (= dst_reg_11_13 dst_reg_11_111)))
 (let (($x245 (= dst_reg_11_12 dst_reg_11_110)))
 (let (($x244 (= dst_reg_11_11 dst_reg_11_109)))
 (let (($x243 (= dst_reg_11_10 dst_reg_11_108)))
 (let (($x252 (= (_ bv18446744073709551615 64) dst_reg_11_107)))
 (let (($x251 (= (_ bv0 64) dst_reg_11_106)))
 (let (($x250 (= (_ bv9223372036854775807 64) dst_reg_11_105)))
 (let (($x249 (= (_ bv9223372036854775808 64) dst_reg_11_104)))
 (let (($x248 (= (_ bv18446744073709551615 64) dst_reg_11_103)))
 (let (($x247 (= (_ bv0 64) dst_reg_11_102)))
 (let (($x236 (= dst_reg_11_3 dst_reg_11_101)))
 (let (($x235 (= dst_reg_11_2 dst_reg_11_100)))
 (let (($x234 (= dst_reg_11_1 dst_reg_11_99)))
 (let (($x233 (= (_ bv1 32) dst_reg_11_98)))
 (let (($x232 (= src_reg_11_27 src_reg_11_125)))
 (let (($x231 (= src_reg_11_26 src_reg_11_124)))
 (let (($x230 (= src_reg_11_25 src_reg_11_123)))
 (let (($x229 (= src_reg_11_24 src_reg_11_122)))
 (let (($x228 (= src_reg_11_23 src_reg_11_121)))
 (let (($x227 (= src_reg_11_22 src_reg_11_120)))
 (let (($x226 (= src_reg_11_21 src_reg_11_119)))
 (let (($x225 (= src_reg_11_20 src_reg_11_118)))
 (let (($x224 (= src_reg_11_19 src_reg_11_117)))
 (let (($x223 (= src_reg_11_18 src_reg_11_116)))
 (let (($x222 (= src_reg_11_17 src_reg_11_115)))
 (let (($x221 (= src_reg_11_16 src_reg_11_114)))
 (let (($x220 (= src_reg_11_15 src_reg_11_113)))
 (let (($x219 (= (_ bv1 32) src_reg_11_112)))
 (let (($x687 (and $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x228 $x229 $x230 $x231 $x232 $x233 $x234 $x235 $x236 $x247 $x248 $x249 $x250 $x251 $x252 $x243 $x244 $x245 $x246)))
 (let (($x688 (=> $x667 $x687)))
 (let (($x242 (= or29.i287.i_11_97 dst_reg_11_107)))
 (let (($x241 (= shr.i261.i_11_83 dst_reg_11_106)))
 (let (($x240 (= cond14.i280.i_11_96 dst_reg_11_105)))
 (let (($x239 (= cond.i274.i_11_91 dst_reg_11_104)))
 (let (($x238 (= shr5.i262.i_11_84 dst_reg_11_103)))
 (let (($x237 (= shr.i261.i_11_83 dst_reg_11_102)))
 (let (($x685 (and $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x228 $x229 $x230 $x231 $x232 $x233 $x234 $x235 $x236 $x237 $x238 $x239 $x240 $x241 $x242 $x243 $x244 $x245 $x246)))
 (let (($x686 (=> $x666 $x685)))
 (let (($x259 (ite (bvsgt i.i322.i_11_126 (_ bv18446744073709551615 64)) $x258 $x257)))
 (let (($x254 (= dst_reg_11_104 i.i322.i_11_126)))
 (let (($x771 (=> $x668 (and $x254 $x259 $x686 $x688))))
 (let (($x522 (= phi.bo_11_227 (bvand add.i.i.i335.i_11_225 (_ bv255 32)))))
 (let (($x518 (= add.i.i.i335.i_11_225 (bvadd num.4.i.i.i.i.i_11_221 i.i.i.i.i.i.neg_11_224))))
 (let (($x515 (= i.i.i.i.i.i.neg_11_224 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_11_223))))
 (let (($x512 (= word.addr.4.lobit.i.i.i.i.i.neg_11_223 (bvlshr word.addr.4.i.i.i.i.i_11_220 (_ bv63 64)))))
 (let (($x491 (= tobool20.not.i.i.i.i.i_11_215 (_ bv1 1))))
 (let (($x508 (ite $x491 (= num.4.i.i.i.i.i_11_221 sub22.i.i.i.i.i_11_217) (= num.4.i.i.i.i.i_11_221 num.3.i.i.i.i.i_11_213))))
 (let (($x504 (ite $x491 (= word.addr.4.i.i.i.i.i_11_220 shl23.i.i.i.i.i_11_219) (= word.addr.4.i.i.i.i.i_11_220 word.addr.3.i.i.i.i.i_11_212))))
 (let (($x500 (= shl23.i.i.i.i.i_11_219 (bvshl word.addr.3.i.i.i.i.i_11_212 (_ bv2 64)))))
 (let (($x496 (= sub22.i.i.i.i.i_11_217 (bvadd num.3.i.i.i.i.i_11_213 (_ bv254 32)))))
 (let (($x490 (= tobool20.not.i.i.i.i.i_11_215 (_ bv0 1))))
 (let (($x492 (ite (bvult word.addr.3.i.i.i.i.i_11_212 (_ bv4611686018427387904 64)) $x491 $x490)))
 (let (($x469 (= tobool14.not.i.i.i.i.i_11_207 (_ bv1 1))))
 (let (($x486 (ite $x469 (= num.3.i.i.i.i.i_11_213 sub16.i.i.i.i.i_11_209) (= num.3.i.i.i.i.i_11_213 num.2.i.i.i.i.i_11_205))))
 (let (($x482 (ite $x469 (= word.addr.3.i.i.i.i.i_11_212 shl17.i.i.i.i.i_11_211) (= word.addr.3.i.i.i.i.i_11_212 word.addr.2.i.i.i.i.i_11_204))))
 (let (($x478 (= shl17.i.i.i.i.i_11_211 (bvshl word.addr.2.i.i.i.i.i_11_204 (_ bv4 64)))))
 (let (($x474 (= sub16.i.i.i.i.i_11_209 (bvadd num.2.i.i.i.i.i_11_205 (_ bv4294967292 32)))))
 (let (($x468 (= tobool14.not.i.i.i.i.i_11_207 (_ bv0 1))))
 (let (($x470 (ite (bvult word.addr.2.i.i.i.i.i_11_204 (_ bv1152921504606846976 64)) $x469 $x468)))
 (let (($x447 (= tobool8.not.i.i.i.i.i_11_199 (_ bv1 1))))
 (let (($x464 (ite $x447 (= num.2.i.i.i.i.i_11_205 sub10.i.i.i.i.i_11_201) (= num.2.i.i.i.i.i_11_205 num.1.i.i.i.i.i_11_197))))
 (let (($x460 (ite $x447 (= word.addr.2.i.i.i.i.i_11_204 shl11.i.i.i.i.i_11_203) (= word.addr.2.i.i.i.i.i_11_204 word.addr.1.i.i.i.i.i_11_196))))
 (let (($x456 (= shl11.i.i.i.i.i_11_203 (bvshl word.addr.1.i.i.i.i.i_11_196 (_ bv8 64)))))
 (let (($x452 (= sub10.i.i.i.i.i_11_201 (bvadd num.1.i.i.i.i.i_11_197 (_ bv4294967288 32)))))
 (let (($x446 (= tobool8.not.i.i.i.i.i_11_199 (_ bv0 1))))
 (let (($x448 (ite (bvult word.addr.1.i.i.i.i.i_11_196 (_ bv72057594037927936 64)) $x447 $x446)))
 (let (($x425 (= tobool2.not.i.i.i.i.i_11_191 (_ bv1 1))))
 (let (($x442 (ite $x425 (= num.1.i.i.i.i.i_11_197 sub4.i.i.i.i.i_11_193) (= num.1.i.i.i.i.i_11_197 spec.select17.i.i.i.i.i_11_189))))
 (let (($x438 (ite $x425 (= word.addr.1.i.i.i.i.i_11_196 shl5.i.i.i.i.i_11_195) (= word.addr.1.i.i.i.i.i_11_196 spec.select.i.i.i.i.i_11_186))))
 (let (($x434 (= shl5.i.i.i.i.i_11_195 (bvshl spec.select.i.i.i.i.i_11_186 (_ bv16 64)))))
 (let (($x430 (= sub4.i.i.i.i.i_11_193 (bvadd spec.select17.i.i.i.i.i_11_189 (_ bv4294967280 32)))))
 (let (($x424 (= tobool2.not.i.i.i.i.i_11_191 (_ bv0 1))))
 (let (($x426 (ite (bvult spec.select.i.i.i.i.i_11_186 (_ bv281474976710656 64)) $x425 $x424)))
 (let (($x405 (= tobool.not.i.i.i.i.i_11_183 (_ bv1 1))))
 (let (($x420 (ite $x405 (= spec.select17.i.i.i.i.i_11_189 (_ bv31 32)) (= spec.select17.i.i.i.i.i_11_189 (_ bv63 32)))))
 (let (($x414 (ite $x405 (= spec.select.i.i.i.i.i_11_186 shl.i.i.i.i.i_11_185) (= spec.select.i.i.i.i.i_11_186 xor.i.i.i_11_179))))
 (let (($x410 (= shl.i.i.i.i.i_11_185 (bvshl xor.i.i.i_11_179 (_ bv32 64)))))
 (let (($x404 (= tobool.not.i.i.i.i.i_11_183 (_ bv0 1))))
 (let (($x406 (ite (bvult xor.i.i.i_11_179 (_ bv4294967296 64)) $x405 $x404)))
 (let (($x768 (and $x406 $x410 $x414 $x420 $x426 $x430 $x434 $x438 $x442 $x448 $x452 $x456 $x460 $x464 $x470 $x474 $x478 $x482 $x486 $x492 $x496 $x500 $x504 $x508 $x512 $x515 $x518 $x522)))
 (let (($x769 (=> $x682 $x768)))
 (let (($x81 (= dst_reg_11_5 i215.i_11_37)))
 (let (($x79 (ite (= src_reg1.sroa.10.0.copyload_11_34 (_ bv0 64)) $x78 $x76)))
 (let (($x71 (= src_reg_11_19 src_reg1.sroa.10.0.copyload_11_34)))
 (let (($x69 (= src_reg_11_23 src_reg1.sroa.22.0.copyload_11_33)))
 (let (($x67 (= src_reg_11_22 src_reg1.sroa.17.0.copyload_11_32)))
 (let (($x65 (= src_reg_11_21 src_reg1.sroa.15.0.copyload_11_31)))
 (let (($x63 (= src_reg_11_20 src_reg1.sroa.13.0.copyload_11_30)))
 (let (($x60 (= src_reg_11_27 src_reg_11_27)))
 (let (($x59 (= src_reg_11_26 src_reg_11_26)))
 (let (($x58 (= src_reg_11_25 src_reg_11_25)))
 (let (($x57 (= src_reg_11_24 src_reg_11_24)))
 (let (($x56 (= src_reg_11_23 src_reg_11_23)))
 (let (($x55 (= src_reg_11_22 src_reg_11_22)))
 (let (($x54 (= src_reg_11_21 src_reg_11_21)))
 (let (($x53 (= src_reg_11_20 src_reg_11_20)))
 (let (($x52 (= src_reg_11_19 src_reg_11_19)))
 (let (($x51 (= src_reg_11_18 src_reg_11_18)))
 (let (($x50 (= src_reg_11_17 src_reg_11_17)))
 (let (($x49 (= src_reg_11_16 src_reg_11_16)))
 (let (($x48 (= src_reg_11_15 src_reg_11_15)))
 (let (($x47 (= src_reg_11_14 src_reg_11_14)))
 (let (($x32 (= dst_reg_11_13 dst_reg_11_13)))
 (let (($x31 (= dst_reg_11_12 dst_reg_11_12)))
 (let (($x30 (= dst_reg_11_11 dst_reg_11_11)))
 (let (($x29 (= dst_reg_11_10 dst_reg_11_10)))
 (let (($x28 (= dst_reg_11_9 dst_reg_11_9)))
 (let (($x27 (= dst_reg_11_8 dst_reg_11_8)))
 (let (($x26 (= dst_reg_11_7 dst_reg_11_7)))
 (let (($x25 (= dst_reg_11_6 dst_reg_11_6)))
 (let (($x24 (= dst_reg_11_5 dst_reg_11_5)))
 (let (($x23 (= dst_reg_11_4 dst_reg_11_4)))
 (let (($x22 (= dst_reg_11_3 dst_reg_11_3)))
 (let (($x21 (= dst_reg_11_2 dst_reg_11_2)))
 (let (($x20 (= dst_reg_11_1 dst_reg_11_1)))
 (let (($x19 (= dst_reg_11_0 dst_reg_11_0)))
 (let (($x767 (=> $x675 (and (ite (bvslt i38.i.i_11_142 (_ bv0 64)) $x312 $x311)))))
 (let (($x317 (= cmp36.i.i_11_147 (_ bv1 1))))
 (let (($x322 (ite $x317 (= cond40.i.i_11_148 i.i322.i_11_126) (= cond40.i.i_11_148 i38.i.i_11_142))))
 (let (($x316 (= cmp36.i.i_11_147 (_ bv0 1))))
 (let (($x318 (ite (bvugt i.i322.i_11_126 i38.i.i_11_142) $x317 $x316)))
 (let (($x765 (=> $x677 (and $x318 $x322))))
 (let (($x378 (= dst_reg_11_111 dst_reg_11_162)))
 (let (($x377 (= dst_reg_11_110 dst_reg_11_161)))
 (let (($x376 (= dst_reg_11_109 dst_reg_11_160)))
 (let (($x375 (= dst_reg_11_108 dst_reg_11_159)))
 (let (($x385 (= dst_reg_11_107 dst_reg_11_158)))
 (let (($x388 (= cond40.i.i_11_148 dst_reg_11_157)))
 (let (($x387 (= i37.i.i_11_139 dst_reg_11_156)))
 (let (($x386 (= cond40.i.i_11_148 dst_reg_11_155)))
 (let (($x370 (= dst_reg_11_103 dst_reg_11_154)))
 (let (($x369 (= dst_reg_11_102 dst_reg_11_153)))
 (let (($x368 (= dst_reg_11_101 dst_reg_11_152)))
 (let (($x367 (= dst_reg_11_100 dst_reg_11_151)))
 (let (($x366 (= dst_reg_11_99 dst_reg_11_150)))
 (let (($x365 (= dst_reg_11_98 dst_reg_11_149)))
 (let (($x364 (= src_reg_11_125 src_reg_11_176)))
 (let (($x363 (= src_reg_11_124 src_reg_11_175)))
 (let (($x362 (= src_reg_11_123 src_reg_11_174)))
 (let (($x361 (= src_reg_11_122 src_reg_11_173)))
 (let (($x360 (= src_reg_11_121 src_reg_11_172)))
 (let (($x359 (= src_reg_11_120 src_reg_11_171)))
 (let (($x358 (= src_reg_11_119 src_reg_11_170)))
 (let (($x357 (= src_reg_11_118 src_reg_11_169)))
 (let (($x356 (= src_reg_11_117 src_reg_11_168)))
 (let (($x355 (= src_reg_11_116 src_reg_11_167)))
 (let (($x354 (= src_reg_11_115 src_reg_11_166)))
 (let (($x353 (= src_reg_11_114 src_reg_11_165)))
 (let (($x352 (= src_reg_11_113 src_reg_11_164)))
 (let (($x351 (= src_reg_11_112 src_reg_11_163)))
 (let (($x695 (and $x351 $x352 $x353 $x354 $x355 $x356 $x357 $x358 $x359 $x360 $x361 $x362 $x363 $x364 $x365 $x366 $x367 $x368 $x369 $x370 $x386 $x387 $x388 $x385 $x375 $x376 $x377 $x378)))
 (let (($x696 (=> $x677 $x695)))
 (let (($x381 (= dst_reg_11_106 dst_reg_11_157)))
 (let (($x384 (= dst_reg_11_105 dst_reg_11_156)))
 (let (($x383 (= dst_reg_11_104 dst_reg_11_155)))
 (let (($x693 (and $x351 $x352 $x353 $x354 $x355 $x356 $x357 $x358 $x359 $x360 $x361 $x362 $x363 $x364 $x365 $x366 $x367 $x368 $x369 $x370 $x383 $x384 $x381 $x385 $x375 $x376 $x377 $x378)))
 (let (($x694 (=> $x678 $x693)))
 (let (($x382 (= cond27.i.i_11_144 dst_reg_11_158)))
 (let (($x380 (= cond27.i.i_11_144 dst_reg_11_156)))
 (let (($x379 (= i38.i.i_11_142 dst_reg_11_155)))
 (let (($x691 (and $x351 $x352 $x353 $x354 $x355 $x356 $x357 $x358 $x359 $x360 $x361 $x362 $x363 $x364 $x365 $x366 $x367 $x368 $x369 $x370 $x379 $x380 $x381 $x382 $x375 $x376 $x377 $x378)))
 (let (($x692 (=> $x674 $x691)))
 (let (($x374 (= cond12.i.i_11_138 dst_reg_11_158)))
 (let (($x373 (= cond.i327.i_11_134 dst_reg_11_157)))
 (let (($x372 (= cond12.i.i_11_138 dst_reg_11_156)))
 (let (($x371 (= cond.i327.i_11_134 dst_reg_11_155)))
 (let (($x689 (and $x351 $x352 $x353 $x354 $x355 $x356 $x357 $x358 $x359 $x360 $x361 $x362 $x363 $x364 $x365 $x366 $x367 $x368 $x369 $x370 $x371 $x372 $x373 $x374 $x375 $x376 $x377 $x378)))
 (let (($x690 (=> $x673 $x689)))
 (let (($x400 (ite (= xor.i.i.i_11_179 (_ bv0 64)) $x399 $x398)))
 (let (($x395 (= xor.i.i.i_11_179 (bvxor i5.i.i_11_178 i.i333.i_11_177))))
 (let (($x392 (= dst_reg_11_158 i5.i.i_11_178)))
 (let (($x390 (= dst_reg_11_157 i.i333.i_11_177)))
 (let (($x763 (=> $x680 (and $x390 $x392 $x395 $x400 $x690 $x692 $x694 $x696))))
 (let (($x698 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229 $x681)))
 (let (($x697 (= if.end.i.i.i.i___reg_bound_offset.exit.i_11_228 $x682)))
 (let (($x570 (= and4.i.i.i_11_250 (bvand or.i.i.i_11_246 neg.i.i.i_11_249))))
 (let (($x567 (= neg.i.i.i_11_249 (bvxor and.i1.i.i_11_247 (_ bv18446744073709551615 64)))))
 (let (($x564 (= and.i1.i.i_11_247 (bvand retval.sroa.3.0.i.i.i_11_243 i11.i.i_11_245))))
 (let (($x561 (= or.i.i.i_11_246 (bvor retval.sroa.0.0.i.i.i_11_241 i9.i.i_11_244))))
 (let (($x558 (= dst_reg_11_103 i11.i.i_11_245)))
 (let (($x556 (= dst_reg_11_102 i9.i.i_11_244)))
 (let (($x533 (= cmp.i.i.i_11_233 (_ bv1 1))))
 (let (($x554 (ite $x533 (= retval.sroa.3.0.i.i.i_11_243 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_11_243 sub.i.i.i_11_238))))
 (let (($x550 (ite $x533 (= retval.sroa.0.0.i.i.i_11_241 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_11_241 and.i.i336.i_11_239))))
 (let (($x546 (= and.i.i336.i_11_239 (bvand notmask.i.i.i_11_236 i.i333.i_11_177))))
 (let (($x543 (= sub.i.i.i_11_238 (bvxor notmask.i.i.i_11_236 (_ bv18446744073709551615 64)))))
 (let (($x540 (= notmask.i.i.i_11_236 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_11_234))))
 (let (($x537 (= sh_prom.i.i.i_11_234 ((_ zero_extend 32) retval.0.i.i.i.i_11_230))))
 (let (($x532 (= cmp.i.i.i_11_233 (_ bv0 1))))
 (let (($x534 (ite (bvugt retval.0.i.i.i.i_11_230 (_ bv63 32)) $x533 $x532)))
 (let (($x528 (= retval.0.i.i.i.i_11_230 (_ bv0 32))))
 (let (($x529 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_11_229 $x528)))
 (let (($x526 (= retval.0.i.i.i.i_11_230 phi.bo_11_227)))
 (let (($x527 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_11_228 $x526)))
 (let (($x760 (and $x527 $x529 $x534 $x537 $x540 $x543 $x546 $x550 $x554 $x556 $x558 $x561 $x564 $x567 $x570 $x697 $x698)))
 (let (($x761 (=> $x683 $x760)))
 (and $x761 $x763 $x765 $x767 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x79 $x81 $x769 $x771 $x773 $x775 $x777 $x779 $x781 $x783 $x785 $x787 $x789))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH/BPF_ARSH.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ARSH BPF_ARSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_ARSH 11 BPF_ARSH.smt2

Finished llvm_to_smt_pass
