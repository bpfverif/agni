Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x1b1fdc0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND_32'<<0x1b1fdc0>>  #uses=1
  CS<0x1bb5bc0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND_32'<<0x1b2f210>>  #uses=1
  CS<0x1bc8bd0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_AND_32
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_AND_32
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_AND_32:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND_32'<<0x19dfaf0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_AND_32
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_AND_32
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_AND_32 -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
GLOBAL_BITVECTOR_SUFFIX: 17
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_0
[lookInsideStruct] singleValueType:dst_reg_17_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_1
[lookInsideStruct] singleValueType:dst_reg_17_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_2
[lookInsideStruct] singleValueType:dst_reg_17_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_3
[lookInsideStruct] singleValueType:dst_reg_17_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_4
[lookInsideStruct] singleValueType:dst_reg_17_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_5
[lookInsideStruct] singleValueType:dst_reg_17_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_6
[lookInsideStruct] singleValueType:dst_reg_17_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_7
[lookInsideStruct] singleValueType:dst_reg_17_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_8
[lookInsideStruct] singleValueType:dst_reg_17_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_9
[lookInsideStruct] singleValueType:dst_reg_17_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_10
[lookInsideStruct] singleValueType:dst_reg_17_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_11
[lookInsideStruct] singleValueType:dst_reg_17_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_12
[lookInsideStruct] singleValueType:dst_reg_17_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_13
[lookInsideStruct] singleValueType:dst_reg_17_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_14
[lookInsideStruct] singleValueType:src_reg_17_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_15
[lookInsideStruct] singleValueType:src_reg_17_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_16
[lookInsideStruct] singleValueType:src_reg_17_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_17
[lookInsideStruct] singleValueType:src_reg_17_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_18
[lookInsideStruct] singleValueType:src_reg_17_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_19
[lookInsideStruct] singleValueType:src_reg_17_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_20
[lookInsideStruct] singleValueType:src_reg_17_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_21
[lookInsideStruct] singleValueType:src_reg_17_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_22
[lookInsideStruct] singleValueType:src_reg_17_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_23
[lookInsideStruct] singleValueType:src_reg_17_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_24
[lookInsideStruct] singleValueType:src_reg_17_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_25
[lookInsideStruct] singleValueType:src_reg_17_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_26
[lookInsideStruct] singleValueType:src_reg_17_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_27
[lookInsideStruct] singleValueType:src_reg_17_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_17_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_17_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_17_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleLoadInst] (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_17_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_17_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleLoadInst] (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_17_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_17_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleLoadInst] (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_17_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_17_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleLoadInst] (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)

-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i.i_17_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i.i_17_34
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleLoadInst] (= dst_reg_17_4 i18.i.i_17_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)

-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i.i_17_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i.i_17_35
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleLoadInst] (= dst_reg_17_5 i20.i.i_17_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)

-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i.i_17_34
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i.i_17_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i.i_17_37
[handleBinaryOperatorInst] AND instruction
(= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i.i_17_35
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i.i_17_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i.i_17_39
[handleBinaryOperatorInst] AND instruction
(= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_17_37
[handleStoreInst] BVToStore: and.i.i.i_17_37
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i.i_17_37 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_17_39
[handleStoreInst] BVToStore: and6.i.i.i_17_39
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i.i_17_39 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i.i_17_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i.i_17_40
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleLoadInst] (= dst_reg_17_8 i23.i.i_17_40)
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)

-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i.i_17_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i.i_17_41
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleLoadInst] (= dst_reg_17_9 i24.i.i_17_41)
[printBBAssertionsMap] 
BasicBlock: entry, Size:38
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)

-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_17_41
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_17_40
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i.i_17_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i.i_17_42
[handleBinaryOperatorInst] XOR instruction
(= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i.i_17_42
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_17_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_17_44
[handleICmpInst] (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_17_40
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i_17_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i_17_46
[handleBinaryOperatorInst] AND instruction
(= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i_17_46
[handleStoreInst] BVToStore: and6.i.i_17_46
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i_17_46 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_17_41
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i.i_17_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i.i_17_48
[handleBinaryOperatorInst] AND instruction
(= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_50
[lookInsideStruct] singleValueType:dst_reg_17_50
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_51
[lookInsideStruct] singleValueType:dst_reg_17_51
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_52
[lookInsideStruct] singleValueType:dst_reg_17_52
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_53
[lookInsideStruct] singleValueType:dst_reg_17_53
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_54
[lookInsideStruct] singleValueType:dst_reg_17_54
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_55
[lookInsideStruct] singleValueType:dst_reg_17_55
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_56
[lookInsideStruct] singleValueType:dst_reg_17_56
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_57
[lookInsideStruct] singleValueType:dst_reg_17_57
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_58
[lookInsideStruct] singleValueType:dst_reg_17_58
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_59
[lookInsideStruct] singleValueType:dst_reg_17_59
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_60
[lookInsideStruct] singleValueType:dst_reg_17_60
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_61
[lookInsideStruct] singleValueType:dst_reg_17_61
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_62
[lookInsideStruct] singleValueType:dst_reg_17_62
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_63
[lookInsideStruct] singleValueType:dst_reg_17_63
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_64
[lookInsideStruct] singleValueType:src_reg_17_64
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_65
[lookInsideStruct] singleValueType:src_reg_17_65
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_66
[lookInsideStruct] singleValueType:src_reg_17_66
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_67
[lookInsideStruct] singleValueType:src_reg_17_67
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_68
[lookInsideStruct] singleValueType:src_reg_17_68
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_69
[lookInsideStruct] singleValueType:src_reg_17_69
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_70
[lookInsideStruct] singleValueType:src_reg_17_70
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_71
[lookInsideStruct] singleValueType:src_reg_17_71
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_72
[lookInsideStruct] singleValueType:src_reg_17_72
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_73
[lookInsideStruct] singleValueType:src_reg_17_73
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_74
[lookInsideStruct] singleValueType:src_reg_17_74
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_75
[lookInsideStruct] singleValueType:src_reg_17_75
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_76
[lookInsideStruct] singleValueType:src_reg_17_76
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_77
[lookInsideStruct] singleValueType:src_reg_17_77
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i.i
[handleMemoryPhiNode] incomingAccessI: 5 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_17_64)
(= src_reg_17_15 src_reg_17_65)
(= src_reg_17_16 src_reg_17_66)
(= src_reg_17_17 src_reg_17_67)
(= src_reg_17_18 src_reg_17_68)
(= src_reg_17_19 src_reg_17_69)
(= src_reg_17_20 src_reg_17_70)
(= src_reg_17_21 src_reg_17_71)
(= src_reg_17_22 src_reg_17_72)
(= src_reg_17_23 src_reg_17_73)
(= src_reg_17_24 src_reg_17_74)
(= src_reg_17_25 src_reg_17_75)
(= src_reg_17_26 src_reg_17_76)
(= src_reg_17_27 src_reg_17_77)
(= #x00000001 dst_reg_17_50)
(= dst_reg_17_1 dst_reg_17_51)
(= dst_reg_17_2 dst_reg_17_52)
(= dst_reg_17_3 dst_reg_17_53)
(= and.i.i.i_17_37 dst_reg_17_54)
(= and6.i.i.i_17_39 dst_reg_17_55)
(= dst_reg_17_6 dst_reg_17_56)
(= dst_reg_17_7 dst_reg_17_57)
(= and6.i.i_17_46 dst_reg_17_58)
(= dst_reg_17_9 dst_reg_17_59)
(= dst_reg_17_10 dst_reg_17_60)
(= dst_reg_17_11 dst_reg_17_61)
(= dst_reg_17_12 dst_reg_17_62)
(= dst_reg_17_13 dst_reg_17_63)
]
[handleMemoryPhiNode] incomingBBI: if.else.i.i
[handleMemoryPhiNode] incomingAccessI: 6 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_17_64)
(= src_reg_17_15 src_reg_17_65)
(= src_reg_17_16 src_reg_17_66)
(= src_reg_17_17 src_reg_17_67)
(= src_reg_17_18 src_reg_17_68)
(= src_reg_17_19 src_reg_17_69)
(= src_reg_17_20 src_reg_17_70)
(= src_reg_17_21 src_reg_17_71)
(= src_reg_17_22 src_reg_17_72)
(= src_reg_17_23 src_reg_17_73)
(= src_reg_17_24 src_reg_17_74)
(= src_reg_17_25 src_reg_17_75)
(= src_reg_17_26 src_reg_17_76)
(= src_reg_17_27 src_reg_17_77)
(= #x00000001 dst_reg_17_50)
(= dst_reg_17_1 dst_reg_17_51)
(= dst_reg_17_2 dst_reg_17_52)
(= dst_reg_17_3 dst_reg_17_53)
(= and.i.i.i_17_37 dst_reg_17_54)
(= and6.i.i.i_17_39 dst_reg_17_55)
(= dst_reg_17_6 dst_reg_17_56)
(= dst_reg_17_7 dst_reg_17_57)
(= #x0000000000000000 dst_reg_17_58)
(= dst_reg_17_9 dst_reg_17_59)
(= dst_reg_17_10 dst_reg_17_60)
(= dst_reg_17_11 dst_reg_17_61)
(= dst_reg_17_12 dst_reg_17_62)
(= dst_reg_17_13 dst_reg_17_63)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= #x0000000000000000 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= and6.i.i_17_46 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[handlePhiNodeSetupBitVecs] valueI:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i.i_coerce_reg_to_size.exit.i_17_79
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_17_79
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_17_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i.i_17_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i.i_17_80
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i.i_17_48
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_17_79
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))

-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_17_80
[handleStoreInst] BVToStore: storemerge.i.i_17_80
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(48)
[handleStoreInst] definingMemoryAccess: 48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i.i_17_82
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i.i_17_82
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleLoadInst] (= dst_reg_17_58 i27.i.i_17_82)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:3
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_17_82
[handleStoreInst] BVToStore: i27.i.i_17_82
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(48)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_56 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i.i_17_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_17_80
[handleStoreInst] BVToStore: storemerge.i.i_17_80
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_17_31
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i6.i_17_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i6.i_17_84
[handleBinaryOperatorInst] AND instruction
(= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_17_33
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_17_32
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i13.i_17_85
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i13.i_17_85
[handleBinaryOperatorInst] XOR instruction
(= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i13.i_17_85
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i15.i_17_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i15.i_17_87
[handleICmpInst] (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:6
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_17_32
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i16.i_17_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i16.i_17_89
[handleBinaryOperatorInst] AND instruction
(= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_17_33
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i17.i_17_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i17.i_17_91
[handleBinaryOperatorInst] AND instruction
(= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_17_87
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i16.i_17_89
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0_17_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0_17_93
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_17_87
[handleSelectInst] z3ExprSelectOp2: and6.i16.i_17_89
[handleSelectInst] z3ExprSelectOp3: #x0000000000000000
[handleSelectInst] z3ExprRes: src_reg1.sroa.17.0_17_93
[handleSelectInst](ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_17_87
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i17.i_17_91
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i20.i_17_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i20.i_17_95
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_17_87
[handleSelectInst] z3ExprSelectOp2: and8.i17.i_17_91
[handleSelectInst] z3ExprSelectOp3: #x00000000ffffffff
[handleSelectInst] z3ExprRes: storemerge.i20.i_17_95
[handleSelectInst](ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_17_84
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_17_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_17_97
[handleICmpInst] (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_17_93
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_17_95
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i.not_17_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i.not_17_98
[handleICmpInst] (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_17_93
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_17_95
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_17_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_17_99
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_50 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i.i.repack, dst_reg, [5, 0]
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] definingMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}

-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_60 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_17_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_17_39
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i25.i_17_109
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i25.i_17_109
[handleICmpInst] (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %tobool.not.i25.i, label %if.then166.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then166.i
=========================
-------------------
  %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_17_37
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_17_30
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and170.i_17_110
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and170.i_17_110
[handleBinaryOperatorInst] AND instruction
(= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
-------------------
  store i64 %and170.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_17_110
[handleStoreInst] BVToStore: and170.i_17_110
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_17_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %and170.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_17_110
[handleStoreInst] BVToStore: and170.i_17_110
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_17_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_17_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %and170.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_17_110
[handleStoreInst] BVToStore: and170.i_17_110
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_17_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %and170.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_17_110
[handleStoreInst] BVToStore: and170.i_17_110
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_17_110 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end171.i
=========================
-------------------
  %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_17_39
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_17_37
[getBitVecSingValType]   %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i115.i_17_112
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i115.i_17_112
[handleBinaryOperatorInst] OR instruction
(= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
-------------------
  %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_17_31
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_17_30
[getBitVecSingValType]   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or3.i.i_17_113
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or3.i.i_17_113
[handleBinaryOperatorInst] OR instruction
(= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
-------------------
  %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_17_37
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_17_30
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i116.i_17_114
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i116.i_17_114
[handleBinaryOperatorInst] AND instruction
(= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
-------------------
  %and8.i117.i = and i64 %or.i115.i, %or3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
[handleBinaryOperatorInst] op1Val:   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType]   %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i115.i_17_112
[getBitVecSingValType]   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i.i_17_113
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i117.i_17_115
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i117.i_17_115
[handleBinaryOperatorInst] AND instruction
(= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
-------------------
  %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[handleBinaryOperatorInst] op1Val:   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_17_115
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and9.i.i_17_116
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and9.i.i_17_116
[handleBinaryOperatorInst] XOR instruction
(= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
-------------------
  store i64 %and.i116.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[handleStoreInst] BVToStore: and.i116.i_17_114
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_17_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %and9.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and9.i.i_17_116
[handleStoreInst] BVToStore: and9.i.i_17_116
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and9.i.i_17_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[handleStoreInst] BVToStore: and.i116.i_17_114
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_17_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  %cmp182.i = icmp ult i64 %storemerge.i.i, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_17_80
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_17_95
[getBitVecSingValType]   %cmp182.i = icmp ult i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp182.i_17_117
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp182.i_17_117
[handleICmpInst] (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:6
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 25 = MemoryDef(24)
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleSelectInst]SelectMap:
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp182.i = icmp ult i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp182.i_17_117
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_17_80
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_17_95
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond184.i_17_118
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond184.i_17_118
[handleSelectInst] z3ExprSelectOp1: cmp182.i_17_117
[handleSelectInst] z3ExprSelectOp2: storemerge.i.i_17_80
[handleSelectInst] z3ExprSelectOp3: storemerge.i20.i_17_95
[handleSelectInst] z3ExprRes: cond184.i_17_118
[handleSelectInst](ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
-------------------
  store i64 %cond184.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_17_118
[handleStoreInst] BVToStore: cond184.i_17_118
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond184.i_17_118 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  %cmp187.i = icmp slt i64 %i27.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_17_82
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp187.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp187.i_17_120
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp187.i_17_120
[handleICmpInst] (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:8
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %..i = select i1 %cmp187.i, i64 -9223372036854775808, i64 %and.i116.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 26 = MemoryDef(25)
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 

[handleSelectInst]SelectMap:
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp187.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp187.i_17_120
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[getBitVecSingValType]   %..i = select i1 %cmp187.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: ..i_17_122
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] ..i_17_122
[handleSelectInst] z3ExprSelectOp1: cmp187.i_17_120
[handleSelectInst] z3ExprSelectOp2: #x8000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i116.i_17_114
[handleSelectInst] z3ExprRes: ..i_17_122
[handleSelectInst](ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
-------------------
  %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 26 = MemoryDef(25)
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 

[handleSelectInst]SelectMap:
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp187.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp187.i_17_120
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_17_118
[getBitVecSingValType]   %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .cond184.i_17_124
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .cond184.i_17_124
[handleSelectInst] z3ExprSelectOp1: cmp187.i_17_120
[handleSelectInst] z3ExprSelectOp2: #x7fffffffffffffff
[handleSelectInst] z3ExprSelectOp3: cond184.i_17_118
[handleSelectInst] z3ExprRes: .cond184.i_17_124
[handleSelectInst](ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
-------------------
  store i64 %..i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %..i = select i1 %cmp187.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] ..i_17_122
[handleStoreInst] BVToStore: ..i_17_122
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_17_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ ..i_17_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}

-------------------
  store i64 %.cond184.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_17_124
[handleStoreInst] BVToStore: .cond184.i_17_124
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_17_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .cond184.i_17_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %and.i116.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[handleStoreInst] BVToStore: and.i116.i_17_114
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ ..i_17_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_17_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %cmp10.i134.i = icmp ult i64 %.cond184.i, %and8.i117.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_17_124
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_17_115
[getBitVecSingValType]   %cmp10.i134.i = icmp ult i64 %.cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp10.i134.i_17_125
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp10.i134.i_17_125
[handleICmpInst] (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:11
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %and8.i117.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 29 = MemoryDef(28)
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleSelectInst]SelectMap:
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp10.i134.i = icmp ult i64 %.cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp10.i134.i_17_125
[getBitVecSingValType]   %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_17_124
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_17_115
[getBitVecSingValType]   %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond14.i135.i_17_126
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond14.i135.i_17_126
[handleSelectInst] z3ExprSelectOp1: cmp10.i134.i_17_125
[handleSelectInst] z3ExprSelectOp2: .cond184.i_17_124
[handleSelectInst] z3ExprSelectOp3: and8.i117.i_17_115
[handleSelectInst] z3ExprRes: cond14.i135.i_17_126
[handleSelectInst](ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
-------------------
  store i64 %cond14.i135.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond14.i135.i_17_126
[handleStoreInst] BVToStore: cond14.i135.i_17_126
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .cond184.i_17_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond14.i135.i_17_126 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_17_114
[handleStoreInst] BVToStore: and.i116.i_17_114
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ and.i116.i_17_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_17_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_17_118
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_17_115
[getBitVecSingValType]   %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i143.i_17_127
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i143.i_17_127
[handleICmpInst] (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:13
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 31 = MemoryDef(30)
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleSelectInst]SelectMap:
cond35.i144.i,cond184.i,and8.i117.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i143.i_17_127
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_17_118
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_17_115
[getBitVecSingValType]   %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i144.i_17_128
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i144.i_17_128
[handleSelectInst] z3ExprSelectOp1: cmp31.i143.i_17_127
[handleSelectInst] z3ExprSelectOp2: cond184.i_17_118
[handleSelectInst] z3ExprSelectOp3: and8.i117.i_17_115
[handleSelectInst] z3ExprRes: cond35.i144.i_17_128
[handleSelectInst](ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_129
[lookInsideStruct] singleValueType:dst_reg_17_129
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_130
[lookInsideStruct] singleValueType:dst_reg_17_130
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_131
[lookInsideStruct] singleValueType:dst_reg_17_131
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_132
[lookInsideStruct] singleValueType:dst_reg_17_132
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_133
[lookInsideStruct] singleValueType:dst_reg_17_133
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_134
[lookInsideStruct] singleValueType:dst_reg_17_134
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_135
[lookInsideStruct] singleValueType:dst_reg_17_135
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_136
[lookInsideStruct] singleValueType:dst_reg_17_136
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_137
[lookInsideStruct] singleValueType:dst_reg_17_137
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_138
[lookInsideStruct] singleValueType:dst_reg_17_138
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_139
[lookInsideStruct] singleValueType:dst_reg_17_139
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_140
[lookInsideStruct] singleValueType:dst_reg_17_140
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_141
[lookInsideStruct] singleValueType:dst_reg_17_141
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_142
[lookInsideStruct] singleValueType:dst_reg_17_142
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_143
[lookInsideStruct] singleValueType:src_reg_17_143
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_144
[lookInsideStruct] singleValueType:src_reg_17_144
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_145
[lookInsideStruct] singleValueType:src_reg_17_145
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_146
[lookInsideStruct] singleValueType:src_reg_17_146
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_147
[lookInsideStruct] singleValueType:src_reg_17_147
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_148
[lookInsideStruct] singleValueType:src_reg_17_148
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_149
[lookInsideStruct] singleValueType:src_reg_17_149
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_150
[lookInsideStruct] singleValueType:src_reg_17_150
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_151
[lookInsideStruct] singleValueType:src_reg_17_151
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_152
[lookInsideStruct] singleValueType:src_reg_17_152
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_153
[lookInsideStruct] singleValueType:src_reg_17_153
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_154
[lookInsideStruct] singleValueType:src_reg_17_154
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_155
[lookInsideStruct] singleValueType:src_reg_17_155
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_156
[lookInsideStruct] singleValueType:src_reg_17_156
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then166.i
[handleMemoryPhiNode] incomingAccessI: 22 = MemoryDef(21)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_64 src_reg_17_143)
(= src_reg_17_65 src_reg_17_144)
(= src_reg_17_66 src_reg_17_145)
(= src_reg_17_67 src_reg_17_146)
(= src_reg_17_68 src_reg_17_147)
(= src_reg_17_69 src_reg_17_148)
(= src_reg_17_70 src_reg_17_149)
(= src_reg_17_71 src_reg_17_150)
(= src_reg_17_72 src_reg_17_151)
(= src_reg_17_73 src_reg_17_152)
(= src_reg_17_74 src_reg_17_153)
(= src_reg_17_75 src_reg_17_154)
(= src_reg_17_76 src_reg_17_155)
(= src_reg_17_77 src_reg_17_156)
(= dst_reg_17_50 dst_reg_17_129)
(= dst_reg_17_51 dst_reg_17_130)
(= dst_reg_17_52 dst_reg_17_131)
(= dst_reg_17_53 dst_reg_17_132)
(= and170.i_17_110 dst_reg_17_133)
(= #x0000000000000000 dst_reg_17_134)
(= and170.i_17_110 dst_reg_17_135)
(= and170.i_17_110 dst_reg_17_136)
(= and170.i_17_110 dst_reg_17_137)
(= storemerge.i.i_17_80 dst_reg_17_138)
(= dst_reg_17_60 dst_reg_17_139)
(= dst_reg_17_61 dst_reg_17_140)
(= dst_reg_17_62 dst_reg_17_141)
(= dst_reg_17_63 dst_reg_17_142)
]
[handleMemoryPhiNode] incomingBBI: if.end171.i
[handleMemoryPhiNode] incomingAccessI: 31 = MemoryDef(30)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_64 src_reg_17_143)
(= src_reg_17_65 src_reg_17_144)
(= src_reg_17_66 src_reg_17_145)
(= src_reg_17_67 src_reg_17_146)
(= src_reg_17_68 src_reg_17_147)
(= src_reg_17_69 src_reg_17_148)
(= src_reg_17_70 src_reg_17_149)
(= src_reg_17_71 src_reg_17_150)
(= src_reg_17_72 src_reg_17_151)
(= src_reg_17_73 src_reg_17_152)
(= src_reg_17_74 src_reg_17_153)
(= src_reg_17_75 src_reg_17_154)
(= src_reg_17_76 src_reg_17_155)
(= src_reg_17_77 src_reg_17_156)
(= dst_reg_17_50 dst_reg_17_129)
(= dst_reg_17_51 dst_reg_17_130)
(= dst_reg_17_52 dst_reg_17_131)
(= dst_reg_17_53 dst_reg_17_132)
(= and.i116.i_17_114 dst_reg_17_133)
(= and9.i.i_17_116 dst_reg_17_134)
(= and.i116.i_17_114 dst_reg_17_135)
(= cond14.i135.i_17_126 dst_reg_17_136)
(= and.i116.i_17_114 dst_reg_17_137)
(= cond184.i_17_118 dst_reg_17_138)
(= dst_reg_17_60 dst_reg_17_139)
(= dst_reg_17_61 dst_reg_17_140)
(= dst_reg_17_62 dst_reg_17_141)
(= dst_reg_17_63 dst_reg_17_142)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.end171.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and.i116.i_17_114 dst_reg_17_133)
  (= and9.i.i_17_116 dst_reg_17_134)
  (= and.i116.i_17_114 dst_reg_17_135)
  (= cond14.i135.i_17_126 dst_reg_17_136)
  (= and.i116.i_17_114 dst_reg_17_137)
  (= cond184.i_17_118 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.then166.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and170.i_17_110 dst_reg_17_133)
  (= #x0000000000000000 dst_reg_17_134)
  (= and170.i_17_110 dst_reg_17_135)
  (= and170.i_17_110 dst_reg_17_136)
  (= and170.i_17_110 dst_reg_17_137)
  (= storemerge.i.i_17_80 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= #x0000000000000000 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= and6.i.i_17_46 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
-------------------
  %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
[handlePhiNodeSetupBitVecs] valueI:   %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
[getBool] returning unique bool w/ prefix: if.end171.i_if.then308.i_17_157
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end171.i_if.then308.i_17_157
[handlePhiNodeSetupBitVecs] valueI:   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBool] returning unique bool w/ prefix: if.then166.i_if.then308.i_17_158
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then166.i_if.then308.i_17_158
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge : [<cond35.i144.i, if.end171.i>, <and170.i, if.then166.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then166.i, if.then308.i>: if.then166.i_if.then308.i_17_158
<if.end171.i, if.then308.i>: if.end171.i_if.then308.i_17_157
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_17_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[getBitVecSingValType]   %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge_17_159
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge_17_159
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i144.i_17_128
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end171.i_if.then308.i_17_157
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
[getBitVecSingValType]   %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_17_110
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then166.i_if.then308.i_17_158
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))

-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge_17_159
[handleStoreInst] BVToStore: storemerge_17_159
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(46)
[handleStoreInst] definingMemoryAccess: 46 = MemoryPhi({if.then166.i,22},{if.end171.i,31})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_138 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge_17_159 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 46 = MemoryPhi({if.then166.i,22},{if.end171.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i298.i_17_160
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i298.i_17_160
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleLoadInst] (= dst_reg_17_133 i18.i298.i_17_160)
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.then308.i, Size:3
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 46 = MemoryPhi({if.then166.i,22},{if.end171.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i300.i_17_161
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i300.i_17_161
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleLoadInst] (= dst_reg_17_134 i20.i300.i_17_161)
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.then308.i, Size:4
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i298.i_17_160
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i301.i_17_163
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i301.i_17_163
[handleBinaryOperatorInst] AND instruction
(= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i300.i_17_161
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i302.i_17_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i302.i_17_165
[handleBinaryOperatorInst] AND instruction
(= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_17_163
[handleStoreInst] BVToStore: and.i.i301.i_17_163
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(46)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_133 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i301.i_17_163 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_17_165
[handleStoreInst] BVToStore: and6.i.i302.i_17_165
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i302.i_17_165 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 46 = MemoryPhi({if.then166.i,22},{if.end171.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i306.i_17_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i306.i_17_166
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleLoadInst] (= dst_reg_17_137 i23.i306.i_17_166)
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.then308.i, Size:7
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 32 = MemoryDef(46)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i308.i_17_167
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i308.i_17_167
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleLoadInst] (= storemerge_17_159 i24.i308.i_17_167)
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.then308.i, Size:8
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_17_167
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_17_166
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i309.i_17_168
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i309.i_17_168
[handleBinaryOperatorInst] XOR instruction
(= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i309.i_17_168
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i311.i_17_170
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i311.i_17_170
[handleICmpInst] (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))

-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_17_166
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i312.i_17_172
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i312.i_17_172
[handleBinaryOperatorInst] AND instruction
(= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i312.i_17_172
[handleStoreInst] BVToStore: and6.i312.i_17_172
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_137 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i312.i_17_172 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_17_167
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i313.i_17_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i313.i_17_174
[handleBinaryOperatorInst] AND instruction
(= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_137 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_176
[lookInsideStruct] singleValueType:dst_reg_17_176
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_177
[lookInsideStruct] singleValueType:dst_reg_17_177
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_178
[lookInsideStruct] singleValueType:dst_reg_17_178
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_179
[lookInsideStruct] singleValueType:dst_reg_17_179
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_180
[lookInsideStruct] singleValueType:dst_reg_17_180
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_181
[lookInsideStruct] singleValueType:dst_reg_17_181
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_182
[lookInsideStruct] singleValueType:dst_reg_17_182
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_183
[lookInsideStruct] singleValueType:dst_reg_17_183
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_184
[lookInsideStruct] singleValueType:dst_reg_17_184
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_185
[lookInsideStruct] singleValueType:dst_reg_17_185
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_186
[lookInsideStruct] singleValueType:dst_reg_17_186
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_187
[lookInsideStruct] singleValueType:dst_reg_17_187
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_188
[lookInsideStruct] singleValueType:dst_reg_17_188
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_189
[lookInsideStruct] singleValueType:dst_reg_17_189
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_190
[lookInsideStruct] singleValueType:src_reg_17_190
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_191
[lookInsideStruct] singleValueType:src_reg_17_191
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_192
[lookInsideStruct] singleValueType:src_reg_17_192
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_193
[lookInsideStruct] singleValueType:src_reg_17_193
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_194
[lookInsideStruct] singleValueType:src_reg_17_194
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_195
[lookInsideStruct] singleValueType:src_reg_17_195
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_196
[lookInsideStruct] singleValueType:src_reg_17_196
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_197
[lookInsideStruct] singleValueType:src_reg_17_197
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_198
[lookInsideStruct] singleValueType:src_reg_17_198
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_199
[lookInsideStruct] singleValueType:src_reg_17_199
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_200
[lookInsideStruct] singleValueType:src_reg_17_200
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_201
[lookInsideStruct] singleValueType:src_reg_17_201
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_202
[lookInsideStruct] singleValueType:src_reg_17_202
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_203
[lookInsideStruct] singleValueType:src_reg_17_203
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i314.i
[handleMemoryPhiNode] incomingAccessI: 35 = MemoryDef(34)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_143 src_reg_17_190)
(= src_reg_17_144 src_reg_17_191)
(= src_reg_17_145 src_reg_17_192)
(= src_reg_17_146 src_reg_17_193)
(= src_reg_17_147 src_reg_17_194)
(= src_reg_17_148 src_reg_17_195)
(= src_reg_17_149 src_reg_17_196)
(= src_reg_17_150 src_reg_17_197)
(= src_reg_17_151 src_reg_17_198)
(= src_reg_17_152 src_reg_17_199)
(= src_reg_17_153 src_reg_17_200)
(= src_reg_17_154 src_reg_17_201)
(= src_reg_17_155 src_reg_17_202)
(= src_reg_17_156 src_reg_17_203)
(= dst_reg_17_129 dst_reg_17_176)
(= dst_reg_17_130 dst_reg_17_177)
(= dst_reg_17_131 dst_reg_17_178)
(= dst_reg_17_132 dst_reg_17_179)
(= and.i.i301.i_17_163 dst_reg_17_180)
(= and6.i.i302.i_17_165 dst_reg_17_181)
(= dst_reg_17_135 dst_reg_17_182)
(= dst_reg_17_136 dst_reg_17_183)
(= and6.i312.i_17_172 dst_reg_17_184)
(= storemerge_17_159 dst_reg_17_185)
(= dst_reg_17_139 dst_reg_17_186)
(= dst_reg_17_140 dst_reg_17_187)
(= dst_reg_17_141 dst_reg_17_188)
(= dst_reg_17_142 dst_reg_17_189)
]
[handleMemoryPhiNode] incomingBBI: if.else.i315.i
[handleMemoryPhiNode] incomingAccessI: 36 = MemoryDef(34)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_143 src_reg_17_190)
(= src_reg_17_144 src_reg_17_191)
(= src_reg_17_145 src_reg_17_192)
(= src_reg_17_146 src_reg_17_193)
(= src_reg_17_147 src_reg_17_194)
(= src_reg_17_148 src_reg_17_195)
(= src_reg_17_149 src_reg_17_196)
(= src_reg_17_150 src_reg_17_197)
(= src_reg_17_151 src_reg_17_198)
(= src_reg_17_152 src_reg_17_199)
(= src_reg_17_153 src_reg_17_200)
(= src_reg_17_154 src_reg_17_201)
(= src_reg_17_155 src_reg_17_202)
(= src_reg_17_156 src_reg_17_203)
(= dst_reg_17_129 dst_reg_17_176)
(= dst_reg_17_130 dst_reg_17_177)
(= dst_reg_17_131 dst_reg_17_178)
(= dst_reg_17_132 dst_reg_17_179)
(= and.i.i301.i_17_163 dst_reg_17_180)
(= and6.i.i302.i_17_165 dst_reg_17_181)
(= dst_reg_17_135 dst_reg_17_182)
(= dst_reg_17_136 dst_reg_17_183)
(= #x0000000000000000 dst_reg_17_184)
(= storemerge_17_159 dst_reg_17_185)
(= dst_reg_17_139 dst_reg_17_186)
(= dst_reg_17_140 dst_reg_17_187)
(= dst_reg_17_141 dst_reg_17_188)
(= dst_reg_17_142 dst_reg_17_189)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_17_143 src_reg_17_190)
  (= src_reg_17_144 src_reg_17_191)
  (= src_reg_17_145 src_reg_17_192)
  (= src_reg_17_146 src_reg_17_193)
  (= src_reg_17_147 src_reg_17_194)
  (= src_reg_17_148 src_reg_17_195)
  (= src_reg_17_149 src_reg_17_196)
  (= src_reg_17_150 src_reg_17_197)
  (= src_reg_17_151 src_reg_17_198)
  (= src_reg_17_152 src_reg_17_199)
  (= src_reg_17_153 src_reg_17_200)
  (= src_reg_17_154 src_reg_17_201)
  (= src_reg_17_155 src_reg_17_202)
  (= src_reg_17_156 src_reg_17_203)
  (= dst_reg_17_129 dst_reg_17_176)
  (= dst_reg_17_130 dst_reg_17_177)
  (= dst_reg_17_131 dst_reg_17_178)
  (= dst_reg_17_132 dst_reg_17_179)
  (= and.i.i301.i_17_163 dst_reg_17_180)
  (= and6.i.i302.i_17_165 dst_reg_17_181)
  (= dst_reg_17_135 dst_reg_17_182)
  (= dst_reg_17_136 dst_reg_17_183)
  (= #x0000000000000000 dst_reg_17_184)
  (= storemerge_17_159 dst_reg_17_185)
  (= dst_reg_17_139 dst_reg_17_186)
  (= dst_reg_17_140 dst_reg_17_187)
  (= dst_reg_17_141 dst_reg_17_188)
  (= dst_reg_17_142 dst_reg_17_189)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_17_143 src_reg_17_190)
  (= src_reg_17_144 src_reg_17_191)
  (= src_reg_17_145 src_reg_17_192)
  (= src_reg_17_146 src_reg_17_193)
  (= src_reg_17_147 src_reg_17_194)
  (= src_reg_17_148 src_reg_17_195)
  (= src_reg_17_149 src_reg_17_196)
  (= src_reg_17_150 src_reg_17_197)
  (= src_reg_17_151 src_reg_17_198)
  (= src_reg_17_152 src_reg_17_199)
  (= src_reg_17_153 src_reg_17_200)
  (= src_reg_17_154 src_reg_17_201)
  (= src_reg_17_155 src_reg_17_202)
  (= src_reg_17_156 src_reg_17_203)
  (= dst_reg_17_129 dst_reg_17_176)
  (= dst_reg_17_130 dst_reg_17_177)
  (= dst_reg_17_131 dst_reg_17_178)
  (= dst_reg_17_132 dst_reg_17_179)
  (= and.i.i301.i_17_163 dst_reg_17_180)
  (= and6.i.i302.i_17_165 dst_reg_17_181)
  (= dst_reg_17_135 dst_reg_17_182)
  (= dst_reg_17_136 dst_reg_17_183)
  (= and6.i312.i_17_172 dst_reg_17_184)
  (= storemerge_17_159 dst_reg_17_185)
  (= dst_reg_17_139 dst_reg_17_186)
  (= dst_reg_17_140 dst_reg_17_187)
  (= dst_reg_17_141 dst_reg_17_188)
  (= dst_reg_17_142 dst_reg_17_189)
<if.end171.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and.i116.i_17_114 dst_reg_17_133)
  (= and9.i.i_17_116 dst_reg_17_134)
  (= and.i116.i_17_114 dst_reg_17_135)
  (= cond14.i135.i_17_126 dst_reg_17_136)
  (= and.i116.i_17_114 dst_reg_17_137)
  (= cond184.i_17_118 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.then166.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and170.i_17_110 dst_reg_17_133)
  (= #x0000000000000000 dst_reg_17_134)
  (= and170.i_17_110 dst_reg_17_135)
  (= and170.i_17_110 dst_reg_17_136)
  (= and170.i_17_110 dst_reg_17_137)
  (= storemerge.i.i_17_80 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= #x0000000000000000 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= and6.i.i_17_46 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
[handlePhiNodeSetupBitVecs] valueI:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<cond35.i144.i, if.end171.i>, <and170.i, if.then166.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
<if.then166.i, if.then308.i>: if.then166.i_if.then308.i_17_158
<if.end171.i, if.then308.i>: if.end171.i_if.then308.i_17_157
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_17_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i316.i_17_206
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i313.i_17_174
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[handleStoreInst] BVToStore: storemerge.i316.i_17_206
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(47)
[handleStoreInst] definingMemoryAccess: 47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_185 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i317.i_17_208
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i317.i_17_208
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleLoadInst] (= dst_reg_17_184 i27.i317.i_17_208)
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:3
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_17_208
[handleStoreInst] BVToStore: i27.i317.i_17_208
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(47)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_182 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_17_208 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[handleStoreInst] BVToStore: storemerge.i316.i_17_206
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_183 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_17_208
[handleStoreInst] BVToStore: i27.i317.i_17_208
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i317.i_17_208 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_17_208 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[handleStoreInst] BVToStore: storemerge.i316.i_17_206
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[handleStoreInst] BVToStore: storemerge.i316.i_17_206
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_17_206 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_17_208
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_17_206
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_17_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_17_209
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_17_209
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_17_211
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_17_211
[handleICmpInst] (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_17_209
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_17_213
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_17_213
[handleICmpInst] (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_17_209
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_17_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_17_215
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_17_213
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_17_215
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_17_209
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_17_216
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_17_216
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_17_213
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_17_215
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_17_209
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_17_216
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_17_213
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_17_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_17_219
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_17_213
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_17_219
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_17_216
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_17_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_17_221
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_17_219
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_17_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_17_223
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_17_216
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_17_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_17_225
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_17_221
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_17_225
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_17_216
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_17_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_17_226
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_17_221
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_17_225
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_17_216
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_17_226
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_17_221
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_17_223
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_17_219
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_17_227
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_17_227
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_17_221
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_17_223
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_17_219
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_17_227
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_17_226
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_17_229
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_17_229
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
  (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
  (= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
  (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_17_227
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_17_231
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_17_231
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_17_226
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_17_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_17_233
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_17_233
   (bvshl word.addr.1.i.i.i.i.i_17_226 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_17_229
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_17_233
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_17_226
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_17_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_17_234
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_17_229
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_17_233
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_17_226
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_17_234
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233)
     (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond14.i135.i,.cond184.i,and8.i117.i
.cond184.i,,cond184.i
..i,,and.i116.i
cond184.i,storemerge.i.i,storemerge.i20.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_17_229
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_17_231
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_17_227
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_17_235
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_17_235
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_17_229
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_17_231
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_17_227
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_17_235
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231)
     (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_17_234
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_17_237
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_17_237
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_17_234 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= tobool14.not.i.i.i.i.i_17_237 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
  (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
  (= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
  (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
  (= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 #xfffffff8))
  (= shl11.i.i.i.i.i_17_233
   (bvshl word.addr.1.i.i.i.i.i_17_226 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233)
     (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231)
     (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))
  (ite (bvult word.addr.2.i.i.i.i.i_17_234 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= tobool14.not.i.i.i.i.i_17_237 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_17_235
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_17_239
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_17_239
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_17_239 (bvadd num.2.i.i.i.i.i_17_235 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_17_234
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_17_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_17_241
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_17_241
   (bvshl word.addr.2.i.i.i.i.i_17_234 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_17_237
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_17_241
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_17_234
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_17_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_17_242
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_17_237
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_17_241
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_17_234
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_17_242
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= word.addr.3.i.i.i.i.i_17_242 shl17.i.i.i.i.i_17_241)
     (= word.addr.3.i.i.i.i.i_17_242 word.addr.2.i.i.i.i.i_17_234))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_17_237
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_17_239
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_17_235
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_17_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_17_243
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_17_237
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_17_239
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_17_235
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_17_243
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= num.3.i.i.i.i.i_17_243 sub16.i.i.i.i.i_17_239)
     (= num.3.i.i.i.i.i_17_243 num.2.i.i.i.i.i_17_235))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_17_242
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_17_245
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_17_245
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_17_242 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= tobool20.not.i.i.i.i.i_17_245 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
  (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
  (= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
  (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
  (= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 #xfffffff8))
  (= shl11.i.i.i.i.i_17_233
   (bvshl word.addr.1.i.i.i.i.i_17_226 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233)
     (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231)
     (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))
  (ite (bvult word.addr.2.i.i.i.i.i_17_234 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= tobool14.not.i.i.i.i.i_17_237 #b0))
  (= sub16.i.i.i.i.i_17_239 (bvadd num.2.i.i.i.i.i_17_235 #xfffffffc))
  (= shl17.i.i.i.i.i_17_241
   (bvshl word.addr.2.i.i.i.i.i_17_234 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= word.addr.3.i.i.i.i.i_17_242 shl17.i.i.i.i.i_17_241)
     (= word.addr.3.i.i.i.i.i_17_242 word.addr.2.i.i.i.i.i_17_234))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= num.3.i.i.i.i.i_17_243 sub16.i.i.i.i.i_17_239)
     (= num.3.i.i.i.i.i_17_243 num.2.i.i.i.i.i_17_235))
  (ite (bvult word.addr.3.i.i.i.i.i_17_242 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= tobool20.not.i.i.i.i.i_17_245 #b0))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_17_243
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_17_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_17_247
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_17_247 (bvadd num.3.i.i.i.i.i_17_243 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_17_242
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_17_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_17_249
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_17_249
   (bvshl word.addr.3.i.i.i.i.i_17_242 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_17_245
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_17_249
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_17_242
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_17_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_17_250
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_17_245
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_17_249
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_17_242
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_17_250
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= word.addr.4.i.i.i.i.i_17_250 shl23.i.i.i.i.i_17_249)
     (= word.addr.4.i.i.i.i.i_17_250 word.addr.3.i.i.i.i.i_17_242))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_17_245
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_17_247
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_17_243
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_17_251
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_17_251
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_17_245
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_17_247
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_17_243
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_17_251
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= num.4.i.i.i.i.i_17_251 sub22.i.i.i.i.i_17_247)
     (= num.4.i.i.i.i.i_17_251 num.3.i.i.i.i.i_17_243))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_17_250
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_17_253
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_17_253
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_17_253
   (bvlshr word.addr.4.i.i.i.i.i_17_250 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_17_253
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_17_254
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_17_254
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_17_254
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_17_253))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_17_251
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_17_254
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_17_255
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_17_255
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_17_255 (bvadd num.4.i.i.i.i.i_17_251 i.i.i.i.i.i.neg_17_254))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_17_255
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_17_257
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_17_257
[handleBinaryOperatorInst] AND instruction
(= phi.bo_17_257 (bvand add.i.i.i335.i_17_255 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, coerce_reg_to_size.exit320.i>, ]
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<cond35.i144.i, if.end171.i>, <and170.i, if.then166.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
<if.then166.i, if.then308.i>: if.then166.i_if.then308.i_17_158
<if.end171.i, if.then308.i>: if.end171.i_if.then308.i_17_157
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_17_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_17_260
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_17_260
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_17_257
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
    (= retval.0.i.i.i.i_17_260 phi.bo_17_257))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
    (= retval.0.i.i.i.i_17_260 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
    (= retval.0.i.i.i.i_17_260 phi.bo_17_257))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
    (= retval.0.i.i.i.i_17_260 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_17_260
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_17_263
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_17_263
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_17_260 #x0000003f)
     (= cmp.i.i.i_17_263 #b1)
     (= cmp.i.i.i_17_263 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
  (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
  (= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
  (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
  (= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 #xfffffff8))
  (= shl11.i.i.i.i.i_17_233
   (bvshl word.addr.1.i.i.i.i.i_17_226 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233)
     (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231)
     (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))
  (ite (bvult word.addr.2.i.i.i.i.i_17_234 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= tobool14.not.i.i.i.i.i_17_237 #b0))
  (= sub16.i.i.i.i.i_17_239 (bvadd num.2.i.i.i.i.i_17_235 #xfffffffc))
  (= shl17.i.i.i.i.i_17_241
   (bvshl word.addr.2.i.i.i.i.i_17_234 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= word.addr.3.i.i.i.i.i_17_242 shl17.i.i.i.i.i_17_241)
     (= word.addr.3.i.i.i.i.i_17_242 word.addr.2.i.i.i.i.i_17_234))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= num.3.i.i.i.i.i_17_243 sub16.i.i.i.i.i_17_239)
     (= num.3.i.i.i.i.i_17_243 num.2.i.i.i.i.i_17_235))
  (ite (bvult word.addr.3.i.i.i.i.i_17_242 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= tobool20.not.i.i.i.i.i_17_245 #b0))
  (= sub22.i.i.i.i.i_17_247 (bvadd num.3.i.i.i.i.i_17_243 #x000000fe))
  (= shl23.i.i.i.i.i_17_249
   (bvshl word.addr.3.i.i.i.i.i_17_242 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= word.addr.4.i.i.i.i.i_17_250 shl23.i.i.i.i.i_17_249)
     (= word.addr.4.i.i.i.i.i_17_250 word.addr.3.i.i.i.i.i_17_242))
  (ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= num.4.i.i.i.i.i_17_251 sub22.i.i.i.i.i_17_247)
     (= num.4.i.i.i.i.i_17_251 num.3.i.i.i.i.i_17_243))
  (= word.addr.4.lobit.i.i.i.i.i.neg_17_253
   (bvlshr word.addr.4.i.i.i.i.i_17_250 #x000000000000003f))
  (= i.i.i.i.i.i.neg_17_254
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_17_253))
  (= add.i.i.i335.i_17_255 (bvadd num.4.i.i.i.i.i_17_251 i.i.i.i.i.i.neg_17_254))
  (= phi.bo_17_257 (bvand add.i.i.i335.i_17_255 #x000000ff))
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
    (= retval.0.i.i.i.i_17_260 phi.bo_17_257))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
    (= retval.0.i.i.i.i_17_260 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_17_260 #x0000003f)
     (= cmp.i.i.i_17_263 #b1)
     (= cmp.i.i.i_17_263 #b0))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_17_260
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_17_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_17_264
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_17_264 ((_ zero_extend 32) retval.0.i.i.i.i_17_260))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_17_264
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_17_266
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_17_266
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_17_266 (bvshl #xffffffffffffffff sh_prom.i.i.i_17_264))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_17_266
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_17_268
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_17_268
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_17_268 (bvxor notmask.i.i.i_17_266 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_17_266
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_17_208
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_17_269
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_17_269
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_17_269 (bvand notmask.i.i.i_17_266 i27.i317.i_17_208))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_17_263
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_17_269
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_17_271
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_17_271
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_17_263
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_17_269
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_17_271
[handleSelectInst](ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.0.0.i.i.i_17_271 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_17_271 and.i.i336.i_17_269))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 42 = MemoryDef(41)
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.3.0.i.i.i,,sub.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
storemerge.i20.i,and8.i17.i,
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond184.i,storemerge.i.i,storemerge.i20.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
..i,,and.i116.i
cond14.i135.i,.cond184.i,and8.i117.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i144.i,cond184.i,and8.i117.i
.cond184.i,,cond184.i
spec.select17.i.i.i.i.i,,
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_17_263
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_17_268
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_17_273
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_17_273
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_17_263
[handleSelectInst] z3ExprSelectOp2: #x00000000ffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_17_268
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_17_273
[handleSelectInst](ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.3.0.i.i.i_17_273 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_17_273 sub.i.i.i_17_268))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_17_271
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_17_163
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_17_274
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_17_274
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_17_274 (bvor retval.sroa.0.0.i.i.i_17_271 and.i.i301.i_17_163))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_17_273
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_17_165
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_17_275
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_17_275
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_17_275 (bvand retval.sroa.3.0.i.i.i_17_273 and6.i.i302.i_17_165))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_17_275
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_17_277
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_17_277
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_17_277 (bvxor and.i1.i.i_17_275 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_17_274
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_17_277
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_17_278
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_17_278
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_17_278 (bvand or.i.i.i_17_274 neg.i.i.i_17_277))
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_17_278
[handleStoreInst] BVToStore: and4.i.i.i_17_278
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_180 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_17_278 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_17_275
[handleStoreInst] BVToStore: and.i1.i.i_17_275
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] definingMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_17_181 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_17_275 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ and.i1.i.i_17_275 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_279
[lookInsideStruct] singleValueType:dst_reg_17_279
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_280
[lookInsideStruct] singleValueType:dst_reg_17_280
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_281
[lookInsideStruct] singleValueType:dst_reg_17_281
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_282
[lookInsideStruct] singleValueType:dst_reg_17_282
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_283
[lookInsideStruct] singleValueType:dst_reg_17_283
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_284
[lookInsideStruct] singleValueType:dst_reg_17_284
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_285
[lookInsideStruct] singleValueType:dst_reg_17_285
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_286
[lookInsideStruct] singleValueType:dst_reg_17_286
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_287
[lookInsideStruct] singleValueType:dst_reg_17_287
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_288
[lookInsideStruct] singleValueType:dst_reg_17_288
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_289
[lookInsideStruct] singleValueType:dst_reg_17_289
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_290
[lookInsideStruct] singleValueType:dst_reg_17_290
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_291
[lookInsideStruct] singleValueType:dst_reg_17_291
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_292
[lookInsideStruct] singleValueType:dst_reg_17_292
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_293
[lookInsideStruct] singleValueType:src_reg_17_293
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_294
[lookInsideStruct] singleValueType:src_reg_17_294
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_295
[lookInsideStruct] singleValueType:src_reg_17_295
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_296
[lookInsideStruct] singleValueType:src_reg_17_296
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_297
[lookInsideStruct] singleValueType:src_reg_17_297
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_298
[lookInsideStruct] singleValueType:src_reg_17_298
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_299
[lookInsideStruct] singleValueType:src_reg_17_299
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_300
[lookInsideStruct] singleValueType:src_reg_17_300
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_301
[lookInsideStruct] singleValueType:src_reg_17_301
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_302
[lookInsideStruct] singleValueType:src_reg_17_302
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_303
[lookInsideStruct] singleValueType:src_reg_17_303
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_304
[lookInsideStruct] singleValueType:src_reg_17_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_305
[lookInsideStruct] singleValueType:src_reg_17_305
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_306
[lookInsideStruct] singleValueType:src_reg_17_306
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
- dst_reg: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 

[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 44 = MemoryDef(43)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ and.i1.i.i_17_275 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ and.i1.i.i_17_275 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_190 src_reg_17_293)
(= src_reg_17_191 src_reg_17_294)
(= src_reg_17_192 src_reg_17_295)
(= src_reg_17_193 src_reg_17_296)
(= src_reg_17_194 src_reg_17_297)
(= src_reg_17_195 src_reg_17_298)
(= src_reg_17_196 src_reg_17_299)
(= src_reg_17_197 src_reg_17_300)
(= src_reg_17_198 src_reg_17_301)
(= src_reg_17_199 src_reg_17_302)
(= src_reg_17_200 src_reg_17_303)
(= src_reg_17_201 src_reg_17_304)
(= src_reg_17_202 src_reg_17_305)
(= src_reg_17_203 src_reg_17_306)
(= dst_reg_17_176 dst_reg_17_279)
(= dst_reg_17_177 dst_reg_17_280)
(= dst_reg_17_178 dst_reg_17_281)
(= dst_reg_17_179 dst_reg_17_282)
(= and4.i.i.i_17_278 dst_reg_17_283)
(= and.i1.i.i_17_275 dst_reg_17_284)
(= i27.i317.i_17_208 dst_reg_17_285)
(= storemerge.i316.i_17_206 dst_reg_17_286)
(= dst_reg_17_184 dst_reg_17_287)
(= storemerge.i316.i_17_206 dst_reg_17_288)
(= dst_reg_17_186 dst_reg_17_289)
(= dst_reg_17_187 dst_reg_17_290)
(= dst_reg_17_188 dst_reg_17_291)
(= dst_reg_17_189 dst_reg_17_292)
]
[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 17 = MemoryDef(16)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_17_64 src_reg_17_293)
(= src_reg_17_65 src_reg_17_294)
(= src_reg_17_66 src_reg_17_295)
(= src_reg_17_67 src_reg_17_296)
(= src_reg_17_68 src_reg_17_297)
(= src_reg_17_69 src_reg_17_298)
(= src_reg_17_70 src_reg_17_299)
(= src_reg_17_71 src_reg_17_300)
(= src_reg_17_72 src_reg_17_301)
(= src_reg_17_73 src_reg_17_302)
(= src_reg_17_74 src_reg_17_303)
(= src_reg_17_75 src_reg_17_304)
(= src_reg_17_76 src_reg_17_305)
(= src_reg_17_77 src_reg_17_306)
(= #x00000001 dst_reg_17_279)
(= dst_reg_17_51 dst_reg_17_280)
(= dst_reg_17_52 dst_reg_17_281)
(= dst_reg_17_53 dst_reg_17_282)
(= #x0000000000000000 dst_reg_17_283)
(= #xffffffffffffffff dst_reg_17_284)
(= #x8000000000000000 dst_reg_17_285)
(= #x7fffffffffffffff dst_reg_17_286)
(= #x0000000000000000 dst_reg_17_287)
(= #xffffffffffffffff dst_reg_17_288)
(= #x00000000 dst_reg_17_289)
(= dst_reg_17_61 dst_reg_17_290)
(= dst_reg_17_62 dst_reg_17_291)
(= dst_reg_17_63 dst_reg_17_292)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_17_190 src_reg_17_293)
  (= src_reg_17_191 src_reg_17_294)
  (= src_reg_17_192 src_reg_17_295)
  (= src_reg_17_193 src_reg_17_296)
  (= src_reg_17_194 src_reg_17_297)
  (= src_reg_17_195 src_reg_17_298)
  (= src_reg_17_196 src_reg_17_299)
  (= src_reg_17_197 src_reg_17_300)
  (= src_reg_17_198 src_reg_17_301)
  (= src_reg_17_199 src_reg_17_302)
  (= src_reg_17_200 src_reg_17_303)
  (= src_reg_17_201 src_reg_17_304)
  (= src_reg_17_202 src_reg_17_305)
  (= src_reg_17_203 src_reg_17_306)
  (= dst_reg_17_176 dst_reg_17_279)
  (= dst_reg_17_177 dst_reg_17_280)
  (= dst_reg_17_178 dst_reg_17_281)
  (= dst_reg_17_179 dst_reg_17_282)
  (= and4.i.i.i_17_278 dst_reg_17_283)
  (= and.i1.i.i_17_275 dst_reg_17_284)
  (= i27.i317.i_17_208 dst_reg_17_285)
  (= storemerge.i316.i_17_206 dst_reg_17_286)
  (= dst_reg_17_184 dst_reg_17_287)
  (= storemerge.i316.i_17_206 dst_reg_17_288)
  (= dst_reg_17_186 dst_reg_17_289)
  (= dst_reg_17_187 dst_reg_17_290)
  (= dst_reg_17_188 dst_reg_17_291)
  (= dst_reg_17_189 dst_reg_17_292)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_17_143 src_reg_17_190)
  (= src_reg_17_144 src_reg_17_191)
  (= src_reg_17_145 src_reg_17_192)
  (= src_reg_17_146 src_reg_17_193)
  (= src_reg_17_147 src_reg_17_194)
  (= src_reg_17_148 src_reg_17_195)
  (= src_reg_17_149 src_reg_17_196)
  (= src_reg_17_150 src_reg_17_197)
  (= src_reg_17_151 src_reg_17_198)
  (= src_reg_17_152 src_reg_17_199)
  (= src_reg_17_153 src_reg_17_200)
  (= src_reg_17_154 src_reg_17_201)
  (= src_reg_17_155 src_reg_17_202)
  (= src_reg_17_156 src_reg_17_203)
  (= dst_reg_17_129 dst_reg_17_176)
  (= dst_reg_17_130 dst_reg_17_177)
  (= dst_reg_17_131 dst_reg_17_178)
  (= dst_reg_17_132 dst_reg_17_179)
  (= and.i.i301.i_17_163 dst_reg_17_180)
  (= and6.i.i302.i_17_165 dst_reg_17_181)
  (= dst_reg_17_135 dst_reg_17_182)
  (= dst_reg_17_136 dst_reg_17_183)
  (= #x0000000000000000 dst_reg_17_184)
  (= storemerge_17_159 dst_reg_17_185)
  (= dst_reg_17_139 dst_reg_17_186)
  (= dst_reg_17_140 dst_reg_17_187)
  (= dst_reg_17_141 dst_reg_17_188)
  (= dst_reg_17_142 dst_reg_17_189)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_17_143 src_reg_17_190)
  (= src_reg_17_144 src_reg_17_191)
  (= src_reg_17_145 src_reg_17_192)
  (= src_reg_17_146 src_reg_17_193)
  (= src_reg_17_147 src_reg_17_194)
  (= src_reg_17_148 src_reg_17_195)
  (= src_reg_17_149 src_reg_17_196)
  (= src_reg_17_150 src_reg_17_197)
  (= src_reg_17_151 src_reg_17_198)
  (= src_reg_17_152 src_reg_17_199)
  (= src_reg_17_153 src_reg_17_200)
  (= src_reg_17_154 src_reg_17_201)
  (= src_reg_17_155 src_reg_17_202)
  (= src_reg_17_156 src_reg_17_203)
  (= dst_reg_17_129 dst_reg_17_176)
  (= dst_reg_17_130 dst_reg_17_177)
  (= dst_reg_17_131 dst_reg_17_178)
  (= dst_reg_17_132 dst_reg_17_179)
  (= and.i.i301.i_17_163 dst_reg_17_180)
  (= and6.i.i302.i_17_165 dst_reg_17_181)
  (= dst_reg_17_135 dst_reg_17_182)
  (= dst_reg_17_136 dst_reg_17_183)
  (= and6.i312.i_17_172 dst_reg_17_184)
  (= storemerge_17_159 dst_reg_17_185)
  (= dst_reg_17_139 dst_reg_17_186)
  (= dst_reg_17_140 dst_reg_17_187)
  (= dst_reg_17_141 dst_reg_17_188)
  (= dst_reg_17_142 dst_reg_17_189)
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_17_64 src_reg_17_293)
  (= src_reg_17_65 src_reg_17_294)
  (= src_reg_17_66 src_reg_17_295)
  (= src_reg_17_67 src_reg_17_296)
  (= src_reg_17_68 src_reg_17_297)
  (= src_reg_17_69 src_reg_17_298)
  (= src_reg_17_70 src_reg_17_299)
  (= src_reg_17_71 src_reg_17_300)
  (= src_reg_17_72 src_reg_17_301)
  (= src_reg_17_73 src_reg_17_302)
  (= src_reg_17_74 src_reg_17_303)
  (= src_reg_17_75 src_reg_17_304)
  (= src_reg_17_76 src_reg_17_305)
  (= src_reg_17_77 src_reg_17_306)
  (= #x00000001 dst_reg_17_279)
  (= dst_reg_17_51 dst_reg_17_280)
  (= dst_reg_17_52 dst_reg_17_281)
  (= dst_reg_17_53 dst_reg_17_282)
  (= #x0000000000000000 dst_reg_17_283)
  (= #xffffffffffffffff dst_reg_17_284)
  (= #x8000000000000000 dst_reg_17_285)
  (= #x7fffffffffffffff dst_reg_17_286)
  (= #x0000000000000000 dst_reg_17_287)
  (= #xffffffffffffffff dst_reg_17_288)
  (= #x00000000 dst_reg_17_289)
  (= dst_reg_17_61 dst_reg_17_290)
  (= dst_reg_17_62 dst_reg_17_291)
  (= dst_reg_17_63 dst_reg_17_292)
<if.end171.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and.i116.i_17_114 dst_reg_17_133)
  (= and9.i.i_17_116 dst_reg_17_134)
  (= and.i116.i_17_114 dst_reg_17_135)
  (= cond14.i135.i_17_126 dst_reg_17_136)
  (= and.i116.i_17_114 dst_reg_17_137)
  (= cond184.i_17_118 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.then166.i, if.then308.i> :
  (= src_reg_17_64 src_reg_17_143)
  (= src_reg_17_65 src_reg_17_144)
  (= src_reg_17_66 src_reg_17_145)
  (= src_reg_17_67 src_reg_17_146)
  (= src_reg_17_68 src_reg_17_147)
  (= src_reg_17_69 src_reg_17_148)
  (= src_reg_17_70 src_reg_17_149)
  (= src_reg_17_71 src_reg_17_150)
  (= src_reg_17_72 src_reg_17_151)
  (= src_reg_17_73 src_reg_17_152)
  (= src_reg_17_74 src_reg_17_153)
  (= src_reg_17_75 src_reg_17_154)
  (= src_reg_17_76 src_reg_17_155)
  (= src_reg_17_77 src_reg_17_156)
  (= dst_reg_17_50 dst_reg_17_129)
  (= dst_reg_17_51 dst_reg_17_130)
  (= dst_reg_17_52 dst_reg_17_131)
  (= dst_reg_17_53 dst_reg_17_132)
  (= and170.i_17_110 dst_reg_17_133)
  (= #x0000000000000000 dst_reg_17_134)
  (= and170.i_17_110 dst_reg_17_135)
  (= and170.i_17_110 dst_reg_17_136)
  (= and170.i_17_110 dst_reg_17_137)
  (= storemerge.i.i_17_80 dst_reg_17_138)
  (= dst_reg_17_60 dst_reg_17_139)
  (= dst_reg_17_61 dst_reg_17_140)
  (= dst_reg_17_62 dst_reg_17_141)
  (= dst_reg_17_63 dst_reg_17_142)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= #x0000000000000000 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_17_64)
  (= src_reg_17_15 src_reg_17_65)
  (= src_reg_17_16 src_reg_17_66)
  (= src_reg_17_17 src_reg_17_67)
  (= src_reg_17_18 src_reg_17_68)
  (= src_reg_17_19 src_reg_17_69)
  (= src_reg_17_20 src_reg_17_70)
  (= src_reg_17_21 src_reg_17_71)
  (= src_reg_17_22 src_reg_17_72)
  (= src_reg_17_23 src_reg_17_73)
  (= src_reg_17_24 src_reg_17_74)
  (= src_reg_17_25 src_reg_17_75)
  (= src_reg_17_26 src_reg_17_76)
  (= src_reg_17_27 src_reg_17_77)
  (= #x00000001 dst_reg_17_50)
  (= dst_reg_17_1 dst_reg_17_51)
  (= dst_reg_17_2 dst_reg_17_52)
  (= dst_reg_17_3 dst_reg_17_53)
  (= and.i.i.i_17_37 dst_reg_17_54)
  (= and6.i.i.i_17_39 dst_reg_17_55)
  (= dst_reg_17_6 dst_reg_17_56)
  (= dst_reg_17_7 dst_reg_17_57)
  (= and6.i.i_17_46 dst_reg_17_58)
  (= dst_reg_17_9 dst_reg_17_59)
  (= dst_reg_17_10 dst_reg_17_60)
  (= dst_reg_17_11 dst_reg_17_61)
  (= dst_reg_17_12 dst_reg_17_62)
  (= dst_reg_17_13 dst_reg_17_63)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_17_44
[handleBranchInst] Edge Assertions:
<entry, if.then.i.i>: (= cmp.i.i_17_44 #b1)
<entry, if.else.i.i>: (= cmp.i.i_17_44 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i.i: (= cmp.i.i_17_44 #b1)
[handleBranchInst] if.else.i.i: (= cmp.i.i_17_44 #b0)
[handleBranchInst] <entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] <entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_17_44 #b1)
[handleBranchInst] coerce_reg_to_size.exit.i: (= cmp.i.i_17_44 #b1)
[handleBranchInst] <if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_17_44 #b1)
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_17_44 #b1)
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_17_44 #b0)
[handleBranchInst] coerce_reg_to_size.exit.i: (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
[handleBranchInst] <if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_17_97
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit.i, land.lhs.true.i>: (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i>: (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] lor.lhs.false20.i: (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i.not_17_98
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.end27.i>: (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i>: (and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end27.i: (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] if.then26.i: (and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.then26.i
  (and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.then26.i
  (and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_17_99
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i>: (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] if.end171.i: (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.end27.i
=========================
-------------------
  %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
-------------------
-------------------
  br i1 %tobool.not.i25.i, label %if.then166.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i25.i_17_109
[handleBranchInst] Edge Assertions:
<if.end27.i, if.then166.i>: (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.end27.i, if.end171.i>: (and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then166.i: (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] if.end171.i: (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] <if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.then166.i
=========================
-------------------
  %and170.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  store i64 %and170.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] if.then308.i: (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] <if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.end171.i
=========================
-------------------
  %or.i115.i = or i64 %and6.i.i.i, %and.i.i.i
-------------------
-------------------
  %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %and.i116.i = and i64 %and.i.i.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %and8.i117.i = and i64 %or.i115.i, %or3.i.i
-------------------
-------------------
  %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
-------------------
-------------------
  store i64 %and.i116.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and9.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %cmp182.i = icmp ult i64 %storemerge.i.i, %storemerge.i20.i
-------------------
-------------------
  %cond184.i = select i1 %cmp182.i, i64 %storemerge.i.i, i64 %storemerge.i20.i
-------------------
-------------------
  store i64 %cond184.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %cmp187.i = icmp slt i64 %i27.i.i, 0
-------------------
-------------------
  %..i = select i1 %cmp187.i, i64 -9223372036854775808, i64 %and.i116.i
-------------------
-------------------
  %.cond184.i = select i1 %cmp187.i, i64 9223372036854775807, i64 %cond184.i
-------------------
-------------------
  store i64 %..i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %.cond184.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %cmp10.i134.i = icmp ult i64 %.cond184.i, %and8.i117.i
-------------------
-------------------
  %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %and8.i117.i
-------------------
-------------------
  store i64 %cond14.i135.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
-------------------
-------------------
  %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] if.then308.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
[handleBranchInst] <if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.then308.i
=========================
-------------------
  %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
-------------------
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i311.i_17_170
[handleBranchInst] Edge Assertions:
<if.then308.i, if.then.i314.i>: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.else.i315.i>: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i314.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] if.else.i315.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handleBranchInst] <if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] <if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] <if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
[handleBranchInst] <if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_17_211
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i>: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
      (a!2 (and (= tobool.not.i.i_17_97 #b0)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!3 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1))
               (and (= cmp24.old.i_17_99 #b0) a!2)
               (and (= tobool.not.i25.i_17_109 #b1)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1)))))
(let ((a!4 (or (and (= cmp.i311.i_17_170 #b0) a!3)
               (and (= cmp.i311.i_17_170 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!4)
      (and (= cmp.i.i.i.i_17_211 #b1) a!4)
      (and (= cmp24.old.i_17_99 #b1) a!2)
      (and (= cmp18.not.i.not_17_98 #b0) a!1)))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
      (a!2 (and (= tobool.not.i.i_17_97 #b0)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!3 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1))
               (and (= cmp24.old.i_17_99 #b0) a!2)
               (and (= tobool.not.i25.i_17_109 #b1)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1)))))
(let ((a!4 (or (and (= cmp.i311.i_17_170 #b0) a!3)
               (and (= cmp.i311.i_17_170 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!4)
      (and (= cmp.i.i.i.i_17_211 #b1) a!4)
      (and (= cmp24.old.i_17_99 #b1) a!2)
      (and (= cmp18.not.i.not_17_98 #b0) a!1)))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
if.then.i.i
=========================
=========================
if.else.i.i
=========================
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (= cmp.i.i_17_44 #b1)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= and6.i.i_17_46 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
phiResolveI (i=1) (=> (= cmp.i.i_17_44 #b0)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= #x0000000000000000 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i.i_coerce_reg_to_size.exit.i_17_78
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_17_44 #b0)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.else.i.i_coerce_reg_to_size.exit.i_17_78 (= cmp.i.i_17_44 #b0))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i.i_coerce_reg_to_size.exit.i_17_79
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_17_44 #b1)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then.i.i_coerce_reg_to_size.exit.i_17_79 (= cmp.i.i_17_44 #b1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
  (=> (= cmp.i.i_17_44 #b1)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= and6.i.i_17_46 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
  (=> (= cmp.i.i_17_44 #b0)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= #x0000000000000000 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_17_78 (= cmp.i.i_17_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_17_79 (= cmp.i.i_17_44 #b1))

=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then166.i
=========================
=========================
if.end171.i
=========================
=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (and (= tobool.not.i25.i_17_109 #b1)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= src_reg_17_64 src_reg_17_143)
         (= src_reg_17_65 src_reg_17_144)
         (= src_reg_17_66 src_reg_17_145)
         (= src_reg_17_67 src_reg_17_146)
         (= src_reg_17_68 src_reg_17_147)
         (= src_reg_17_69 src_reg_17_148)
         (= src_reg_17_70 src_reg_17_149)
         (= src_reg_17_71 src_reg_17_150)
         (= src_reg_17_72 src_reg_17_151)
         (= src_reg_17_73 src_reg_17_152)
         (= src_reg_17_74 src_reg_17_153)
         (= src_reg_17_75 src_reg_17_154)
         (= src_reg_17_76 src_reg_17_155)
         (= src_reg_17_77 src_reg_17_156)
         (= dst_reg_17_50 dst_reg_17_129)
         (= dst_reg_17_51 dst_reg_17_130)
         (= dst_reg_17_52 dst_reg_17_131)
         (= dst_reg_17_53 dst_reg_17_132)
         (= and170.i_17_110 dst_reg_17_133)
         (= #x0000000000000000 dst_reg_17_134)
         (= and170.i_17_110 dst_reg_17_135)
         (= and170.i_17_110 dst_reg_17_136)
         (= and170.i_17_110 dst_reg_17_137)
         (= storemerge.i.i_17_80 dst_reg_17_138)
         (= dst_reg_17_60 dst_reg_17_139)
         (= dst_reg_17_61 dst_reg_17_140)
         (= dst_reg_17_62 dst_reg_17_141)
         (= dst_reg_17_63 dst_reg_17_142)))
phiResolveI (i=1) (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_143)
           (= src_reg_17_65 src_reg_17_144)
           (= src_reg_17_66 src_reg_17_145)
           (= src_reg_17_67 src_reg_17_146)
           (= src_reg_17_68 src_reg_17_147)
           (= src_reg_17_69 src_reg_17_148)
           (= src_reg_17_70 src_reg_17_149)
           (= src_reg_17_71 src_reg_17_150)
           (= src_reg_17_72 src_reg_17_151)
           (= src_reg_17_73 src_reg_17_152)
           (= src_reg_17_74 src_reg_17_153)
           (= src_reg_17_75 src_reg_17_154)
           (= src_reg_17_76 src_reg_17_155)
           (= src_reg_17_77 src_reg_17_156)
           (= dst_reg_17_50 dst_reg_17_129)
           (= dst_reg_17_51 dst_reg_17_130)
           (= dst_reg_17_52 dst_reg_17_131)
           (= dst_reg_17_53 dst_reg_17_132)
           (= and.i116.i_17_114 dst_reg_17_133)
           (= and9.i.i_17_116 dst_reg_17_134)
           (= and.i116.i_17_114 dst_reg_17_135)
           (= cond14.i135.i_17_126 dst_reg_17_136)
           (= and.i116.i_17_114 dst_reg_17_137)
           (= cond184.i_17_118 dst_reg_17_138)
           (= dst_reg_17_60 dst_reg_17_139)
           (= dst_reg_17_61 dst_reg_17_140)
           (= dst_reg_17_62 dst_reg_17_141)
           (= dst_reg_17_63 dst_reg_17_142))))
-------------------
  %storemerge = phi i64 [ %cond35.i144.i, %if.end171.i ], [ %and170.i, %if.then166.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end171.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end171.i_if.then308.i_17_157
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (= if.end171.i_if.then308.i_17_157 a!1))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then166.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then166.i_if.then308.i_17_158
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then166.i_if.then308.i_17_158
   (and (= tobool.not.i25.i_17_109 #b1)
        (= cmp18.not.i.not_17_98 #b1)
        (= tobool.not.i.i_17_97 #b1)
        (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
  (=> (and (= tobool.not.i25.i_17_109 #b1)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= src_reg_17_64 src_reg_17_143)
         (= src_reg_17_65 src_reg_17_144)
         (= src_reg_17_66 src_reg_17_145)
         (= src_reg_17_67 src_reg_17_146)
         (= src_reg_17_68 src_reg_17_147)
         (= src_reg_17_69 src_reg_17_148)
         (= src_reg_17_70 src_reg_17_149)
         (= src_reg_17_71 src_reg_17_150)
         (= src_reg_17_72 src_reg_17_151)
         (= src_reg_17_73 src_reg_17_152)
         (= src_reg_17_74 src_reg_17_153)
         (= src_reg_17_75 src_reg_17_154)
         (= src_reg_17_76 src_reg_17_155)
         (= src_reg_17_77 src_reg_17_156)
         (= dst_reg_17_50 dst_reg_17_129)
         (= dst_reg_17_51 dst_reg_17_130)
         (= dst_reg_17_52 dst_reg_17_131)
         (= dst_reg_17_53 dst_reg_17_132)
         (= and170.i_17_110 dst_reg_17_133)
         (= #x0000000000000000 dst_reg_17_134)
         (= and170.i_17_110 dst_reg_17_135)
         (= and170.i_17_110 dst_reg_17_136)
         (= and170.i_17_110 dst_reg_17_137)
         (= storemerge.i.i_17_80 dst_reg_17_138)
         (= dst_reg_17_60 dst_reg_17_139)
         (= dst_reg_17_61 dst_reg_17_140)
         (= dst_reg_17_62 dst_reg_17_141)
         (= dst_reg_17_63 dst_reg_17_142)))
  (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_143)
           (= src_reg_17_65 src_reg_17_144)
           (= src_reg_17_66 src_reg_17_145)
           (= src_reg_17_67 src_reg_17_146)
           (= src_reg_17_68 src_reg_17_147)
           (= src_reg_17_69 src_reg_17_148)
           (= src_reg_17_70 src_reg_17_149)
           (= src_reg_17_71 src_reg_17_150)
           (= src_reg_17_72 src_reg_17_151)
           (= src_reg_17_73 src_reg_17_152)
           (= src_reg_17_74 src_reg_17_153)
           (= src_reg_17_75 src_reg_17_154)
           (= src_reg_17_76 src_reg_17_155)
           (= src_reg_17_77 src_reg_17_156)
           (= dst_reg_17_50 dst_reg_17_129)
           (= dst_reg_17_51 dst_reg_17_130)
           (= dst_reg_17_52 dst_reg_17_131)
           (= dst_reg_17_53 dst_reg_17_132)
           (= and.i116.i_17_114 dst_reg_17_133)
           (= and9.i.i_17_116 dst_reg_17_134)
           (= and.i116.i_17_114 dst_reg_17_135)
           (= cond14.i135.i_17_126 dst_reg_17_136)
           (= and.i116.i_17_114 dst_reg_17_137)
           (= cond184.i_17_118 dst_reg_17_138)
           (= dst_reg_17_60 dst_reg_17_139)
           (= dst_reg_17_61 dst_reg_17_140)
           (= dst_reg_17_62 dst_reg_17_141)
           (= dst_reg_17_63 dst_reg_17_142))))
  (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (= if.end171.i_if.then308.i_17_157 a!1))
  (= if.then166.i_if.then308.i_17_158
   (and (= tobool.not.i25.i_17_109 #b1)
        (= cmp18.not.i.not_17_98 #b1)
        (= tobool.not.i.i_17_97 #b1)
        (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))

=========================
if.then.i314.i
=========================
=========================
if.else.i315.i
=========================
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b1) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= and6.i312.i_17_172 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
phiResolveI (i=1) (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b0) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= #x0000000000000000 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i315.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
     (and (= cmp.i311.i_17_170 #b0) a!2))))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i314.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
     (and (= cmp.i311.i_17_170 #b1) a!2))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b1) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= and6.i312.i_17_172 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b0) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= #x0000000000000000 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
     (and (= cmp.i311.i_17_170 #b0) a!2))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
     (and (= cmp.i311.i_17_170 #b1) a!2))))

=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b0)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 a!3))))
[handlePhiNodeResolvePathConditions] incomingBlockI coerce_reg_to_size.exit320.i
[handlePhiNodeResolvePathConditions] phiConditionI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b1)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 a!3))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
    (= retval.0.i.i.i.i_17_260 phi.bo_17_257))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
    (= retval.0.i.i.i.i_17_260 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_17_260 #x0000003f)
     (= cmp.i.i.i_17_263 #b1)
     (= cmp.i.i.i_17_263 #b0))
  (= sh_prom.i.i.i_17_264 ((_ zero_extend 32) retval.0.i.i.i.i_17_260))
  (= notmask.i.i.i_17_266 (bvshl #xffffffffffffffff sh_prom.i.i.i_17_264))
  (= sub.i.i.i_17_268 (bvxor notmask.i.i.i_17_266 #xffffffffffffffff))
  (= and.i.i336.i_17_269 (bvand notmask.i.i.i_17_266 i27.i317.i_17_208))
  (ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.0.0.i.i.i_17_271 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_17_271 and.i.i336.i_17_269))
  (ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.3.0.i.i.i_17_273 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_17_273 sub.i.i.i_17_268))
  (= or.i.i.i_17_274 (bvor retval.sroa.0.0.i.i.i_17_271 and.i.i301.i_17_163))
  (= and.i1.i.i_17_275 (bvand retval.sroa.3.0.i.i.i_17_273 and6.i.i302.i_17_165))
  (= neg.i.i.i_17_277 (bvxor and.i1.i.i_17_275 #xffffffffffffffff))
  (= and4.i.i.i_17_278 (bvand or.i.i.i_17_274 neg.i.i.i_17_277))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b0)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 a!3))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b1)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 a!3))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_17_211 #b0) a!3)
          (and (= cmp.i.i.i.i_17_211 #b1) a!3))
      (and (= src_reg_17_190 src_reg_17_293)
           (= src_reg_17_191 src_reg_17_294)
           (= src_reg_17_192 src_reg_17_295)
           (= src_reg_17_193 src_reg_17_296)
           (= src_reg_17_194 src_reg_17_297)
           (= src_reg_17_195 src_reg_17_298)
           (= src_reg_17_196 src_reg_17_299)
           (= src_reg_17_197 src_reg_17_300)
           (= src_reg_17_198 src_reg_17_301)
           (= src_reg_17_199 src_reg_17_302)
           (= src_reg_17_200 src_reg_17_303)
           (= src_reg_17_201 src_reg_17_304)
           (= src_reg_17_202 src_reg_17_305)
           (= src_reg_17_203 src_reg_17_306)
           (= dst_reg_17_176 dst_reg_17_279)
           (= dst_reg_17_177 dst_reg_17_280)
           (= dst_reg_17_178 dst_reg_17_281)
           (= dst_reg_17_179 dst_reg_17_282)
           (= and4.i.i.i_17_278 dst_reg_17_283)
           (= and.i1.i.i_17_275 dst_reg_17_284)
           (= i27.i317.i_17_208 dst_reg_17_285)
           (= storemerge.i316.i_17_206 dst_reg_17_286)
           (= dst_reg_17_184 dst_reg_17_287)
           (= storemerge.i316.i_17_206 dst_reg_17_288)
           (= dst_reg_17_186 dst_reg_17_289)
           (= dst_reg_17_187 dst_reg_17_290)
           (= dst_reg_17_188 dst_reg_17_291)
           (= dst_reg_17_189 dst_reg_17_292))))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_17_99 #b1)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp18.not.i.not_17_98 #b0)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_293)
           (= src_reg_17_65 src_reg_17_294)
           (= src_reg_17_66 src_reg_17_295)
           (= src_reg_17_67 src_reg_17_296)
           (= src_reg_17_68 src_reg_17_297)
           (= src_reg_17_69 src_reg_17_298)
           (= src_reg_17_70 src_reg_17_299)
           (= src_reg_17_71 src_reg_17_300)
           (= src_reg_17_72 src_reg_17_301)
           (= src_reg_17_73 src_reg_17_302)
           (= src_reg_17_74 src_reg_17_303)
           (= src_reg_17_75 src_reg_17_304)
           (= src_reg_17_76 src_reg_17_305)
           (= src_reg_17_77 src_reg_17_306)
           (= #x00000001 dst_reg_17_279)
           (= dst_reg_17_51 dst_reg_17_280)
           (= dst_reg_17_52 dst_reg_17_281)
           (= dst_reg_17_53 dst_reg_17_282)
           (= #x0000000000000000 dst_reg_17_283)
           (= #xffffffffffffffff dst_reg_17_284)
           (= #x8000000000000000 dst_reg_17_285)
           (= #x7fffffffffffffff dst_reg_17_286)
           (= #x0000000000000000 dst_reg_17_287)
           (= #xffffffffffffffff dst_reg_17_288)
           (= #x00000000 dst_reg_17_289)
           (= dst_reg_17_61 dst_reg_17_290)
           (= dst_reg_17_62 dst_reg_17_291)
           (= dst_reg_17_63 dst_reg_17_292))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i.i
=========================
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then166.i
=========================
-------------------
  store i64 %and170.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.end171.i
=========================
-------------------
  store i64 %and.i116.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and9.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %cond184.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %..i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %.cond184.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %cond14.i135.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.then308.i
=========================
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i314.i
=========================
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 45 = MemoryPhi({__reg_bound_offset.exit.i,44},{if.then26.i,17})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ and.i1.i.i_17_275 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
45 = MemoryPhi({__reg_bound_offset.exit.i,44},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
- dst_reg: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 45 = MemoryPhi({__reg_bound_offset.exit.i,44},{if.then26.i,17})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_307
[lookInsideStruct] singleValueType:dst_reg_17_307
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_308
[lookInsideStruct] singleValueType:dst_reg_17_308
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_309
[lookInsideStruct] singleValueType:dst_reg_17_309
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_310
[lookInsideStruct] singleValueType:dst_reg_17_310
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_311
[lookInsideStruct] singleValueType:dst_reg_17_311
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_312
[lookInsideStruct] singleValueType:dst_reg_17_312
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_313
[lookInsideStruct] singleValueType:dst_reg_17_313
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_314
[lookInsideStruct] singleValueType:dst_reg_17_314
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_315
[lookInsideStruct] singleValueType:dst_reg_17_315
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_316
[lookInsideStruct] singleValueType:dst_reg_17_316
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_317
[lookInsideStruct] singleValueType:dst_reg_17_317
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_318
[lookInsideStruct] singleValueType:dst_reg_17_318
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_319
[lookInsideStruct] singleValueType:dst_reg_17_319
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_17_320
[lookInsideStruct] singleValueType:dst_reg_17_320
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_17_307 ] [ ] [ dst_reg_17_308 ] [ dst_reg_17_309 ] [ dst_reg_17_310 ] [ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] [ dst_reg_17_313 ] [ dst_reg_17_314 ] [ dst_reg_17_315 ] [ dst_reg_17_316 ] [ ] [ dst_reg_17_317 ] [ dst_reg_17_318 ] [ dst_reg_17_319 ] [ dst_reg_17_320 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_17_279 dst_reg_17_307)
(= dst_reg_17_280 dst_reg_17_308)
(= dst_reg_17_281 dst_reg_17_309)
(= dst_reg_17_282 dst_reg_17_310)
(= dst_reg_17_283 dst_reg_17_311)
(= dst_reg_17_284 dst_reg_17_312)
(= dst_reg_17_285 dst_reg_17_313)
(= dst_reg_17_286 dst_reg_17_314)
(= dst_reg_17_287 dst_reg_17_315)
(= dst_reg_17_288 dst_reg_17_316)
(= dst_reg_17_289 dst_reg_17_317)
(= dst_reg_17_290 dst_reg_17_318)
(= dst_reg_17_291 dst_reg_17_319)
(= dst_reg_17_292 dst_reg_17_320)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_321
[lookInsideStruct] singleValueType:src_reg_17_321
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_322
[lookInsideStruct] singleValueType:src_reg_17_322
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_323
[lookInsideStruct] singleValueType:src_reg_17_323
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_324
[lookInsideStruct] singleValueType:src_reg_17_324
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_325
[lookInsideStruct] singleValueType:src_reg_17_325
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_326
[lookInsideStruct] singleValueType:src_reg_17_326
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_327
[lookInsideStruct] singleValueType:src_reg_17_327
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_328
[lookInsideStruct] singleValueType:src_reg_17_328
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_329
[lookInsideStruct] singleValueType:src_reg_17_329
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_330
[lookInsideStruct] singleValueType:src_reg_17_330
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_331
[lookInsideStruct] singleValueType:src_reg_17_331
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_332
[lookInsideStruct] singleValueType:src_reg_17_332
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_333
[lookInsideStruct] singleValueType:src_reg_17_333
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_17_334
[lookInsideStruct] singleValueType:src_reg_17_334
[setupBVTreeForArg] returning BVTree: [ [ src_reg_17_321 ] [ ] [ src_reg_17_322 ] [ src_reg_17_323 ] [ src_reg_17_324 ] [ [ src_reg_17_325 ] [ src_reg_17_326 ] ] [ src_reg_17_327 ] [ src_reg_17_328 ] [ src_reg_17_329 ] [ src_reg_17_330 ] [ ] [ src_reg_17_331 ] [ src_reg_17_332 ] [ src_reg_17_333 ] [ src_reg_17_334 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_17_293 src_reg_17_321)
(= src_reg_17_294 src_reg_17_322)
(= src_reg_17_295 src_reg_17_323)
(= src_reg_17_296 src_reg_17_324)
(= src_reg_17_297 src_reg_17_325)
(= src_reg_17_298 src_reg_17_326)
(= src_reg_17_299 src_reg_17_327)
(= src_reg_17_300 src_reg_17_328)
(= src_reg_17_301 src_reg_17_329)
(= src_reg_17_302 src_reg_17_330)
(= src_reg_17_303 src_reg_17_331)
(= src_reg_17_304 src_reg_17_332)
(= src_reg_17_305 src_reg_17_333)
(= src_reg_17_306 src_reg_17_334)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_17_321 ] [ ] [ src_reg_17_322 ] [ src_reg_17_323 ] [ src_reg_17_324 ] [ [ src_reg_17_325 ] [ src_reg_17_326 ] ] [ src_reg_17_327 ] [ src_reg_17_328 ] [ src_reg_17_329 ] [ src_reg_17_330 ] [ ] [ src_reg_17_331 ] [ src_reg_17_332 ] [ src_reg_17_333 ] [ src_reg_17_334 ] ] 
- dst_reg: [ [ dst_reg_17_307 ] [ ] [ dst_reg_17_308 ] [ dst_reg_17_309 ] [ dst_reg_17_310 ] [ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] [ dst_reg_17_313 ] [ dst_reg_17_314 ] [ dst_reg_17_315 ] [ dst_reg_17_316 ] [ ] [ dst_reg_17_317 ] [ dst_reg_17_318 ] [ dst_reg_17_319 ] [ dst_reg_17_320 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_17_211 #b0) a!3)
          (and (= cmp.i.i.i.i_17_211 #b1) a!3))
      (and (= src_reg_17_190 src_reg_17_293)
           (= src_reg_17_191 src_reg_17_294)
           (= src_reg_17_192 src_reg_17_295)
           (= src_reg_17_193 src_reg_17_296)
           (= src_reg_17_194 src_reg_17_297)
           (= src_reg_17_195 src_reg_17_298)
           (= src_reg_17_196 src_reg_17_299)
           (= src_reg_17_197 src_reg_17_300)
           (= src_reg_17_198 src_reg_17_301)
           (= src_reg_17_199 src_reg_17_302)
           (= src_reg_17_200 src_reg_17_303)
           (= src_reg_17_201 src_reg_17_304)
           (= src_reg_17_202 src_reg_17_305)
           (= src_reg_17_203 src_reg_17_306)
           (= dst_reg_17_176 dst_reg_17_279)
           (= dst_reg_17_177 dst_reg_17_280)
           (= dst_reg_17_178 dst_reg_17_281)
           (= dst_reg_17_179 dst_reg_17_282)
           (= and4.i.i.i_17_278 dst_reg_17_283)
           (= and.i1.i.i_17_275 dst_reg_17_284)
           (= i27.i317.i_17_208 dst_reg_17_285)
           (= storemerge.i316.i_17_206 dst_reg_17_286)
           (= dst_reg_17_184 dst_reg_17_287)
           (= storemerge.i316.i_17_206 dst_reg_17_288)
           (= dst_reg_17_186 dst_reg_17_289)
           (= dst_reg_17_187 dst_reg_17_290)
           (= dst_reg_17_188 dst_reg_17_291)
           (= dst_reg_17_189 dst_reg_17_292))))))
  (let ((a!1 (or (and (= cmp24.old.i_17_99 #b1)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp18.not.i.not_17_98 #b0)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_293)
           (= src_reg_17_65 src_reg_17_294)
           (= src_reg_17_66 src_reg_17_295)
           (= src_reg_17_67 src_reg_17_296)
           (= src_reg_17_68 src_reg_17_297)
           (= src_reg_17_69 src_reg_17_298)
           (= src_reg_17_70 src_reg_17_299)
           (= src_reg_17_71 src_reg_17_300)
           (= src_reg_17_72 src_reg_17_301)
           (= src_reg_17_73 src_reg_17_302)
           (= src_reg_17_74 src_reg_17_303)
           (= src_reg_17_75 src_reg_17_304)
           (= src_reg_17_76 src_reg_17_305)
           (= src_reg_17_77 src_reg_17_306)
           (= #x00000001 dst_reg_17_279)
           (= dst_reg_17_51 dst_reg_17_280)
           (= dst_reg_17_52 dst_reg_17_281)
           (= dst_reg_17_53 dst_reg_17_282)
           (= #x0000000000000000 dst_reg_17_283)
           (= #xffffffffffffffff dst_reg_17_284)
           (= #x8000000000000000 dst_reg_17_285)
           (= #x7fffffffffffffff dst_reg_17_286)
           (= #x0000000000000000 dst_reg_17_287)
           (= #xffffffffffffffff dst_reg_17_288)
           (= #x00000000 dst_reg_17_289)
           (= dst_reg_17_61 dst_reg_17_290)
           (= dst_reg_17_62 dst_reg_17_291)
           (= dst_reg_17_63 dst_reg_17_292))))
  (= dst_reg_17_279 dst_reg_17_307)
  (= dst_reg_17_280 dst_reg_17_308)
  (= dst_reg_17_281 dst_reg_17_309)
  (= dst_reg_17_282 dst_reg_17_310)
  (= dst_reg_17_283 dst_reg_17_311)
  (= dst_reg_17_284 dst_reg_17_312)
  (= dst_reg_17_285 dst_reg_17_313)
  (= dst_reg_17_286 dst_reg_17_314)
  (= dst_reg_17_287 dst_reg_17_315)
  (= dst_reg_17_288 dst_reg_17_316)
  (= dst_reg_17_289 dst_reg_17_317)
  (= dst_reg_17_290 dst_reg_17_318)
  (= dst_reg_17_291 dst_reg_17_319)
  (= dst_reg_17_292 dst_reg_17_320)
  (= src_reg_17_293 src_reg_17_321)
  (= src_reg_17_294 src_reg_17_322)
  (= src_reg_17_295 src_reg_17_323)
  (= src_reg_17_296 src_reg_17_324)
  (= src_reg_17_297 src_reg_17_325)
  (= src_reg_17_298 src_reg_17_326)
  (= src_reg_17_299 src_reg_17_327)
  (= src_reg_17_300 src_reg_17_328)
  (= src_reg_17_301 src_reg_17_329)
  (= src_reg_17_302 src_reg_17_330)
  (= src_reg_17_303 src_reg_17_331)
  (= src_reg_17_304 src_reg_17_332)
  (= src_reg_17_305 src_reg_17_333)
  (= src_reg_17_306 src_reg_17_334)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_17_209 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= tobool.not.i.i.i.i.i_17_213 #b0))
  (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215)
     (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))
  (ite (= tobool.not.i.i.i.i.i_17_213 #b1)
     (= spec.select17.i.i.i.i.i_17_219 #x0000001f)
     (= spec.select17.i.i.i.i.i_17_219 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_17_216 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= tobool2.not.i.i.i.i.i_17_221 #b0))
  (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 #xfffffff0))
  (= shl5.i.i.i.i.i_17_225
   (bvshl spec.select.i.i.i.i.i_17_216 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225)
     (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))
  (ite (= tobool2.not.i.i.i.i.i_17_221 #b1)
     (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223)
     (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))
  (ite (bvult word.addr.1.i.i.i.i.i_17_226 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= tobool8.not.i.i.i.i.i_17_229 #b0))
  (= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 #xfffffff8))
  (= shl11.i.i.i.i.i_17_233
   (bvshl word.addr.1.i.i.i.i.i_17_226 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233)
     (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))
  (ite (= tobool8.not.i.i.i.i.i_17_229 #b1)
     (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231)
     (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))
  (ite (bvult word.addr.2.i.i.i.i.i_17_234 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= tobool14.not.i.i.i.i.i_17_237 #b0))
  (= sub16.i.i.i.i.i_17_239 (bvadd num.2.i.i.i.i.i_17_235 #xfffffffc))
  (= shl17.i.i.i.i.i_17_241
   (bvshl word.addr.2.i.i.i.i.i_17_234 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= word.addr.3.i.i.i.i.i_17_242 shl17.i.i.i.i.i_17_241)
     (= word.addr.3.i.i.i.i.i_17_242 word.addr.2.i.i.i.i.i_17_234))
  (ite (= tobool14.not.i.i.i.i.i_17_237 #b1)
     (= num.3.i.i.i.i.i_17_243 sub16.i.i.i.i.i_17_239)
     (= num.3.i.i.i.i.i_17_243 num.2.i.i.i.i.i_17_235))
  (ite (bvult word.addr.3.i.i.i.i.i_17_242 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= tobool20.not.i.i.i.i.i_17_245 #b0))
  (= sub22.i.i.i.i.i_17_247 (bvadd num.3.i.i.i.i.i_17_243 #x000000fe))
  (= shl23.i.i.i.i.i_17_249
   (bvshl word.addr.3.i.i.i.i.i_17_242 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= word.addr.4.i.i.i.i.i_17_250 shl23.i.i.i.i.i_17_249)
     (= word.addr.4.i.i.i.i.i_17_250 word.addr.3.i.i.i.i.i_17_242))
  (ite (= tobool20.not.i.i.i.i.i_17_245 #b1)
     (= num.4.i.i.i.i.i_17_251 sub22.i.i.i.i.i_17_247)
     (= num.4.i.i.i.i.i_17_251 num.3.i.i.i.i.i_17_243))
  (= word.addr.4.lobit.i.i.i.i.i.neg_17_253
   (bvlshr word.addr.4.i.i.i.i.i_17_250 #x000000000000003f))
  (= i.i.i.i.i.i.neg_17_254
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_17_253))
  (= add.i.i.i335.i_17_255 (bvadd num.4.i.i.i.i.i_17_251 i.i.i.i.i.i.neg_17_254))
  (= phi.bo_17_257 (bvand add.i.i.i335.i_17_255 #x000000ff))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:30
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_17_211 #b0) a!3)
          (and (= cmp.i.i.i.i_17_211 #b1) a!3))
      (and (= src_reg_17_190 src_reg_17_293)
           (= src_reg_17_191 src_reg_17_294)
           (= src_reg_17_192 src_reg_17_295)
           (= src_reg_17_193 src_reg_17_296)
           (= src_reg_17_194 src_reg_17_297)
           (= src_reg_17_195 src_reg_17_298)
           (= src_reg_17_196 src_reg_17_299)
           (= src_reg_17_197 src_reg_17_300)
           (= src_reg_17_198 src_reg_17_301)
           (= src_reg_17_199 src_reg_17_302)
           (= src_reg_17_200 src_reg_17_303)
           (= src_reg_17_201 src_reg_17_304)
           (= src_reg_17_202 src_reg_17_305)
           (= src_reg_17_203 src_reg_17_306)
           (= dst_reg_17_176 dst_reg_17_279)
           (= dst_reg_17_177 dst_reg_17_280)
           (= dst_reg_17_178 dst_reg_17_281)
           (= dst_reg_17_179 dst_reg_17_282)
           (= and4.i.i.i_17_278 dst_reg_17_283)
           (= and.i1.i.i_17_275 dst_reg_17_284)
           (= i27.i317.i_17_208 dst_reg_17_285)
           (= storemerge.i316.i_17_206 dst_reg_17_286)
           (= dst_reg_17_184 dst_reg_17_287)
           (= storemerge.i316.i_17_206 dst_reg_17_288)
           (= dst_reg_17_186 dst_reg_17_289)
           (= dst_reg_17_187 dst_reg_17_290)
           (= dst_reg_17_188 dst_reg_17_291)
           (= dst_reg_17_189 dst_reg_17_292))))))
  (let ((a!1 (or (and (= cmp24.old.i_17_99 #b1)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp18.not.i.not_17_98 #b0)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_293)
           (= src_reg_17_65 src_reg_17_294)
           (= src_reg_17_66 src_reg_17_295)
           (= src_reg_17_67 src_reg_17_296)
           (= src_reg_17_68 src_reg_17_297)
           (= src_reg_17_69 src_reg_17_298)
           (= src_reg_17_70 src_reg_17_299)
           (= src_reg_17_71 src_reg_17_300)
           (= src_reg_17_72 src_reg_17_301)
           (= src_reg_17_73 src_reg_17_302)
           (= src_reg_17_74 src_reg_17_303)
           (= src_reg_17_75 src_reg_17_304)
           (= src_reg_17_76 src_reg_17_305)
           (= src_reg_17_77 src_reg_17_306)
           (= #x00000001 dst_reg_17_279)
           (= dst_reg_17_51 dst_reg_17_280)
           (= dst_reg_17_52 dst_reg_17_281)
           (= dst_reg_17_53 dst_reg_17_282)
           (= #x0000000000000000 dst_reg_17_283)
           (= #xffffffffffffffff dst_reg_17_284)
           (= #x8000000000000000 dst_reg_17_285)
           (= #x7fffffffffffffff dst_reg_17_286)
           (= #x0000000000000000 dst_reg_17_287)
           (= #xffffffffffffffff dst_reg_17_288)
           (= #x00000000 dst_reg_17_289)
           (= dst_reg_17_61 dst_reg_17_290)
           (= dst_reg_17_62 dst_reg_17_291)
           (= dst_reg_17_63 dst_reg_17_292))))
  (= dst_reg_17_279 dst_reg_17_307)
  (= dst_reg_17_280 dst_reg_17_308)
  (= dst_reg_17_281 dst_reg_17_309)
  (= dst_reg_17_282 dst_reg_17_310)
  (= dst_reg_17_283 dst_reg_17_311)
  (= dst_reg_17_284 dst_reg_17_312)
  (= dst_reg_17_285 dst_reg_17_313)
  (= dst_reg_17_286 dst_reg_17_314)
  (= dst_reg_17_287 dst_reg_17_315)
  (= dst_reg_17_288 dst_reg_17_316)
  (= dst_reg_17_289 dst_reg_17_317)
  (= dst_reg_17_290 dst_reg_17_318)
  (= dst_reg_17_291 dst_reg_17_319)
  (= dst_reg_17_292 dst_reg_17_320)
  (= src_reg_17_293 src_reg_17_321)
  (= src_reg_17_294 src_reg_17_322)
  (= src_reg_17_295 src_reg_17_323)
  (= src_reg_17_296 src_reg_17_324)
  (= src_reg_17_297 src_reg_17_325)
  (= src_reg_17_298 src_reg_17_326)
  (= src_reg_17_299 src_reg_17_327)
  (= src_reg_17_300 src_reg_17_328)
  (= src_reg_17_301 src_reg_17_329)
  (= src_reg_17_302 src_reg_17_330)
  (= src_reg_17_303 src_reg_17_331)
  (= src_reg_17_304 src_reg_17_332)
  (= src_reg_17_305 src_reg_17_333)
  (= src_reg_17_306 src_reg_17_334)
BasicBlock: entry, Size:40
  (= dst_reg_17_0 dst_reg_17_0)
  (= dst_reg_17_1 dst_reg_17_1)
  (= dst_reg_17_2 dst_reg_17_2)
  (= dst_reg_17_3 dst_reg_17_3)
  (= dst_reg_17_4 dst_reg_17_4)
  (= dst_reg_17_5 dst_reg_17_5)
  (= dst_reg_17_6 dst_reg_17_6)
  (= dst_reg_17_7 dst_reg_17_7)
  (= dst_reg_17_8 dst_reg_17_8)
  (= dst_reg_17_9 dst_reg_17_9)
  (= dst_reg_17_10 dst_reg_17_10)
  (= dst_reg_17_11 dst_reg_17_11)
  (= dst_reg_17_12 dst_reg_17_12)
  (= dst_reg_17_13 dst_reg_17_13)
  (= src_reg_17_14 src_reg_17_14)
  (= src_reg_17_15 src_reg_17_15)
  (= src_reg_17_16 src_reg_17_16)
  (= src_reg_17_17 src_reg_17_17)
  (= src_reg_17_18 src_reg_17_18)
  (= src_reg_17_19 src_reg_17_19)
  (= src_reg_17_20 src_reg_17_20)
  (= src_reg_17_21 src_reg_17_21)
  (= src_reg_17_22 src_reg_17_22)
  (= src_reg_17_23 src_reg_17_23)
  (= src_reg_17_24 src_reg_17_24)
  (= src_reg_17_25 src_reg_17_25)
  (= src_reg_17_26 src_reg_17_26)
  (= src_reg_17_27 src_reg_17_27)
  (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)
  (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)
  (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)
  (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)
  (= dst_reg_17_4 i18.i.i_17_34)
  (= dst_reg_17_5 i20.i.i_17_35)
  (= and.i.i.i_17_37 (bvand i18.i.i_17_34 #x00000000ffffffff))
  (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 #x00000000ffffffff))
  (= dst_reg_17_8 i23.i.i_17_40)
  (= dst_reg_17_9 i24.i.i_17_41)
  (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))
  (ite (bvult i25.i.i_17_42 #x0000000100000000)
     (= cmp.i.i_17_44 #b1)
     (= cmp.i.i_17_44 #b0))
BasicBlock: if.then308.i, Size:14
  (=> if.end171.i_if.then308.i_17_157 (= storemerge_17_159 cond35.i144.i_17_128))
  (=> if.then166.i_if.then308.i_17_158 (= storemerge_17_159 and170.i_17_110))
  (= dst_reg_17_133 i18.i298.i_17_160)
  (= dst_reg_17_134 i20.i300.i_17_161)
  (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 #x00000000ffffffff))
  (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 #x00000000ffffffff))
  (= dst_reg_17_137 i23.i306.i_17_166)
  (= storemerge_17_159 i24.i308.i_17_167)
  (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))
  (ite (bvult i25.i309.i_17_168 #x0000000100000000)
     (= cmp.i311.i_17_170 #b1)
     (= cmp.i311.i_17_170 #b0))
  (=> (and (= tobool.not.i25.i_17_109 #b1)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= src_reg_17_64 src_reg_17_143)
         (= src_reg_17_65 src_reg_17_144)
         (= src_reg_17_66 src_reg_17_145)
         (= src_reg_17_67 src_reg_17_146)
         (= src_reg_17_68 src_reg_17_147)
         (= src_reg_17_69 src_reg_17_148)
         (= src_reg_17_70 src_reg_17_149)
         (= src_reg_17_71 src_reg_17_150)
         (= src_reg_17_72 src_reg_17_151)
         (= src_reg_17_73 src_reg_17_152)
         (= src_reg_17_74 src_reg_17_153)
         (= src_reg_17_75 src_reg_17_154)
         (= src_reg_17_76 src_reg_17_155)
         (= src_reg_17_77 src_reg_17_156)
         (= dst_reg_17_50 dst_reg_17_129)
         (= dst_reg_17_51 dst_reg_17_130)
         (= dst_reg_17_52 dst_reg_17_131)
         (= dst_reg_17_53 dst_reg_17_132)
         (= and170.i_17_110 dst_reg_17_133)
         (= #x0000000000000000 dst_reg_17_134)
         (= and170.i_17_110 dst_reg_17_135)
         (= and170.i_17_110 dst_reg_17_136)
         (= and170.i_17_110 dst_reg_17_137)
         (= storemerge.i.i_17_80 dst_reg_17_138)
         (= dst_reg_17_60 dst_reg_17_139)
         (= dst_reg_17_61 dst_reg_17_140)
         (= dst_reg_17_62 dst_reg_17_141)
         (= dst_reg_17_63 dst_reg_17_142)))
  (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (=> a!1
      (and (= src_reg_17_64 src_reg_17_143)
           (= src_reg_17_65 src_reg_17_144)
           (= src_reg_17_66 src_reg_17_145)
           (= src_reg_17_67 src_reg_17_146)
           (= src_reg_17_68 src_reg_17_147)
           (= src_reg_17_69 src_reg_17_148)
           (= src_reg_17_70 src_reg_17_149)
           (= src_reg_17_71 src_reg_17_150)
           (= src_reg_17_72 src_reg_17_151)
           (= src_reg_17_73 src_reg_17_152)
           (= src_reg_17_74 src_reg_17_153)
           (= src_reg_17_75 src_reg_17_154)
           (= src_reg_17_76 src_reg_17_155)
           (= src_reg_17_77 src_reg_17_156)
           (= dst_reg_17_50 dst_reg_17_129)
           (= dst_reg_17_51 dst_reg_17_130)
           (= dst_reg_17_52 dst_reg_17_131)
           (= dst_reg_17_53 dst_reg_17_132)
           (= and.i116.i_17_114 dst_reg_17_133)
           (= and9.i.i_17_116 dst_reg_17_134)
           (= and.i116.i_17_114 dst_reg_17_135)
           (= cond14.i135.i_17_126 dst_reg_17_136)
           (= and.i116.i_17_114 dst_reg_17_137)
           (= cond184.i_17_118 dst_reg_17_138)
           (= dst_reg_17_60 dst_reg_17_139)
           (= dst_reg_17_61 dst_reg_17_140)
           (= dst_reg_17_62 dst_reg_17_141)
           (= dst_reg_17_63 dst_reg_17_142))))
  (let ((a!1 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (= cmp18.not.i.not_17_98 #b1)
                    (= tobool.not.i.i_17_97 #b1)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))))
  (= if.end171.i_if.then308.i_17_157 a!1))
  (= if.then166.i_if.then308.i_17_158
   (and (= tobool.not.i25.i_17_109 #b1)
        (= cmp18.not.i.not_17_98 #b1)
        (= tobool.not.i.i_17_97 #b1)
        (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_17_46 (bvand i23.i.i_17_40 #x00000000ffffffff))
  (= and8.i.i_17_48 (bvand i24.i.i_17_41 #x00000000ffffffff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: coerce_reg_to_size.exit320.i, Size:9
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
    (= storemerge.i316.i_17_206 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
    (= storemerge.i316.i_17_206 and8.i313.i_17_174))
  (= dst_reg_17_184 i27.i317.i_17_208)
  (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))
  (ite (= xor.i.i.i_17_209 #x0000000000000000)
     (= cmp.i.i.i.i_17_211 #b1)
     (= cmp.i.i.i.i_17_211 #b0))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b1) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= and6.i312.i_17_172 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (=> (and (= cmp.i311.i_17_170 #b0) a!2)
      (and (= src_reg_17_143 src_reg_17_190)
           (= src_reg_17_144 src_reg_17_191)
           (= src_reg_17_145 src_reg_17_192)
           (= src_reg_17_146 src_reg_17_193)
           (= src_reg_17_147 src_reg_17_194)
           (= src_reg_17_148 src_reg_17_195)
           (= src_reg_17_149 src_reg_17_196)
           (= src_reg_17_150 src_reg_17_197)
           (= src_reg_17_151 src_reg_17_198)
           (= src_reg_17_152 src_reg_17_199)
           (= src_reg_17_153 src_reg_17_200)
           (= src_reg_17_154 src_reg_17_201)
           (= src_reg_17_155 src_reg_17_202)
           (= src_reg_17_156 src_reg_17_203)
           (= dst_reg_17_129 dst_reg_17_176)
           (= dst_reg_17_130 dst_reg_17_177)
           (= dst_reg_17_131 dst_reg_17_178)
           (= dst_reg_17_132 dst_reg_17_179)
           (= and.i.i301.i_17_163 dst_reg_17_180)
           (= and6.i.i302.i_17_165 dst_reg_17_181)
           (= dst_reg_17_135 dst_reg_17_182)
           (= dst_reg_17_136 dst_reg_17_183)
           (= #x0000000000000000 dst_reg_17_184)
           (= storemerge_17_159 dst_reg_17_185)
           (= dst_reg_17_139 dst_reg_17_186)
           (= dst_reg_17_140 dst_reg_17_187)
           (= dst_reg_17_141 dst_reg_17_188)
           (= dst_reg_17_142 dst_reg_17_189)))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_17_204
     (and (= cmp.i311.i_17_170 #b0) a!2))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_17_205
     (and (= cmp.i311.i_17_170 #b1) a!2))))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp18.not.i.not_17_98 #b1)
     (= cmp18.not.i.not_17_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:15
  (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78
    (= storemerge.i.i_17_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79
    (= storemerge.i.i_17_80 and8.i.i_17_48))
  (= dst_reg_17_58 i27.i.i_17_82)
  (= and6.i.i6.i_17_84
   (bvand src_reg1.sroa.10.0.copyload_17_31 #x00000000ffffffff))
  (= i25.i13.i_17_85
   (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32))
  (ite (bvult i25.i13.i_17_85 #x0000000100000000)
     (= cmp.i15.i_17_87 #b1)
     (= cmp.i15.i_17_87 #b0))
  (= and6.i16.i_17_89
   (bvand src_reg1.sroa.17.0.copyload_17_32 #x00000000ffffffff))
  (= and8.i17.i_17_91
   (bvand src_reg1.sroa.22.0.copyload_17_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_17_87 #b1)
     (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89)
     (= src_reg1.sroa.17.0_17_93 #x0000000000000000))
  (ite (= cmp.i15.i_17_87 #b1)
     (= storemerge.i20.i_17_95 and8.i17.i_17_91)
     (= storemerge.i20.i_17_95 #x00000000ffffffff))
  (ite (= and6.i.i6.i_17_84 #x0000000000000000)
     (= tobool.not.i.i_17_97 #b1)
     (= tobool.not.i.i_17_97 #b0))
  (=> (= cmp.i.i_17_44 #b1)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= and6.i.i_17_46 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
  (=> (= cmp.i.i_17_44 #b0)
    (and (= #x00000001 src_reg_17_64)
         (= src_reg_17_15 src_reg_17_65)
         (= src_reg_17_16 src_reg_17_66)
         (= src_reg_17_17 src_reg_17_67)
         (= src_reg_17_18 src_reg_17_68)
         (= src_reg_17_19 src_reg_17_69)
         (= src_reg_17_20 src_reg_17_70)
         (= src_reg_17_21 src_reg_17_71)
         (= src_reg_17_22 src_reg_17_72)
         (= src_reg_17_23 src_reg_17_73)
         (= src_reg_17_24 src_reg_17_74)
         (= src_reg_17_25 src_reg_17_75)
         (= src_reg_17_26 src_reg_17_76)
         (= src_reg_17_27 src_reg_17_77)
         (= #x00000001 dst_reg_17_50)
         (= dst_reg_17_1 dst_reg_17_51)
         (= dst_reg_17_2 dst_reg_17_52)
         (= dst_reg_17_3 dst_reg_17_53)
         (= and.i.i.i_17_37 dst_reg_17_54)
         (= and6.i.i.i_17_39 dst_reg_17_55)
         (= dst_reg_17_6 dst_reg_17_56)
         (= dst_reg_17_7 dst_reg_17_57)
         (= #x0000000000000000 dst_reg_17_58)
         (= dst_reg_17_9 dst_reg_17_59)
         (= dst_reg_17_10 dst_reg_17_60)
         (= dst_reg_17_11 dst_reg_17_61)
         (= dst_reg_17_12 dst_reg_17_62)
         (= dst_reg_17_13 dst_reg_17_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_17_78 (= cmp.i.i_17_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_17_79 (= cmp.i.i_17_44 #b1))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95)
     (= cmp24.old.i_17_99 #b1)
     (= cmp24.old.i_17_99 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_17_110 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258
    (= retval.0.i.i.i.i_17_260 phi.bo_17_257))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259
    (= retval.0.i.i.i.i_17_260 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_17_260 #x0000003f)
     (= cmp.i.i.i_17_263 #b1)
     (= cmp.i.i.i_17_263 #b0))
  (= sh_prom.i.i.i_17_264 ((_ zero_extend 32) retval.0.i.i.i.i_17_260))
  (= notmask.i.i.i_17_266 (bvshl #xffffffffffffffff sh_prom.i.i.i_17_264))
  (= sub.i.i.i_17_268 (bvxor notmask.i.i.i_17_266 #xffffffffffffffff))
  (= and.i.i336.i_17_269 (bvand notmask.i.i.i_17_266 i27.i317.i_17_208))
  (ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.0.0.i.i.i_17_271 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_17_271 and.i.i336.i_17_269))
  (ite (= cmp.i.i.i_17_263 #b1)
     (= retval.sroa.3.0.i.i.i_17_273 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_17_273 sub.i.i.i_17_268))
  (= or.i.i.i_17_274 (bvor retval.sroa.0.0.i.i.i_17_271 and.i.i301.i_17_163))
  (= and.i1.i.i_17_275 (bvand retval.sroa.3.0.i.i.i_17_273 and6.i.i302.i_17_165))
  (= neg.i.i.i_17_277 (bvxor and.i1.i.i_17_275 #xffffffffffffffff))
  (= and4.i.i.i_17_278 (bvand or.i.i.i_17_274 neg.i.i.i_17_277))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b0)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 a!3))))
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (and (= cmp.i.i.i.i_17_211 #b1)
                (or (and (= cmp.i311.i_17_170 #b0) a!2)
                    (and (= cmp.i311.i_17_170 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 a!3))))
BasicBlock: if.end171.i, Size:14
  (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))
  (= or3.i.i_17_113
   (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))
  (= and.i116.i_17_114 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30))
  (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))
  (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))
  (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95)
     (= cmp182.i_17_117 #b1)
     (= cmp182.i_17_117 #b0))
  (ite (= cmp182.i_17_117 #b1)
     (= cond184.i_17_118 storemerge.i.i_17_80)
     (= cond184.i_17_118 storemerge.i20.i_17_95))
  (ite (bvslt i27.i.i_17_82 #x0000000000000000)
     (= cmp187.i_17_120 #b1)
     (= cmp187.i_17_120 #b0))
  (ite (= cmp187.i_17_120 #b1)
     (= ..i_17_122 #x8000000000000000)
     (= ..i_17_122 and.i116.i_17_114))
  (ite (= cmp187.i_17_120 #b1)
     (= .cond184.i_17_124 #x7fffffffffffffff)
     (= .cond184.i_17_124 cond184.i_17_118))
  (ite (bvult .cond184.i_17_124 and8.i117.i_17_115)
     (= cmp10.i134.i_17_125 #b1)
     (= cmp10.i134.i_17_125 #b0))
  (ite (= cmp10.i134.i_17_125 #b1)
     (= cond14.i135.i_17_126 .cond184.i_17_124)
     (= cond14.i135.i_17_126 and8.i117.i_17_115))
  (ite (bvult cond184.i_17_118 and8.i117.i_17_115)
     (= cmp31.i143.i_17_127 #b1)
     (= cmp31.i143.i_17_127 #b0))
  (ite (= cmp31.i143.i_17_127 #b1)
     (= cond35.i144.i_17_128 cond184.i_17_118)
     (= cond35.i144.i_17_128 and8.i117.i_17_115))
BasicBlock: if.end27.i, Size:1
  (ite (= and6.i.i.i_17_39 #x0000000000000000)
     (= tobool.not.i25.i_17_109 #b1)
     (= tobool.not.i25.i_17_109 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 #x00000000ffffffff))
  (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 #x00000000ffffffff))

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
if.then.i.i
  (= cmp.i.i_17_44 #b1)
if.else.i315.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (or (and (= cmp.i311.i_17_170 #b0) a!2) (and (= cmp.i311.i_17_170 #b1) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.else.i.i
  (= cmp.i.i_17_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
      (a!2 (and (= tobool.not.i.i_17_97 #b0)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!3 (or (and (= tobool.not.i25.i_17_109 #b0)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1))
               (and (= cmp24.old.i_17_99 #b0) a!2)
               (and (= tobool.not.i25.i_17_109 #b1)
                    (and (= cmp18.not.i.not_17_98 #b1) a!1)))))
(let ((a!4 (or (and (= cmp.i311.i_17_170 #b0) a!3)
               (and (= cmp.i311.i_17_170 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!4)
      (and (= cmp.i.i.i.i_17_211 #b1) a!4)
      (and (= cmp24.old.i_17_99 #b1) a!2)
      (and (= cmp18.not.i.not_17_98 #b0) a!1)))))
if.then308.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
  (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
      (and (= cmp24.old.i_17_99 #b0)
           (= tobool.not.i.i_17_97 #b0)
           (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
      (and (= tobool.not.i25.i_17_109 #b1) a!1)))
if.then166.i
  (and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
if.end171.i
  (or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
if.end27.i
  (and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
if.then.i314.i
  (let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
(let ((a!3 (or (and (= cmp.i311.i_17_170 #b0) a!2)
               (and (= cmp.i311.i_17_170 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_17_211 #b0) a!3) (and (= cmp.i.i.i.i_17_211 #b1) a!3)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b1) a!2)))
<if.end171.i, if.then308.i> :(or (and (= tobool.not.i25.i_17_109 #b0)
         (= cmp18.not.i.not_17_98 #b1)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp24.old.i_17_99 #b0)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b0)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.end27.i, if.then166.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_17_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b1)
<if.then166.i, if.then308.i> :(and (= tobool.not.i25.i_17_109 #b1)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_17_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i.i.i.i_17_211 #b1)
       (or (and (= cmp.i311.i_17_170 #b0) a!2)
           (and (= cmp.i311.i_17_170 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (and (= cmp18.not.i.not_17_98 #b1)
                (= tobool.not.i.i_17_97 #b1)
                (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_17_109 #b0) a!1)
               (and (= cmp24.old.i_17_99 #b0)
                    (= tobool.not.i.i_17_97 #b0)
                    (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
               (and (= tobool.not.i25.i_17_109 #b1) a!1))))
  (and (= cmp.i311.i_17_170 #b0) a!2)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_17_98 #b0)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_17_99 #b1)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<lor.lhs.false20.i, if.end171.i> :(and (= cmp24.old.i_17_99 #b0)
     (= tobool.not.i.i_17_97 #b0)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_17_44 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_17_99 #b1)
         (= tobool.not.i.i_17_97 #b0)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
    (and (= cmp18.not.i.not_17_98 #b0)
         (= tobool.not.i.i_17_97 #b1)
         (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1))))
<if.end27.i, if.end171.i> :(and (= tobool.not.i25.i_17_109 #b0)
     (= cmp18.not.i.not_17_98 #b1)
     (= tobool.not.i.i_17_97 #b1)
     (or (= cmp.i.i_17_44 #b0) (= cmp.i.i_17_44 #b1)))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
44 = MemoryDef(43) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ and4.i.i.i_17_278 ] [ and.i1.i.i_17_275 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
37 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
47 = MemoryPhi({if.then.i314.i,35},{if.else.i315.i,36}) : {
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ dst_reg_17_182 ] [ dst_reg_17_183 ] [ dst_reg_17_184 ] [ dst_reg_17_185 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
}
36 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ #x0000000000000000 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ and6.i312.i_17_172 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ and6.i.i302.i_17_165 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ and.i.i301.i_17_163 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
32 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ storemerge_17_159 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
}
46 = MemoryPhi({if.then166.i,22},{if.end171.i,31}) : {
- src_reg: [ [ src_reg_17_143 ] [ ] [ src_reg_17_144 ] [ src_reg_17_145 ] [ src_reg_17_146 ] [ [ src_reg_17_147 ] [ src_reg_17_148 ] ] [ src_reg_17_149 ] [ src_reg_17_150 ] [ src_reg_17_151 ] [ src_reg_17_152 ] [ ] [ src_reg_17_153 ] [ src_reg_17_154 ] [ src_reg_17_155 ] [ src_reg_17_156 ] ] 
- dst_reg: [ [ dst_reg_17_129 ] [ ] [ dst_reg_17_130 ] [ dst_reg_17_131 ] [ dst_reg_17_132 ] [ [ dst_reg_17_133 ] [ dst_reg_17_134 ] ] [ dst_reg_17_135 ] [ dst_reg_17_136 ] [ dst_reg_17_137 ] [ dst_reg_17_138 ] [ ] [ dst_reg_17_139 ] [ dst_reg_17_140 ] [ dst_reg_17_141 ] [ dst_reg_17_142 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ cond14.i135.i_17_126 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ and.i116.i_17_114 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
7 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ #x0000000000000000 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ and6.i.i_17_46 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_17_176 ] [ ] [ dst_reg_17_177 ] [ dst_reg_17_178 ] [ dst_reg_17_179 ] [ [ dst_reg_17_180 ] [ dst_reg_17_181 ] ] [ i27.i317.i_17_208 ] [ storemerge.i316.i_17_206 ] [ dst_reg_17_184 ] [ storemerge.i316.i_17_206 ] [ ] [ dst_reg_17_186 ] [ dst_reg_17_187 ] [ dst_reg_17_188 ] [ dst_reg_17_189 ] ] 
- src_reg: [ [ src_reg_17_190 ] [ ] [ src_reg_17_191 ] [ src_reg_17_192 ] [ src_reg_17_193 ] [ [ src_reg_17_194 ] [ src_reg_17_195 ] ] [ src_reg_17_196 ] [ src_reg_17_197 ] [ src_reg_17_198 ] [ src_reg_17_199 ] [ ] [ src_reg_17_200 ] [ src_reg_17_201 ] [ src_reg_17_202 ] [ src_reg_17_203 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
48 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ dst_reg_17_56 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ dst_reg_17_59 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ dst_reg_17_57 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
25 = MemoryDef(24) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ and.i.i.i_17_37 ] [ and6.i.i.i_17_39 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ ..i_17_122 ] [ .cond184.i_17_124 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
23 = MemoryDef(9) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
45 = MemoryPhi({__reg_bound_offset.exit.i,44},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_17_293 ] [ ] [ src_reg_17_294 ] [ src_reg_17_295 ] [ src_reg_17_296 ] [ [ src_reg_17_297 ] [ src_reg_17_298 ] ] [ src_reg_17_299 ] [ src_reg_17_300 ] [ src_reg_17_301 ] [ src_reg_17_302 ] [ ] [ src_reg_17_303 ] [ src_reg_17_304 ] [ src_reg_17_305 ] [ src_reg_17_306 ] ] 
- dst_reg: [ [ dst_reg_17_279 ] [ ] [ dst_reg_17_280 ] [ dst_reg_17_281 ] [ dst_reg_17_282 ] [ [ dst_reg_17_283 ] [ dst_reg_17_284 ] ] [ dst_reg_17_285 ] [ dst_reg_17_286 ] [ dst_reg_17_287 ] [ dst_reg_17_288 ] [ ] [ dst_reg_17_289 ] [ dst_reg_17_290 ] [ dst_reg_17_291 ] [ dst_reg_17_292 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ dst_reg_17_54 ] [ dst_reg_17_55 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_17_80 ] [ ] [ #x00000000 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and170.i_17_110 ] [ #x0000000000000000 ] ] [ and170.i_17_110 ] [ and170.i_17_110 ] [ dst_reg_17_58 ] [ storemerge.i.i_17_80 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}
26 = MemoryDef(25) : {
- dst_reg: [ [ dst_reg_17_50 ] [ ] [ dst_reg_17_51 ] [ dst_reg_17_52 ] [ dst_reg_17_53 ] [ [ and.i116.i_17_114 ] [ and9.i.i_17_116 ] ] [ i27.i.i_17_82 ] [ storemerge.i.i_17_80 ] [ and.i116.i_17_114 ] [ cond184.i_17_118 ] [ ] [ dst_reg_17_60 ] [ dst_reg_17_61 ] [ dst_reg_17_62 ] [ dst_reg_17_63 ] ] 
- src_reg: [ [ src_reg_17_64 ] [ ] [ src_reg_17_65 ] [ src_reg_17_66 ] [ src_reg_17_67 ] [ [ src_reg_17_68 ] [ src_reg_17_69 ] ] [ src_reg_17_70 ] [ src_reg_17_71 ] [ src_reg_17_72 ] [ src_reg_17_73 ] [ ] [ src_reg_17_74 ] [ src_reg_17_75 ] [ src_reg_17_76 ] [ src_reg_17_77 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_17_0 ] [ ] [ dst_reg_17_1 ] [ dst_reg_17_2 ] [ dst_reg_17_3 ] [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] [ dst_reg_17_6 ] [ dst_reg_17_7 ] [ dst_reg_17_8 ] [ dst_reg_17_9 ] [ ] [ dst_reg_17_10 ] [ dst_reg_17_11 ] [ dst_reg_17_12 ] [ dst_reg_17_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_17_4 ] [ dst_reg_17_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_4",
	"dst_reg_17_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8",
	"dst_reg_17_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8",
	"dst_reg_17_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8",
	"dst_reg_17_9",
	"",
	"",
	"dst_reg_17_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8",
	"dst_reg_17_9",
	"",
	"",
	"dst_reg_17_10",
	"dst_reg_17_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_17_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_0",
	[
		""
	],
	"dst_reg_17_1",
	"dst_reg_17_2",
	"dst_reg_17_3",
	[
		"dst_reg_17_4",
		"dst_reg_17_5"
	],
	"dst_reg_17_6",
	"dst_reg_17_7",
	"dst_reg_17_8",
	"dst_reg_17_9",
	"",
	"",
	"dst_reg_17_10",
	"dst_reg_17_11",
	"dst_reg_17_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_17_14 ] [ ] [ src_reg_17_15 ] [ src_reg_17_16 ] [ src_reg_17_17 ] [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] [ src_reg_17_20 ] [ src_reg_17_21 ] [ src_reg_17_22 ] [ src_reg_17_23 ] [ ] [ src_reg_17_24 ] [ src_reg_17_25 ] [ src_reg_17_26 ] [ src_reg_17_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_17_18 ] [ src_reg_17_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_17_18 ] [ src_reg_17_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_18",
	"src_reg_17_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22",
	"src_reg_17_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22",
	"src_reg_17_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22",
	"src_reg_17_23",
	"",
	"",
	"src_reg_17_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22",
	"src_reg_17_23",
	"",
	"",
	"src_reg_17_24",
	"src_reg_17_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_17_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_14",
	[
		""
	],
	"src_reg_17_15",
	"src_reg_17_16",
	"src_reg_17_17",
	[
		"src_reg_17_18",
		"src_reg_17_19"
	],
	"src_reg_17_20",
	"src_reg_17_21",
	"src_reg_17_22",
	"src_reg_17_23",
	"",
	"",
	"src_reg_17_24",
	"src_reg_17_25",
	"src_reg_17_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_17_321 ] [ ] [ src_reg_17_322 ] [ src_reg_17_323 ] [ src_reg_17_324 ] [ [ src_reg_17_325 ] [ src_reg_17_326 ] ] [ src_reg_17_327 ] [ src_reg_17_328 ] [ src_reg_17_329 ] [ src_reg_17_330 ] [ ] [ src_reg_17_331 ] [ src_reg_17_332 ] [ src_reg_17_333 ] [ src_reg_17_334 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_17_321 ] [ ] [ src_reg_17_322 ] [ src_reg_17_323 ] [ src_reg_17_324 ] [ [ src_reg_17_325 ] [ src_reg_17_326 ] ] [ src_reg_17_327 ] [ src_reg_17_328 ] [ src_reg_17_329 ] [ src_reg_17_330 ] [ ] [ src_reg_17_331 ] [ src_reg_17_332 ] [ src_reg_17_333 ] [ src_reg_17_334 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_321 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_322 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_323 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_324 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_17_325 ] [ src_reg_17_326 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_17_325 ] [ src_reg_17_326 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_325 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_325"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_326 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_325",
	"src_reg_17_326"
]

[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_327 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_328 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_329 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_17_330 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329",
	"src_reg_17_330"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329",
	"src_reg_17_330",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_331 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329",
	"src_reg_17_330",
	"",
	"",
	"src_reg_17_331"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_17_332 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329",
	"src_reg_17_330",
	"",
	"",
	"src_reg_17_331",
	"src_reg_17_332"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_17_333 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_17_321",
	[
		""
	],
	"src_reg_17_322",
	"src_reg_17_323",
	"src_reg_17_324",
	[
		"src_reg_17_325",
		"src_reg_17_326"
	],
	"src_reg_17_327",
	"src_reg_17_328",
	"src_reg_17_329",
	"src_reg_17_330",
	"",
	"",
	"src_reg_17_331",
	"src_reg_17_332",
	"src_reg_17_333"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_17_307 ] [ ] [ dst_reg_17_308 ] [ dst_reg_17_309 ] [ dst_reg_17_310 ] [ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] [ dst_reg_17_313 ] [ dst_reg_17_314 ] [ dst_reg_17_315 ] [ dst_reg_17_316 ] [ ] [ dst_reg_17_317 ] [ dst_reg_17_318 ] [ dst_reg_17_319 ] [ dst_reg_17_320 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_17_307 ] [ ] [ dst_reg_17_308 ] [ dst_reg_17_309 ] [ dst_reg_17_310 ] [ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] [ dst_reg_17_313 ] [ dst_reg_17_314 ] [ dst_reg_17_315 ] [ dst_reg_17_316 ] [ ] [ dst_reg_17_317 ] [ dst_reg_17_318 ] [ dst_reg_17_319 ] [ dst_reg_17_320 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_307 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_308 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_309 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_310 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_17_311 ] [ dst_reg_17_312 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_311 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_311"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_312 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_311",
	"dst_reg_17_312"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_313 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_314 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_315 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_17_316 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315",
	"dst_reg_17_316"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315",
	"dst_reg_17_316",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_317 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315",
	"dst_reg_17_316",
	"",
	"",
	"dst_reg_17_317"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_17_318 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315",
	"dst_reg_17_316",
	"",
	"",
	"dst_reg_17_317",
	"dst_reg_17_318"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_17_319 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_17_307",
	[
		""
	],
	"dst_reg_17_308",
	"dst_reg_17_309",
	"dst_reg_17_310",
	[
		"dst_reg_17_311",
		"dst_reg_17_312"
	],
	"dst_reg_17_313",
	"dst_reg_17_314",
	"dst_reg_17_315",
	"dst_reg_17_316",
	"",
	"",
	"dst_reg_17_317",
	"dst_reg_17_318",
	"dst_reg_17_319"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_AND_32
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_17_0",
      [ "" ],
      "dst_reg_17_1",
      "dst_reg_17_2",
      "dst_reg_17_3",
      [ "dst_reg_17_4", "dst_reg_17_5" ],
      "dst_reg_17_6",
      "dst_reg_17_7",
      "dst_reg_17_8",
      "dst_reg_17_9",
      "",
      "",
      "dst_reg_17_10",
      "dst_reg_17_11",
      "dst_reg_17_12"
   ],
   "src_reg" : [
      "src_reg_17_14",
      [ "" ],
      "src_reg_17_15",
      "src_reg_17_16",
      "src_reg_17_17",
      [ "src_reg_17_18", "src_reg_17_19" ],
      "src_reg_17_20",
      "src_reg_17_21",
      "src_reg_17_22",
      "src_reg_17_23",
      "",
      "",
      "src_reg_17_24",
      "src_reg_17_25",
      "src_reg_17_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_17_307",
      [ "" ],
      "dst_reg_17_308",
      "dst_reg_17_309",
      "dst_reg_17_310",
      [ "dst_reg_17_311", "dst_reg_17_312" ],
      "dst_reg_17_313",
      "dst_reg_17_314",
      "dst_reg_17_315",
      "dst_reg_17_316",
      "",
      "",
      "dst_reg_17_317",
      "dst_reg_17_318",
      "dst_reg_17_319"
   ],
   "src_reg" : [
      "src_reg_17_321",
      [ "" ],
      "src_reg_17_322",
      "src_reg_17_323",
      "src_reg_17_324",
      [ "src_reg_17_325", "src_reg_17_326" ],
      "src_reg_17_327",
      "src_reg_17_328",
      "src_reg_17_329",
      "src_reg_17_330",
      "",
      "",
      "src_reg_17_331",
      "src_reg_17_332",
      "src_reg_17_333"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun i24.i308.i_17_167 () (_ BitVec 64))
(declare-fun and8.i313.i_17_174 () (_ BitVec 64))
(declare-fun i23.i306.i_17_166 () (_ BitVec 64))
(declare-fun and6.i312.i_17_172 () (_ BitVec 64))
(declare-fun cmp.i.i_17_44 () (_ BitVec 1))
(declare-fun tobool.not.i.i_17_97 () (_ BitVec 1))
(declare-fun cmp18.not.i.not_17_98 () (_ BitVec 1))
(declare-fun tobool.not.i25.i_17_109 () (_ BitVec 1))
(declare-fun cmp24.old.i_17_99 () (_ BitVec 1))
(declare-fun cmp.i311.i_17_170 () (_ BitVec 1))
(declare-fun and6.i.i.i_17_39 () (_ BitVec 64))
(declare-fun and8.i117.i_17_115 () (_ BitVec 64))
(declare-fun cond35.i144.i_17_128 () (_ BitVec 64))
(declare-fun cond184.i_17_118 () (_ BitVec 64))
(declare-fun cmp31.i143.i_17_127 () (_ BitVec 1))
(declare-fun cond14.i135.i_17_126 () (_ BitVec 64))
(declare-fun .cond184.i_17_124 () (_ BitVec 64))
(declare-fun cmp10.i134.i_17_125 () (_ BitVec 1))
(declare-fun cmp187.i_17_120 () (_ BitVec 1))
(declare-fun and.i116.i_17_114 () (_ BitVec 64))
(declare-fun ..i_17_122 () (_ BitVec 64))
(declare-fun i27.i.i_17_82 () (_ BitVec 64))
(declare-fun storemerge.i20.i_17_95 () (_ BitVec 64))
(declare-fun storemerge.i.i_17_80 () (_ BitVec 64))
(declare-fun cmp182.i_17_117 () (_ BitVec 1))
(declare-fun and9.i.i_17_116 () (_ BitVec 64))
(declare-fun or3.i.i_17_113 () (_ BitVec 64))
(declare-fun or.i115.i_17_112 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_17_30 () (_ BitVec 64))
(declare-fun and.i.i.i_17_37 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_17_31 () (_ BitVec 64))
(declare-fun cmp.i.i.i.i_17_211 () (_ BitVec 1))
(declare-fun coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 () Bool)
(declare-fun neg.i.i.i_17_277 () (_ BitVec 64))
(declare-fun or.i.i.i_17_274 () (_ BitVec 64))
(declare-fun and4.i.i.i_17_278 () (_ BitVec 64))
(declare-fun and.i1.i.i_17_275 () (_ BitVec 64))
(declare-fun and6.i.i302.i_17_165 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_17_273 () (_ BitVec 64))
(declare-fun and.i.i301.i_17_163 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_17_271 () (_ BitVec 64))
(declare-fun sub.i.i.i_17_268 () (_ BitVec 64))
(declare-fun cmp.i.i.i_17_263 () (_ BitVec 1))
(declare-fun and.i.i336.i_17_269 () (_ BitVec 64))
(declare-fun i27.i317.i_17_208 () (_ BitVec 64))
(declare-fun notmask.i.i.i_17_266 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_17_264 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_17_260 () (_ BitVec 32))
(declare-fun phi.bo_17_257 () (_ BitVec 32))
(declare-fun and170.i_17_110 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0_17_93 () (_ BitVec 64))
(declare-fun if.then.i.i_coerce_reg_to_size.exit.i_17_79 () Bool)
(declare-fun if.else.i.i_coerce_reg_to_size.exit.i_17_78 () Bool)
(declare-fun dst_reg_17_63 () (_ BitVec 8))
(declare-fun dst_reg_17_13 () (_ BitVec 8))
(declare-fun dst_reg_17_62 () (_ BitVec 32))
(declare-fun dst_reg_17_12 () (_ BitVec 32))
(declare-fun dst_reg_17_61 () (_ BitVec 32))
(declare-fun dst_reg_17_11 () (_ BitVec 32))
(declare-fun dst_reg_17_60 () (_ BitVec 32))
(declare-fun dst_reg_17_10 () (_ BitVec 32))
(declare-fun dst_reg_17_59 () (_ BitVec 64))
(declare-fun dst_reg_17_9 () (_ BitVec 64))
(declare-fun dst_reg_17_58 () (_ BitVec 64))
(declare-fun dst_reg_17_57 () (_ BitVec 64))
(declare-fun dst_reg_17_7 () (_ BitVec 64))
(declare-fun dst_reg_17_56 () (_ BitVec 64))
(declare-fun dst_reg_17_6 () (_ BitVec 64))
(declare-fun dst_reg_17_55 () (_ BitVec 64))
(declare-fun dst_reg_17_54 () (_ BitVec 64))
(declare-fun dst_reg_17_53 () (_ BitVec 32))
(declare-fun dst_reg_17_3 () (_ BitVec 32))
(declare-fun dst_reg_17_52 () (_ BitVec 32))
(declare-fun dst_reg_17_2 () (_ BitVec 32))
(declare-fun dst_reg_17_51 () (_ BitVec 32))
(declare-fun dst_reg_17_1 () (_ BitVec 32))
(declare-fun dst_reg_17_50 () (_ BitVec 32))
(declare-fun src_reg_17_77 () (_ BitVec 8))
(declare-fun src_reg_17_27 () (_ BitVec 8))
(declare-fun src_reg_17_76 () (_ BitVec 32))
(declare-fun src_reg_17_26 () (_ BitVec 32))
(declare-fun src_reg_17_75 () (_ BitVec 32))
(declare-fun src_reg_17_25 () (_ BitVec 32))
(declare-fun src_reg_17_74 () (_ BitVec 32))
(declare-fun src_reg_17_24 () (_ BitVec 32))
(declare-fun src_reg_17_73 () (_ BitVec 64))
(declare-fun src_reg_17_23 () (_ BitVec 64))
(declare-fun src_reg_17_72 () (_ BitVec 64))
(declare-fun src_reg_17_22 () (_ BitVec 64))
(declare-fun src_reg_17_71 () (_ BitVec 64))
(declare-fun src_reg_17_21 () (_ BitVec 64))
(declare-fun src_reg_17_70 () (_ BitVec 64))
(declare-fun src_reg_17_20 () (_ BitVec 64))
(declare-fun src_reg_17_69 () (_ BitVec 64))
(declare-fun src_reg_17_19 () (_ BitVec 64))
(declare-fun src_reg_17_68 () (_ BitVec 64))
(declare-fun src_reg_17_18 () (_ BitVec 64))
(declare-fun src_reg_17_67 () (_ BitVec 32))
(declare-fun src_reg_17_17 () (_ BitVec 32))
(declare-fun src_reg_17_66 () (_ BitVec 32))
(declare-fun src_reg_17_16 () (_ BitVec 32))
(declare-fun src_reg_17_65 () (_ BitVec 32))
(declare-fun src_reg_17_15 () (_ BitVec 32))
(declare-fun src_reg_17_64 () (_ BitVec 32))
(declare-fun and6.i.i_17_46 () (_ BitVec 64))
(declare-fun and6.i.i6.i_17_84 () (_ BitVec 64))
(declare-fun and8.i17.i_17_91 () (_ BitVec 64))
(declare-fun cmp.i15.i_17_87 () (_ BitVec 1))
(declare-fun and6.i16.i_17_89 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_17_33 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_17_32 () (_ BitVec 64))
(declare-fun i25.i13.i_17_85 () (_ BitVec 64))
(declare-fun and8.i.i_17_48 () (_ BitVec 64))
(declare-fun if.then.i314.i_coerce_reg_to_size.exit320.i_17_205 () Bool)
(declare-fun if.else.i315.i_coerce_reg_to_size.exit320.i_17_204 () Bool)
(declare-fun dst_reg_17_189 () (_ BitVec 8))
(declare-fun dst_reg_17_142 () (_ BitVec 8))
(declare-fun dst_reg_17_188 () (_ BitVec 32))
(declare-fun dst_reg_17_141 () (_ BitVec 32))
(declare-fun dst_reg_17_187 () (_ BitVec 32))
(declare-fun dst_reg_17_140 () (_ BitVec 32))
(declare-fun dst_reg_17_186 () (_ BitVec 32))
(declare-fun dst_reg_17_139 () (_ BitVec 32))
(declare-fun dst_reg_17_185 () (_ BitVec 64))
(declare-fun storemerge_17_159 () (_ BitVec 64))
(declare-fun dst_reg_17_184 () (_ BitVec 64))
(declare-fun dst_reg_17_183 () (_ BitVec 64))
(declare-fun dst_reg_17_136 () (_ BitVec 64))
(declare-fun dst_reg_17_182 () (_ BitVec 64))
(declare-fun dst_reg_17_135 () (_ BitVec 64))
(declare-fun dst_reg_17_181 () (_ BitVec 64))
(declare-fun dst_reg_17_180 () (_ BitVec 64))
(declare-fun dst_reg_17_179 () (_ BitVec 32))
(declare-fun dst_reg_17_132 () (_ BitVec 32))
(declare-fun dst_reg_17_178 () (_ BitVec 32))
(declare-fun dst_reg_17_131 () (_ BitVec 32))
(declare-fun dst_reg_17_177 () (_ BitVec 32))
(declare-fun dst_reg_17_130 () (_ BitVec 32))
(declare-fun dst_reg_17_176 () (_ BitVec 32))
(declare-fun dst_reg_17_129 () (_ BitVec 32))
(declare-fun src_reg_17_203 () (_ BitVec 8))
(declare-fun src_reg_17_156 () (_ BitVec 8))
(declare-fun src_reg_17_202 () (_ BitVec 32))
(declare-fun src_reg_17_155 () (_ BitVec 32))
(declare-fun src_reg_17_201 () (_ BitVec 32))
(declare-fun src_reg_17_154 () (_ BitVec 32))
(declare-fun src_reg_17_200 () (_ BitVec 32))
(declare-fun src_reg_17_153 () (_ BitVec 32))
(declare-fun src_reg_17_199 () (_ BitVec 64))
(declare-fun src_reg_17_152 () (_ BitVec 64))
(declare-fun src_reg_17_198 () (_ BitVec 64))
(declare-fun src_reg_17_151 () (_ BitVec 64))
(declare-fun src_reg_17_197 () (_ BitVec 64))
(declare-fun src_reg_17_150 () (_ BitVec 64))
(declare-fun src_reg_17_196 () (_ BitVec 64))
(declare-fun src_reg_17_149 () (_ BitVec 64))
(declare-fun src_reg_17_195 () (_ BitVec 64))
(declare-fun src_reg_17_148 () (_ BitVec 64))
(declare-fun src_reg_17_194 () (_ BitVec 64))
(declare-fun src_reg_17_147 () (_ BitVec 64))
(declare-fun src_reg_17_193 () (_ BitVec 32))
(declare-fun src_reg_17_146 () (_ BitVec 32))
(declare-fun src_reg_17_192 () (_ BitVec 32))
(declare-fun src_reg_17_145 () (_ BitVec 32))
(declare-fun src_reg_17_191 () (_ BitVec 32))
(declare-fun src_reg_17_144 () (_ BitVec 32))
(declare-fun src_reg_17_190 () (_ BitVec 32))
(declare-fun src_reg_17_143 () (_ BitVec 32))
(declare-fun xor.i.i.i_17_209 () (_ BitVec 64))
(declare-fun storemerge.i316.i_17_206 () (_ BitVec 64))
(declare-fun i24.i.i_17_41 () (_ BitVec 64))
(declare-fun i23.i.i_17_40 () (_ BitVec 64))
(declare-fun if.then166.i_if.then308.i_17_158 () Bool)
(declare-fun if.end171.i_if.then308.i_17_157 () Bool)
(declare-fun dst_reg_17_138 () (_ BitVec 64))
(declare-fun dst_reg_17_137 () (_ BitVec 64))
(declare-fun dst_reg_17_134 () (_ BitVec 64))
(declare-fun dst_reg_17_133 () (_ BitVec 64))
(declare-fun i25.i309.i_17_168 () (_ BitVec 64))
(declare-fun i20.i300.i_17_161 () (_ BitVec 64))
(declare-fun i18.i298.i_17_160 () (_ BitVec 64))
(declare-fun i25.i.i_17_42 () (_ BitVec 64))
(declare-fun dst_reg_17_8 () (_ BitVec 64))
(declare-fun i20.i.i_17_35 () (_ BitVec 64))
(declare-fun i18.i.i_17_34 () (_ BitVec 64))
(declare-fun dst_reg_17_5 () (_ BitVec 64))
(declare-fun dst_reg_17_4 () (_ BitVec 64))
(declare-fun src_reg_17_14 () (_ BitVec 32))
(declare-fun dst_reg_17_0 () (_ BitVec 32))
(declare-fun src_reg_17_334 () (_ BitVec 8))
(declare-fun src_reg_17_306 () (_ BitVec 8))
(declare-fun src_reg_17_333 () (_ BitVec 32))
(declare-fun src_reg_17_305 () (_ BitVec 32))
(declare-fun src_reg_17_332 () (_ BitVec 32))
(declare-fun src_reg_17_304 () (_ BitVec 32))
(declare-fun src_reg_17_331 () (_ BitVec 32))
(declare-fun src_reg_17_303 () (_ BitVec 32))
(declare-fun src_reg_17_330 () (_ BitVec 64))
(declare-fun src_reg_17_302 () (_ BitVec 64))
(declare-fun src_reg_17_329 () (_ BitVec 64))
(declare-fun src_reg_17_301 () (_ BitVec 64))
(declare-fun src_reg_17_328 () (_ BitVec 64))
(declare-fun src_reg_17_300 () (_ BitVec 64))
(declare-fun src_reg_17_327 () (_ BitVec 64))
(declare-fun src_reg_17_299 () (_ BitVec 64))
(declare-fun src_reg_17_326 () (_ BitVec 64))
(declare-fun src_reg_17_298 () (_ BitVec 64))
(declare-fun src_reg_17_325 () (_ BitVec 64))
(declare-fun src_reg_17_297 () (_ BitVec 64))
(declare-fun src_reg_17_324 () (_ BitVec 32))
(declare-fun src_reg_17_296 () (_ BitVec 32))
(declare-fun src_reg_17_323 () (_ BitVec 32))
(declare-fun src_reg_17_295 () (_ BitVec 32))
(declare-fun src_reg_17_322 () (_ BitVec 32))
(declare-fun src_reg_17_294 () (_ BitVec 32))
(declare-fun src_reg_17_321 () (_ BitVec 32))
(declare-fun src_reg_17_293 () (_ BitVec 32))
(declare-fun dst_reg_17_320 () (_ BitVec 8))
(declare-fun dst_reg_17_292 () (_ BitVec 8))
(declare-fun dst_reg_17_319 () (_ BitVec 32))
(declare-fun dst_reg_17_291 () (_ BitVec 32))
(declare-fun dst_reg_17_318 () (_ BitVec 32))
(declare-fun dst_reg_17_290 () (_ BitVec 32))
(declare-fun dst_reg_17_317 () (_ BitVec 32))
(declare-fun dst_reg_17_289 () (_ BitVec 32))
(declare-fun dst_reg_17_316 () (_ BitVec 64))
(declare-fun dst_reg_17_288 () (_ BitVec 64))
(declare-fun dst_reg_17_315 () (_ BitVec 64))
(declare-fun dst_reg_17_287 () (_ BitVec 64))
(declare-fun dst_reg_17_314 () (_ BitVec 64))
(declare-fun dst_reg_17_286 () (_ BitVec 64))
(declare-fun dst_reg_17_313 () (_ BitVec 64))
(declare-fun dst_reg_17_285 () (_ BitVec 64))
(declare-fun dst_reg_17_312 () (_ BitVec 64))
(declare-fun dst_reg_17_284 () (_ BitVec 64))
(declare-fun dst_reg_17_311 () (_ BitVec 64))
(declare-fun dst_reg_17_283 () (_ BitVec 64))
(declare-fun dst_reg_17_310 () (_ BitVec 32))
(declare-fun dst_reg_17_282 () (_ BitVec 32))
(declare-fun dst_reg_17_309 () (_ BitVec 32))
(declare-fun dst_reg_17_281 () (_ BitVec 32))
(declare-fun dst_reg_17_308 () (_ BitVec 32))
(declare-fun dst_reg_17_280 () (_ BitVec 32))
(declare-fun dst_reg_17_307 () (_ BitVec 32))
(declare-fun dst_reg_17_279 () (_ BitVec 32))
(declare-fun add.i.i.i335.i_17_255 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_17_254 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_17_251 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_17_253 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_17_250 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_17_243 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_17_247 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_17_245 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_17_242 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_17_249 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_17_235 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_17_239 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_17_237 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_17_234 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_17_241 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_17_227 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_17_231 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_17_229 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_17_226 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_17_233 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_17_219 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_17_223 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_17_221 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_17_216 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_17_225 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_17_213 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_17_215 () (_ BitVec 64))
(assert
 (let (($x371 (= and8.i313.i_17_174 (bvand i24.i308.i_17_167 (_ bv4294967295 64)))))
 (let (($x368 (= and6.i312.i_17_172 (bvand i23.i306.i_17_166 (_ bv4294967295 64)))))
 (let (($x94 (= cmp.i.i_17_44 (_ bv1 1))))
 (let (($x92 (= cmp.i.i_17_44 (_ bv0 1))))
 (let (($x695 (or $x92 $x94)))
 (let (($x197 (= tobool.not.i.i_17_97 (_ bv1 1))))
 (let (($x696 (and $x197 $x695)))
 (let (($x202 (= cmp18.not.i.not_17_98 (_ bv1 1))))
 (let (($x698 (and $x202 $x696)))
 (let (($x216 (= tobool.not.i25.i_17_109 (_ bv1 1))))
 (let (($x703 (and $x216 $x698)))
 (let (($x196 (= tobool.not.i.i_17_97 (_ bv0 1))))
 (let (($x697 (and $x196 $x695)))
 (let (($x206 (= cmp24.old.i_17_99 (_ bv0 1))))
 (let (($x701 (and $x206 $x697)))
 (let (($x215 (= tobool.not.i25.i_17_109 (_ bv0 1))))
 (let (($x704 (and $x215 $x698)))
 (let (($x705 (or $x704 $x701)))
 (let (($x706 (or $x705 $x703)))
 (let (($x364 (= cmp.i311.i_17_170 (_ bv1 1))))
 (let (($x707 (and $x364 $x706)))
 (let (($x819 (=> $x707 (and $x368 $x371))))
 (let (($x817 (=> $x698 (and (ite (= and6.i.i.i_17_39 (_ bv0 64)) $x216 $x215)))))
 (let (($x269 (= cmp31.i143.i_17_127 (_ bv1 1))))
 (let (($x274 (ite $x269 (= cond35.i144.i_17_128 cond184.i_17_118) (= cond35.i144.i_17_128 and8.i117.i_17_115))))
 (let (($x268 (= cmp31.i143.i_17_127 (_ bv0 1))))
 (let (($x270 (ite (bvult cond184.i_17_118 and8.i117.i_17_115) $x269 $x268)))
 (let (($x260 (= cmp10.i134.i_17_125 (_ bv1 1))))
 (let (($x265 (ite $x260 (= cond14.i135.i_17_126 .cond184.i_17_124) (= cond14.i135.i_17_126 and8.i117.i_17_115))))
 (let (($x259 (= cmp10.i134.i_17_125 (_ bv0 1))))
 (let (($x261 (ite (bvult .cond184.i_17_124 and8.i117.i_17_115) $x260 $x259)))
 (let (($x247 (= cmp187.i_17_120 (_ bv1 1))))
 (let (($x256 (ite $x247 (= .cond184.i_17_124 (_ bv9223372036854775807 64)) (= .cond184.i_17_124 cond184.i_17_118))))
 (let (($x252 (ite $x247 (= ..i_17_122 (_ bv9223372036854775808 64)) (= ..i_17_122 and.i116.i_17_114))))
 (let (($x246 (= cmp187.i_17_120 (_ bv0 1))))
 (let (($x248 (ite (bvslt i27.i.i_17_82 (_ bv0 64)) $x247 $x246)))
 (let (($x238 (= cmp182.i_17_117 (_ bv1 1))))
 (let (($x243 (ite $x238 (= cond184.i_17_118 storemerge.i.i_17_80) (= cond184.i_17_118 storemerge.i20.i_17_95))))
 (let (($x237 (= cmp182.i_17_117 (_ bv0 1))))
 (let (($x239 (ite (bvult storemerge.i.i_17_80 storemerge.i20.i_17_95) $x238 $x237)))
 (let (($x234 (= and9.i.i_17_116 (bvxor and8.i117.i_17_115 and.i116.i_17_114))))
 (let (($x231 (= and8.i117.i_17_115 (bvand or.i115.i_17_112 or3.i.i_17_113))))
 (let ((?x219 (bvand and.i.i.i_17_37 src_reg1.sroa.3.0.copyload_17_30)))
 (let (($x228 (= and.i116.i_17_114 ?x219)))
 (let (($x226 (= or3.i.i_17_113 (bvor src_reg1.sroa.10.0.copyload_17_31 src_reg1.sroa.3.0.copyload_17_30))))
 (let (($x223 (= or.i115.i_17_112 (bvor and6.i.i.i_17_39 and.i.i.i_17_37))))
 (let (($x814 (and $x223 $x226 $x228 $x231 $x234 $x239 $x243 $x248 $x252 $x256 $x261 $x265 $x270 $x274)))
 (let (($x815 (=> $x705 $x814)))
 (let (($x363 (= cmp.i311.i_17_170 (_ bv0 1))))
 (let (($x708 (and $x363 $x706)))
 (let (($x709 (or $x708 $x707)))
 (let (($x444 (= cmp.i.i.i.i_17_211 (_ bv1 1))))
 (let (($x710 (and $x444 $x709)))
 (let (($x733 (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 $x710)))
 (let (($x443 (= cmp.i.i.i.i_17_211 (_ bv0 1))))
 (let (($x711 (and $x443 $x709)))
 (let (($x732 (= if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 $x711)))
 (let (($x610 (= and4.i.i.i_17_278 (bvand or.i.i.i_17_274 neg.i.i.i_17_277))))
 (let (($x607 (= neg.i.i.i_17_277 (bvxor and.i1.i.i_17_275 (_ bv18446744073709551615 64)))))
 (let (($x604 (= and.i1.i.i_17_275 (bvand retval.sroa.3.0.i.i.i_17_273 and6.i.i302.i_17_165))))
 (let (($x601 (= or.i.i.i_17_274 (bvor retval.sroa.0.0.i.i.i_17_271 and.i.i301.i_17_163))))
 (let (($x577 (= cmp.i.i.i_17_263 (_ bv1 1))))
 (let (($x598 (ite $x577 (= retval.sroa.3.0.i.i.i_17_273 (_ bv4294967295 64)) (= retval.sroa.3.0.i.i.i_17_273 sub.i.i.i_17_268))))
 (let (($x594 (ite $x577 (= retval.sroa.0.0.i.i.i_17_271 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_17_271 and.i.i336.i_17_269))))
 (let (($x590 (= and.i.i336.i_17_269 (bvand notmask.i.i.i_17_266 i27.i317.i_17_208))))
 (let (($x587 (= sub.i.i.i_17_268 (bvxor notmask.i.i.i_17_266 (_ bv18446744073709551615 64)))))
 (let (($x584 (= notmask.i.i.i_17_266 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_17_264))))
 (let (($x581 (= sh_prom.i.i.i_17_264 ((_ zero_extend 32) retval.0.i.i.i.i_17_260))))
 (let (($x576 (= cmp.i.i.i_17_263 (_ bv0 1))))
 (let (($x578 (ite (bvugt retval.0.i.i.i.i_17_260 (_ bv63 32)) $x577 $x576)))
 (let (($x572 (= retval.0.i.i.i.i_17_260 (_ bv0 32))))
 (let (($x573 (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_17_259 $x572)))
 (let (($x570 (= retval.0.i.i.i.i_17_260 phi.bo_17_257)))
 (let (($x571 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_17_258 $x570)))
 (let (($x812 (and $x571 $x573 $x578 $x581 $x584 $x587 $x590 $x594 $x598 $x601 $x604 $x607 $x610 $x732 $x733)))
 (let (($x712 (or $x711 $x710)))
 (let (($x813 (=> $x712 $x812)))
 (let (($x811 (=> $x703 (and (= and170.i_17_110 ?x219)))))
 (let (($x207 (= cmp24.old.i_17_99 (_ bv1 1))))
 (let (($x208 (ite (bvugt src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95) $x207 $x206)))
 (let (($x809 (=> $x697 (and $x208))))
 (let (($x719 (= if.then.i.i_coerce_reg_to_size.exit.i_17_79 $x94)))
 (let (($x718 (= if.else.i.i_coerce_reg_to_size.exit.i_17_78 $x92)))
 (let (($x158 (= dst_reg_17_13 dst_reg_17_63)))
 (let (($x157 (= dst_reg_17_12 dst_reg_17_62)))
 (let (($x156 (= dst_reg_17_11 dst_reg_17_61)))
 (let (($x155 (= dst_reg_17_10 dst_reg_17_60)))
 (let (($x154 (= dst_reg_17_9 dst_reg_17_59)))
 (let (($x159 (= (_ bv0 64) dst_reg_17_58)))
 (let (($x152 (= dst_reg_17_7 dst_reg_17_57)))
 (let (($x151 (= dst_reg_17_6 dst_reg_17_56)))
 (let (($x150 (= and6.i.i.i_17_39 dst_reg_17_55)))
 (let (($x149 (= and.i.i.i_17_37 dst_reg_17_54)))
 (let (($x148 (= dst_reg_17_3 dst_reg_17_53)))
 (let (($x147 (= dst_reg_17_2 dst_reg_17_52)))
 (let (($x146 (= dst_reg_17_1 dst_reg_17_51)))
 (let (($x145 (= (_ bv1 32) dst_reg_17_50)))
 (let (($x144 (= src_reg_17_27 src_reg_17_77)))
 (let (($x143 (= src_reg_17_26 src_reg_17_76)))
 (let (($x142 (= src_reg_17_25 src_reg_17_75)))
 (let (($x141 (= src_reg_17_24 src_reg_17_74)))
 (let (($x140 (= src_reg_17_23 src_reg_17_73)))
 (let (($x139 (= src_reg_17_22 src_reg_17_72)))
 (let (($x138 (= src_reg_17_21 src_reg_17_71)))
 (let (($x137 (= src_reg_17_20 src_reg_17_70)))
 (let (($x136 (= src_reg_17_19 src_reg_17_69)))
 (let (($x135 (= src_reg_17_18 src_reg_17_68)))
 (let (($x134 (= src_reg_17_17 src_reg_17_67)))
 (let (($x133 (= src_reg_17_16 src_reg_17_66)))
 (let (($x132 (= src_reg_17_15 src_reg_17_65)))
 (let (($x131 (= (_ bv1 32) src_reg_17_64)))
 (let (($x716 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x159 $x154 $x155 $x156 $x157 $x158)))
 (let (($x717 (=> $x92 $x716)))
 (let (($x153 (= and6.i.i_17_46 dst_reg_17_58)))
 (let (($x714 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x153 $x154 $x155 $x156 $x157 $x158)))
 (let (($x715 (=> $x94 $x714)))
 (let (($x198 (ite (= and6.i.i6.i_17_84 (_ bv0 64)) $x197 $x196)))
 (let (($x178 (= cmp.i15.i_17_87 (_ bv1 1))))
 (let (($x193 (ite $x178 (= storemerge.i20.i_17_95 and8.i17.i_17_91) (= storemerge.i20.i_17_95 (_ bv4294967295 64)))))
 (let (($x189 (ite $x178 (= src_reg1.sroa.17.0_17_93 and6.i16.i_17_89) (= src_reg1.sroa.17.0_17_93 (_ bv0 64)))))
 (let (($x185 (= and8.i17.i_17_91 (bvand src_reg1.sroa.22.0.copyload_17_33 (_ bv4294967295 64)))))
 (let (($x182 (= and6.i16.i_17_89 (bvand src_reg1.sroa.17.0.copyload_17_32 (_ bv4294967295 64)))))
 (let (($x177 (= cmp.i15.i_17_87 (_ bv0 1))))
 (let (($x179 (ite (bvult i25.i13.i_17_85 (_ bv4294967296 64)) $x178 $x177)))
 (let ((?x173 (bvxor src_reg1.sroa.22.0.copyload_17_33 src_reg1.sroa.17.0.copyload_17_32)))
 (let (($x174 (= i25.i13.i_17_85 ?x173)))
 (let (($x171 (= and6.i.i6.i_17_84 (bvand src_reg1.sroa.10.0.copyload_17_31 (_ bv4294967295 64)))))
 (let (($x168 (= dst_reg_17_58 i27.i.i_17_82)))
 (let (($x165 (= storemerge.i.i_17_80 and8.i.i_17_48)))
 (let (($x166 (=> if.then.i.i_coerce_reg_to_size.exit.i_17_79 $x165)))
 (let (($x163 (= storemerge.i.i_17_80 (_ bv4294967295 64))))
 (let (($x164 (=> if.else.i.i_coerce_reg_to_size.exit.i_17_78 $x163)))
 (let (($x806 (and $x164 $x166 $x168 $x171 $x174 $x179 $x182 $x185 $x189 $x193 $x198 $x715 $x717 $x718 $x719)))
 (let (($x807 (=> $x695 $x806)))
 (let (($x201 (= cmp18.not.i.not_17_98 (_ bv0 1))))
 (let (($x203 (ite (= src_reg1.sroa.17.0_17_93 storemerge.i20.i_17_95) $x202 $x201)))
 (let (($x805 (=> $x696 (and $x203))))
 (let (($x731 (= if.then.i314.i_coerce_reg_to_size.exit320.i_17_205 $x707)))
 (let (($x730 (= if.else.i315.i_coerce_reg_to_size.exit320.i_17_204 $x708)))
 (let (($x427 (= dst_reg_17_142 dst_reg_17_189)))
 (let (($x426 (= dst_reg_17_141 dst_reg_17_188)))
 (let (($x425 (= dst_reg_17_140 dst_reg_17_187)))
 (let (($x424 (= dst_reg_17_139 dst_reg_17_186)))
 (let (($x423 (= storemerge_17_159 dst_reg_17_185)))
 (let (($x428 (= (_ bv0 64) dst_reg_17_184)))
 (let (($x421 (= dst_reg_17_136 dst_reg_17_183)))
 (let (($x420 (= dst_reg_17_135 dst_reg_17_182)))
 (let (($x419 (= and6.i.i302.i_17_165 dst_reg_17_181)))
 (let (($x418 (= and.i.i301.i_17_163 dst_reg_17_180)))
 (let (($x417 (= dst_reg_17_132 dst_reg_17_179)))
 (let (($x416 (= dst_reg_17_131 dst_reg_17_178)))
 (let (($x415 (= dst_reg_17_130 dst_reg_17_177)))
 (let (($x414 (= dst_reg_17_129 dst_reg_17_176)))
 (let (($x413 (= src_reg_17_156 src_reg_17_203)))
 (let (($x412 (= src_reg_17_155 src_reg_17_202)))
 (let (($x411 (= src_reg_17_154 src_reg_17_201)))
 (let (($x410 (= src_reg_17_153 src_reg_17_200)))
 (let (($x409 (= src_reg_17_152 src_reg_17_199)))
 (let (($x408 (= src_reg_17_151 src_reg_17_198)))
 (let (($x407 (= src_reg_17_150 src_reg_17_197)))
 (let (($x406 (= src_reg_17_149 src_reg_17_196)))
 (let (($x405 (= src_reg_17_148 src_reg_17_195)))
 (let (($x404 (= src_reg_17_147 src_reg_17_194)))
 (let (($x403 (= src_reg_17_146 src_reg_17_193)))
 (let (($x402 (= src_reg_17_145 src_reg_17_192)))
 (let (($x401 (= src_reg_17_144 src_reg_17_191)))
 (let (($x400 (= src_reg_17_143 src_reg_17_190)))
 (let (($x728 (and $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x418 $x419 $x420 $x421 $x428 $x423 $x424 $x425 $x426 $x427)))
 (let (($x729 (=> $x708 $x728)))
 (let (($x422 (= and6.i312.i_17_172 dst_reg_17_184)))
 (let (($x726 (and $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x418 $x419 $x420 $x421 $x422 $x423 $x424 $x425 $x426 $x427)))
 (let (($x727 (=> $x707 $x726)))
 (let (($x445 (ite (= xor.i.i.i_17_209 (_ bv0 64)) $x444 $x443)))
 (let (($x440 (= xor.i.i.i_17_209 (bvxor i27.i317.i_17_208 storemerge.i316.i_17_206))))
 (let (($x437 (= dst_reg_17_184 i27.i317.i_17_208)))
 (let (($x434 (= storemerge.i316.i_17_206 and8.i313.i_17_174)))
 (let (($x435 (=> if.then.i314.i_coerce_reg_to_size.exit320.i_17_205 $x434)))
 (let (($x432 (= storemerge.i316.i_17_206 (_ bv4294967295 64))))
 (let (($x433 (=> if.else.i315.i_coerce_reg_to_size.exit320.i_17_204 $x432)))
 (let (($x803 (=> $x709 (and $x433 $x435 $x437 $x440 $x445 $x727 $x729 $x730 $x731))))
 (let (($x101 (= and8.i.i_17_48 (bvand i24.i.i_17_41 (_ bv4294967295 64)))))
 (let (($x98 (= and6.i.i_17_46 (bvand i23.i.i_17_40 (_ bv4294967295 64)))))
 (let (($x801 (=> $x94 (and $x98 $x101))))
 (let (($x725 (= if.then166.i_if.then308.i_17_158 $x703)))
 (let (($x724 (= if.end171.i_if.then308.i_17_157 $x705)))
 (let (($x330 (= dst_reg_17_63 dst_reg_17_142)))
 (let (($x329 (= dst_reg_17_62 dst_reg_17_141)))
 (let (($x328 (= dst_reg_17_61 dst_reg_17_140)))
 (let (($x327 (= dst_reg_17_60 dst_reg_17_139)))
 (let (($x336 (= cond184.i_17_118 dst_reg_17_138)))
 (let (($x335 (= and.i116.i_17_114 dst_reg_17_137)))
 (let (($x334 (= cond14.i135.i_17_126 dst_reg_17_136)))
 (let (($x333 (= and.i116.i_17_114 dst_reg_17_135)))
 (let (($x332 (= and9.i.i_17_116 dst_reg_17_134)))
 (let (($x331 (= and.i116.i_17_114 dst_reg_17_133)))
 (let (($x320 (= dst_reg_17_53 dst_reg_17_132)))
 (let (($x319 (= dst_reg_17_52 dst_reg_17_131)))
 (let (($x318 (= dst_reg_17_51 dst_reg_17_130)))
 (let (($x317 (= dst_reg_17_50 dst_reg_17_129)))
 (let (($x316 (= src_reg_17_77 src_reg_17_156)))
 (let (($x315 (= src_reg_17_76 src_reg_17_155)))
 (let (($x314 (= src_reg_17_75 src_reg_17_154)))
 (let (($x313 (= src_reg_17_74 src_reg_17_153)))
 (let (($x312 (= src_reg_17_73 src_reg_17_152)))
 (let (($x311 (= src_reg_17_72 src_reg_17_151)))
 (let (($x310 (= src_reg_17_71 src_reg_17_150)))
 (let (($x309 (= src_reg_17_70 src_reg_17_149)))
 (let (($x308 (= src_reg_17_69 src_reg_17_148)))
 (let (($x307 (= src_reg_17_68 src_reg_17_147)))
 (let (($x306 (= src_reg_17_67 src_reg_17_146)))
 (let (($x305 (= src_reg_17_66 src_reg_17_145)))
 (let (($x304 (= src_reg_17_65 src_reg_17_144)))
 (let (($x303 (= src_reg_17_64 src_reg_17_143)))
 (let (($x722 (and $x303 $x304 $x305 $x306 $x307 $x308 $x309 $x310 $x311 $x312 $x313 $x314 $x315 $x316 $x317 $x318 $x319 $x320 $x331 $x332 $x333 $x334 $x335 $x336 $x327 $x328 $x329 $x330)))
 (let (($x723 (=> $x705 $x722)))
 (let (($x326 (= storemerge.i.i_17_80 dst_reg_17_138)))
 (let (($x325 (= and170.i_17_110 dst_reg_17_137)))
 (let (($x324 (= and170.i_17_110 dst_reg_17_136)))
 (let (($x323 (= and170.i_17_110 dst_reg_17_135)))
 (let (($x322 (= (_ bv0 64) dst_reg_17_134)))
 (let (($x321 (= and170.i_17_110 dst_reg_17_133)))
 (let (($x720 (and $x303 $x304 $x305 $x306 $x307 $x308 $x309 $x310 $x311 $x312 $x313 $x314 $x315 $x316 $x317 $x318 $x319 $x320 $x321 $x322 $x323 $x324 $x325 $x326 $x327 $x328 $x329 $x330)))
 (let (($x721 (=> $x703 $x720)))
 (let (($x365 (ite (bvult i25.i309.i_17_168 (_ bv4294967296 64)) $x364 $x363)))
 (let (($x360 (= i25.i309.i_17_168 (bvxor i24.i308.i_17_167 i23.i306.i_17_166))))
 (let (($x357 (= storemerge_17_159 i24.i308.i_17_167)))
 (let (($x355 (= dst_reg_17_137 i23.i306.i_17_166)))
 (let (($x353 (= and6.i.i302.i_17_165 (bvand i20.i300.i_17_161 (_ bv4294967295 64)))))
 (let (($x350 (= and.i.i301.i_17_163 (bvand i18.i298.i_17_160 (_ bv4294967295 64)))))
 (let (($x347 (= dst_reg_17_134 i20.i300.i_17_161)))
 (let (($x345 (= dst_reg_17_133 i18.i298.i_17_160)))
 (let (($x342 (= storemerge_17_159 and170.i_17_110)))
 (let (($x343 (=> if.then166.i_if.then308.i_17_158 $x342)))
 (let (($x340 (= storemerge_17_159 cond35.i144.i_17_128)))
 (let (($x341 (=> if.end171.i_if.then308.i_17_157 $x340)))
 (let (($x798 (and $x341 $x343 $x345 $x347 $x350 $x353 $x355 $x357 $x360 $x365 $x721 $x723 $x724 $x725)))
 (let (($x799 (=> $x706 $x798)))
 (let (($x95 (ite (bvult i25.i.i_17_42 (_ bv4294967296 64)) $x94 $x92)))
 (let (($x87 (= i25.i.i_17_42 (bvxor i24.i.i_17_41 i23.i.i_17_40))))
 (let (($x84 (= dst_reg_17_9 i24.i.i_17_41)))
 (let (($x82 (= dst_reg_17_8 i23.i.i_17_40)))
 (let (($x80 (= and6.i.i.i_17_39 (bvand i20.i.i_17_35 (_ bv4294967295 64)))))
 (let (($x77 (= and.i.i.i_17_37 (bvand i18.i.i_17_34 (_ bv4294967295 64)))))
 (let (($x73 (= dst_reg_17_5 i20.i.i_17_35)))
 (let (($x71 (= dst_reg_17_4 i18.i.i_17_34)))
 (let (($x69 (= src_reg_17_23 src_reg1.sroa.22.0.copyload_17_33)))
 (let (($x67 (= src_reg_17_22 src_reg1.sroa.17.0.copyload_17_32)))
 (let (($x65 (= src_reg_17_19 src_reg1.sroa.10.0.copyload_17_31)))
 (let (($x63 (= src_reg_17_18 src_reg1.sroa.3.0.copyload_17_30)))
 (let (($x60 (= src_reg_17_27 src_reg_17_27)))
 (let (($x59 (= src_reg_17_26 src_reg_17_26)))
 (let (($x58 (= src_reg_17_25 src_reg_17_25)))
 (let (($x57 (= src_reg_17_24 src_reg_17_24)))
 (let (($x56 (= src_reg_17_23 src_reg_17_23)))
 (let (($x55 (= src_reg_17_22 src_reg_17_22)))
 (let (($x54 (= src_reg_17_21 src_reg_17_21)))
 (let (($x53 (= src_reg_17_20 src_reg_17_20)))
 (let (($x52 (= src_reg_17_19 src_reg_17_19)))
 (let (($x51 (= src_reg_17_18 src_reg_17_18)))
 (let (($x50 (= src_reg_17_17 src_reg_17_17)))
 (let (($x49 (= src_reg_17_16 src_reg_17_16)))
 (let (($x48 (= src_reg_17_15 src_reg_17_15)))
 (let (($x47 (= src_reg_17_14 src_reg_17_14)))
 (let (($x32 (= dst_reg_17_13 dst_reg_17_13)))
 (let (($x31 (= dst_reg_17_12 dst_reg_17_12)))
 (let (($x30 (= dst_reg_17_11 dst_reg_17_11)))
 (let (($x29 (= dst_reg_17_10 dst_reg_17_10)))
 (let (($x28 (= dst_reg_17_9 dst_reg_17_9)))
 (let (($x27 (= dst_reg_17_8 dst_reg_17_8)))
 (let (($x26 (= dst_reg_17_7 dst_reg_17_7)))
 (let (($x25 (= dst_reg_17_6 dst_reg_17_6)))
 (let (($x24 (= dst_reg_17_5 dst_reg_17_5)))
 (let (($x23 (= dst_reg_17_4 dst_reg_17_4)))
 (let (($x22 (= dst_reg_17_3 dst_reg_17_3)))
 (let (($x21 (= dst_reg_17_2 dst_reg_17_2)))
 (let (($x20 (= dst_reg_17_1 dst_reg_17_1)))
 (let (($x19 (= dst_reg_17_0 dst_reg_17_0)))
 (let (($x793 (= src_reg_17_306 src_reg_17_334)))
 (let (($x792 (= src_reg_17_305 src_reg_17_333)))
 (let (($x791 (= src_reg_17_304 src_reg_17_332)))
 (let (($x790 (= src_reg_17_303 src_reg_17_331)))
 (let (($x789 (= src_reg_17_302 src_reg_17_330)))
 (let (($x788 (= src_reg_17_301 src_reg_17_329)))
 (let (($x787 (= src_reg_17_300 src_reg_17_328)))
 (let (($x786 (= src_reg_17_299 src_reg_17_327)))
 (let (($x785 (= src_reg_17_298 src_reg_17_326)))
 (let (($x784 (= src_reg_17_297 src_reg_17_325)))
 (let (($x783 (= src_reg_17_296 src_reg_17_324)))
 (let (($x782 (= src_reg_17_295 src_reg_17_323)))
 (let (($x781 (= src_reg_17_294 src_reg_17_322)))
 (let (($x780 (= src_reg_17_293 src_reg_17_321)))
 (let (($x765 (= dst_reg_17_292 dst_reg_17_320)))
 (let (($x764 (= dst_reg_17_291 dst_reg_17_319)))
 (let (($x763 (= dst_reg_17_290 dst_reg_17_318)))
 (let (($x762 (= dst_reg_17_289 dst_reg_17_317)))
 (let (($x761 (= dst_reg_17_288 dst_reg_17_316)))
 (let (($x760 (= dst_reg_17_287 dst_reg_17_315)))
 (let (($x759 (= dst_reg_17_286 dst_reg_17_314)))
 (let (($x758 (= dst_reg_17_285 dst_reg_17_313)))
 (let (($x757 (= dst_reg_17_284 dst_reg_17_312)))
 (let (($x756 (= dst_reg_17_283 dst_reg_17_311)))
 (let (($x755 (= dst_reg_17_282 dst_reg_17_310)))
 (let (($x754 (= dst_reg_17_281 dst_reg_17_309)))
 (let (($x753 (= dst_reg_17_280 dst_reg_17_308)))
 (let (($x752 (= dst_reg_17_279 dst_reg_17_307)))
 (let (($x694 (= dst_reg_17_63 dst_reg_17_292)))
 (let (($x693 (= dst_reg_17_62 dst_reg_17_291)))
 (let (($x692 (= dst_reg_17_61 dst_reg_17_290)))
 (let (($x691 (= (_ bv0 32) dst_reg_17_289)))
 (let (($x690 (= (_ bv18446744073709551615 64) dst_reg_17_288)))
 (let (($x689 (= (_ bv0 64) dst_reg_17_287)))
 (let (($x688 (= (_ bv9223372036854775807 64) dst_reg_17_286)))
 (let (($x687 (= (_ bv9223372036854775808 64) dst_reg_17_285)))
 (let (($x686 (= (_ bv18446744073709551615 64) dst_reg_17_284)))
 (let (($x685 (= (_ bv0 64) dst_reg_17_283)))
 (let (($x684 (= dst_reg_17_53 dst_reg_17_282)))
 (let (($x683 (= dst_reg_17_52 dst_reg_17_281)))
 (let (($x682 (= dst_reg_17_51 dst_reg_17_280)))
 (let (($x681 (= (_ bv1 32) dst_reg_17_279)))
 (let (($x680 (= src_reg_17_77 src_reg_17_306)))
 (let (($x679 (= src_reg_17_76 src_reg_17_305)))
 (let (($x678 (= src_reg_17_75 src_reg_17_304)))
 (let (($x677 (= src_reg_17_74 src_reg_17_303)))
 (let (($x676 (= src_reg_17_73 src_reg_17_302)))
 (let (($x675 (= src_reg_17_72 src_reg_17_301)))
 (let (($x674 (= src_reg_17_71 src_reg_17_300)))
 (let (($x673 (= src_reg_17_70 src_reg_17_299)))
 (let (($x672 (= src_reg_17_69 src_reg_17_298)))
 (let (($x671 (= src_reg_17_68 src_reg_17_297)))
 (let (($x670 (= src_reg_17_67 src_reg_17_296)))
 (let (($x669 (= src_reg_17_66 src_reg_17_295)))
 (let (($x668 (= src_reg_17_65 src_reg_17_294)))
 (let (($x667 (= src_reg_17_64 src_reg_17_293)))
 (let (($x736 (and $x667 $x668 $x669 $x670 $x671 $x672 $x673 $x674 $x675 $x676 $x677 $x678 $x679 $x680 $x681 $x682 $x683 $x684 $x685 $x686 $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694)))
 (let (($x699 (and $x201 $x696)))
 (let (($x700 (and $x207 $x697)))
 (let (($x702 (or $x700 $x699)))
 (let (($x737 (=> $x702 $x736)))
 (let (($x666 (= dst_reg_17_189 dst_reg_17_292)))
 (let (($x665 (= dst_reg_17_188 dst_reg_17_291)))
 (let (($x664 (= dst_reg_17_187 dst_reg_17_290)))
 (let (($x663 (= dst_reg_17_186 dst_reg_17_289)))
 (let (($x662 (= storemerge.i316.i_17_206 dst_reg_17_288)))
 (let (($x661 (= dst_reg_17_184 dst_reg_17_287)))
 (let (($x660 (= storemerge.i316.i_17_206 dst_reg_17_286)))
 (let (($x659 (= i27.i317.i_17_208 dst_reg_17_285)))
 (let (($x658 (= and.i1.i.i_17_275 dst_reg_17_284)))
 (let (($x657 (= and4.i.i.i_17_278 dst_reg_17_283)))
 (let (($x656 (= dst_reg_17_179 dst_reg_17_282)))
 (let (($x655 (= dst_reg_17_178 dst_reg_17_281)))
 (let (($x654 (= dst_reg_17_177 dst_reg_17_280)))
 (let (($x653 (= dst_reg_17_176 dst_reg_17_279)))
 (let (($x652 (= src_reg_17_203 src_reg_17_306)))
 (let (($x651 (= src_reg_17_202 src_reg_17_305)))
 (let (($x650 (= src_reg_17_201 src_reg_17_304)))
 (let (($x649 (= src_reg_17_200 src_reg_17_303)))
 (let (($x648 (= src_reg_17_199 src_reg_17_302)))
 (let (($x647 (= src_reg_17_198 src_reg_17_301)))
 (let (($x646 (= src_reg_17_197 src_reg_17_300)))
 (let (($x645 (= src_reg_17_196 src_reg_17_299)))
 (let (($x644 (= src_reg_17_195 src_reg_17_298)))
 (let (($x643 (= src_reg_17_194 src_reg_17_297)))
 (let (($x642 (= src_reg_17_193 src_reg_17_296)))
 (let (($x641 (= src_reg_17_192 src_reg_17_295)))
 (let (($x640 (= src_reg_17_191 src_reg_17_294)))
 (let (($x639 (= src_reg_17_190 src_reg_17_293)))
 (let (($x734 (and $x639 $x640 $x641 $x642 $x643 $x644 $x645 $x646 $x647 $x648 $x649 $x650 $x651 $x652 $x653 $x654 $x655 $x656 $x657 $x658 $x659 $x660 $x661 $x662 $x663 $x664 $x665 $x666)))
 (let (($x735 (=> $x712 $x734)))
 (let (($x796 (and $x735 $x737 $x752 $x753 $x754 $x755 $x756 $x757 $x758 $x759 $x760 $x761 $x762 $x763 $x764 $x765 $x780 $x781 $x782 $x783 $x784 $x785 $x786 $x787 $x788 $x789 $x790 $x791 $x792 $x793)))
 (let (($x713 (or $x712 $x702)))
 (let (($x797 (=> $x713 $x796)))
 (let (($x566 (= phi.bo_17_257 (bvand add.i.i.i335.i_17_255 (_ bv255 32)))))
 (let (($x562 (= add.i.i.i335.i_17_255 (bvadd num.4.i.i.i.i.i_17_251 i.i.i.i.i.i.neg_17_254))))
 (let (($x559 (= i.i.i.i.i.i.neg_17_254 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_17_253))))
 (let (($x556 (= word.addr.4.lobit.i.i.i.i.i.neg_17_253 (bvlshr word.addr.4.i.i.i.i.i_17_250 (_ bv63 64)))))
 (let (($x535 (= tobool20.not.i.i.i.i.i_17_245 (_ bv1 1))))
 (let (($x552 (ite $x535 (= num.4.i.i.i.i.i_17_251 sub22.i.i.i.i.i_17_247) (= num.4.i.i.i.i.i_17_251 num.3.i.i.i.i.i_17_243))))
 (let (($x548 (ite $x535 (= word.addr.4.i.i.i.i.i_17_250 shl23.i.i.i.i.i_17_249) (= word.addr.4.i.i.i.i.i_17_250 word.addr.3.i.i.i.i.i_17_242))))
 (let (($x544 (= shl23.i.i.i.i.i_17_249 (bvshl word.addr.3.i.i.i.i.i_17_242 (_ bv2 64)))))
 (let (($x540 (= sub22.i.i.i.i.i_17_247 (bvadd num.3.i.i.i.i.i_17_243 (_ bv254 32)))))
 (let (($x534 (= tobool20.not.i.i.i.i.i_17_245 (_ bv0 1))))
 (let (($x536 (ite (bvult word.addr.3.i.i.i.i.i_17_242 (_ bv4611686018427387904 64)) $x535 $x534)))
 (let (($x513 (= tobool14.not.i.i.i.i.i_17_237 (_ bv1 1))))
 (let (($x530 (ite $x513 (= num.3.i.i.i.i.i_17_243 sub16.i.i.i.i.i_17_239) (= num.3.i.i.i.i.i_17_243 num.2.i.i.i.i.i_17_235))))
 (let (($x526 (ite $x513 (= word.addr.3.i.i.i.i.i_17_242 shl17.i.i.i.i.i_17_241) (= word.addr.3.i.i.i.i.i_17_242 word.addr.2.i.i.i.i.i_17_234))))
 (let (($x522 (= shl17.i.i.i.i.i_17_241 (bvshl word.addr.2.i.i.i.i.i_17_234 (_ bv4 64)))))
 (let (($x518 (= sub16.i.i.i.i.i_17_239 (bvadd num.2.i.i.i.i.i_17_235 (_ bv4294967292 32)))))
 (let (($x512 (= tobool14.not.i.i.i.i.i_17_237 (_ bv0 1))))
 (let (($x514 (ite (bvult word.addr.2.i.i.i.i.i_17_234 (_ bv1152921504606846976 64)) $x513 $x512)))
 (let (($x491 (= tobool8.not.i.i.i.i.i_17_229 (_ bv1 1))))
 (let (($x508 (ite $x491 (= num.2.i.i.i.i.i_17_235 sub10.i.i.i.i.i_17_231) (= num.2.i.i.i.i.i_17_235 num.1.i.i.i.i.i_17_227))))
 (let (($x504 (ite $x491 (= word.addr.2.i.i.i.i.i_17_234 shl11.i.i.i.i.i_17_233) (= word.addr.2.i.i.i.i.i_17_234 word.addr.1.i.i.i.i.i_17_226))))
 (let (($x500 (= shl11.i.i.i.i.i_17_233 (bvshl word.addr.1.i.i.i.i.i_17_226 (_ bv8 64)))))
 (let (($x496 (= sub10.i.i.i.i.i_17_231 (bvadd num.1.i.i.i.i.i_17_227 (_ bv4294967288 32)))))
 (let (($x490 (= tobool8.not.i.i.i.i.i_17_229 (_ bv0 1))))
 (let (($x492 (ite (bvult word.addr.1.i.i.i.i.i_17_226 (_ bv72057594037927936 64)) $x491 $x490)))
 (let (($x469 (= tobool2.not.i.i.i.i.i_17_221 (_ bv1 1))))
 (let (($x486 (ite $x469 (= num.1.i.i.i.i.i_17_227 sub4.i.i.i.i.i_17_223) (= num.1.i.i.i.i.i_17_227 spec.select17.i.i.i.i.i_17_219))))
 (let (($x482 (ite $x469 (= word.addr.1.i.i.i.i.i_17_226 shl5.i.i.i.i.i_17_225) (= word.addr.1.i.i.i.i.i_17_226 spec.select.i.i.i.i.i_17_216))))
 (let (($x478 (= shl5.i.i.i.i.i_17_225 (bvshl spec.select.i.i.i.i.i_17_216 (_ bv16 64)))))
 (let (($x474 (= sub4.i.i.i.i.i_17_223 (bvadd spec.select17.i.i.i.i.i_17_219 (_ bv4294967280 32)))))
 (let (($x468 (= tobool2.not.i.i.i.i.i_17_221 (_ bv0 1))))
 (let (($x470 (ite (bvult spec.select.i.i.i.i.i_17_216 (_ bv281474976710656 64)) $x469 $x468)))
 (let (($x449 (= tobool.not.i.i.i.i.i_17_213 (_ bv1 1))))
 (let (($x464 (ite $x449 (= spec.select17.i.i.i.i.i_17_219 (_ bv31 32)) (= spec.select17.i.i.i.i.i_17_219 (_ bv63 32)))))
 (let (($x458 (ite $x449 (= spec.select.i.i.i.i.i_17_216 shl.i.i.i.i.i_17_215) (= spec.select.i.i.i.i.i_17_216 xor.i.i.i_17_209))))
 (let (($x454 (= shl.i.i.i.i.i_17_215 (bvshl xor.i.i.i_17_209 (_ bv32 64)))))
 (let (($x448 (= tobool.not.i.i.i.i.i_17_213 (_ bv0 1))))
 (let (($x450 (ite (bvult xor.i.i.i_17_209 (_ bv4294967296 64)) $x449 $x448)))
 (let (($x794 (and $x450 $x454 $x458 $x464 $x470 $x474 $x478 $x482 $x486 $x492 $x496 $x500 $x504 $x508 $x514 $x518 $x522 $x526 $x530 $x536 $x540 $x544 $x548 $x552 $x556 $x559 $x562 $x566)))
 (let (($x795 (=> $x711 $x794)))
 (and $x795 $x797 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x77 $x80 $x82 $x84 $x87 $x95 $x799 $x801 $x803 $x805 $x807 $x809 $x811 $x813 $x815 $x817 $x819)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32/BPF_AND_32.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND_32 BPF_AND_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_AND_32 17 BPF_AND_32.smt2

Finished llvm_to_smt_pass
