Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_LSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_LSH
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x7d03d0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH'<<0x7d03d0>>  #uses=1
  CS<0x65a8a0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_LSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH'<<0x1c65fa0>>  #uses=1
  CS<0x19868f0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_LSH
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_LSH
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_LSH
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i28.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i185.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i185.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy2 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy2, %struct.tnum* %var_off.i185.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_LSH:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i29.i = bitcast %struct.tnum* %var_off.i28.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i186.i = bitcast %struct.tnum* %var_off.i185.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_LSH
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_LSH
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH'<<0x1187400>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_LSH
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_LSH
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_LSH -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_LSH
GLOBAL_BITVECTOR_SUFFIX: 6
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_0
[lookInsideStruct] singleValueType:dst_reg_6_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_1
[lookInsideStruct] singleValueType:dst_reg_6_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_2
[lookInsideStruct] singleValueType:dst_reg_6_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_3
[lookInsideStruct] singleValueType:dst_reg_6_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_4
[lookInsideStruct] singleValueType:dst_reg_6_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_5
[lookInsideStruct] singleValueType:dst_reg_6_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_6
[lookInsideStruct] singleValueType:dst_reg_6_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_7
[lookInsideStruct] singleValueType:dst_reg_6_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_8
[lookInsideStruct] singleValueType:dst_reg_6_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_9
[lookInsideStruct] singleValueType:dst_reg_6_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_10
[lookInsideStruct] singleValueType:dst_reg_6_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_11
[lookInsideStruct] singleValueType:dst_reg_6_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_12
[lookInsideStruct] singleValueType:dst_reg_6_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_13
[lookInsideStruct] singleValueType:dst_reg_6_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_14
[lookInsideStruct] singleValueType:src_reg_6_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_15
[lookInsideStruct] singleValueType:src_reg_6_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_16
[lookInsideStruct] singleValueType:src_reg_6_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_17
[lookInsideStruct] singleValueType:src_reg_6_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_18
[lookInsideStruct] singleValueType:src_reg_6_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_19
[lookInsideStruct] singleValueType:src_reg_6_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_20
[lookInsideStruct] singleValueType:src_reg_6_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_21
[lookInsideStruct] singleValueType:src_reg_6_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_22
[lookInsideStruct] singleValueType:src_reg_6_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_23
[lookInsideStruct] singleValueType:src_reg_6_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_24
[lookInsideStruct] singleValueType:src_reg_6_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_25
[lookInsideStruct] singleValueType:src_reg_6_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_26
[lookInsideStruct] singleValueType:src_reg_6_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_27
[lookInsideStruct] singleValueType:src_reg_6_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_6_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_6_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_6_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleLoadInst] (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_6_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_6_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleLoadInst] (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleLoadInst] (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleLoadInst] (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_6_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_6_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleLoadInst] (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_6_34
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_6_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_6_36
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_6_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_6_37
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleLoadInst] (= dst_reg_6_5 i215.i_6_37)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_6_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_6_31
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_6_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_6_38
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_6_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_6_39
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_6_38
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_6_39
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_6_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_6_41
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_6_38
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_6_39
[handleSelectInst] z3ExprRes: or.cond197.i_6_41
[handleSelectInst](ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_6_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_6_31
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_6_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_6_42
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_6_42
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_6_41
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_6_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_6_43
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_6_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_6_44
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_6_43
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_6_44
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_6_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_6_46
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_6_43
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_6_44
[handleSelectInst] z3ExprRes: or.cond199.i_6_46
[handleSelectInst](ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_6_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_6_31
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_6_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_6_47
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_6_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_6_48
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_6_47
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_6_48
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_6_50
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_6_50
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_6_47
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_6_48
[handleSelectInst] z3ExprRes: or.cond200.i_6_50
[handleSelectInst](ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
var_off.i.i.repack3, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb247.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}

-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.bb247.i
=========================
-------------------
  %cmp248.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType] i64 64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000040
[getBitVecSingValType]   %cmp248.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp248.not.i_6_68
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp248.not.i_6_68
[handleICmpInst] (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  br i1 %cmp248.not.i, label %if.end251.i, label %if.then250.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smin_value.i.i187.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i187.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i187.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i187.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i187.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smax_value.i.i188.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i188.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i188.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i188.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i188.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %umin_value.i.i189.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i189.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i189.i, dst_reg, [8]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i189.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i189.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i189.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %umax_value.i.i190.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i190.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i190.i, dst_reg, [9]
umin_value.i.i189.i, dst_reg, [8]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i33.i, dst_reg, [8]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
type, dst_reg, [0]
i214.i, dst_reg, [5, 1]
smax_value.i.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
type1, src_reg, [0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
var_off.i.i.repack3, dst_reg, [5, 1]
var_off.i185.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i190.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i190.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i190.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end251.i
=========================
-------------------
  %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  store i64 -9223372036854775808, i64* %smin_value252.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  store i64 9223372036854775807, i64* %smax_value253.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i261.i = load i64, i64* %umax_value254.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i261.i = load i64, i64* %umax_value254.i, align 8
[handleLoadInst] pointerValue:   %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i261.i = load i64, i64* %umax_value254.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i261.i_6_78
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i261.i_6_78
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleLoadInst] (= dst_reg_6_9 i261.i_6_78)
[printBBAssertionsMap] 
BasicBlock: if.end251.i, Size:1
  (= dst_reg_6_9 i261.i_6_78)
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %shl.i = lshr i64 -9223372036854775808, %src_reg1.sroa.22.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -9223372036854775808
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] opResVal:   %shl.i = lshr i64 -9223372036854775808, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType]   %shl.i = lshr i64 -9223372036854775808, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i_6_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i_6_80
[handleBinaryOperatorInst] LSHR instruction
(= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
-------------------
  %cmp256.i = icmp ugt i64 %i261.i, %shl.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i261.i = load i64, i64* %umax_value254.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i261.i_6_78
[getBitVecSingValType]   %shl.i = lshr i64 -9223372036854775808, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i_6_80
[getBitVecSingValType]   %cmp256.i = icmp ugt i64 %i261.i, %shl.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp256.i_6_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp256.i_6_81
[handleICmpInst] (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  br i1 %cmp256.i, label %if.then258.i, label %if.else261.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value259.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else261.i
=========================
-------------------
  %i262.i = load i64, i64* %umin_value259.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i262.i = load i64, i64* %umin_value259.i, align 8
[handleLoadInst] pointerValue:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i262.i = load i64, i64* %umin_value259.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i262.i_6_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i262.i_6_83
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleLoadInst] (= dst_reg_6_8 i262.i_6_83)
[printBBAssertionsMap] 
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:1
  (= dst_reg_6_8 i262.i_6_83)
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %shl263.i = shl i64 %i262.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i262.i = load i64, i64* %umin_value259.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %shl263.i = shl i64 %i262.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %i262.i = load i64, i64* %umin_value259.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i262.i_6_83
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType]   %shl263.i = shl i64 %i262.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl263.i_6_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl263.i_6_84
[handleBinaryOperatorInst] SHL instruction
(= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
-------------------
  store i64 %shl263.i, i64* %umin_value259.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl263.i = shl i64 %i262.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl263.i_6_84
[handleStoreInst] BVToStore: shl263.i_6_84
[handleStoreInst] destPointerValue:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl263.i_6_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i261.i = load i64, i64* %umax_value254.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] opResVal:   %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType]   %i261.i = load i64, i64* %umax_value254.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i261.i_6_78
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_6_33
[getBitVecSingValType]   %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl265.i_6_85
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl265.i_6_85
[handleBinaryOperatorInst] SHL instruction
(= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end266.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_86
[lookInsideStruct] singleValueType:dst_reg_6_86
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_87
[lookInsideStruct] singleValueType:dst_reg_6_87
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_88
[lookInsideStruct] singleValueType:dst_reg_6_88
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_89
[lookInsideStruct] singleValueType:dst_reg_6_89
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_90
[lookInsideStruct] singleValueType:dst_reg_6_90
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_91
[lookInsideStruct] singleValueType:dst_reg_6_91
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_92
[lookInsideStruct] singleValueType:dst_reg_6_92
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_93
[lookInsideStruct] singleValueType:dst_reg_6_93
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_94
[lookInsideStruct] singleValueType:dst_reg_6_94
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_95
[lookInsideStruct] singleValueType:dst_reg_6_95
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_96
[lookInsideStruct] singleValueType:dst_reg_6_96
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_97
[lookInsideStruct] singleValueType:dst_reg_6_97
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_98
[lookInsideStruct] singleValueType:dst_reg_6_98
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_99
[lookInsideStruct] singleValueType:dst_reg_6_99
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_100
[lookInsideStruct] singleValueType:src_reg_6_100
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_101
[lookInsideStruct] singleValueType:src_reg_6_101
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_102
[lookInsideStruct] singleValueType:src_reg_6_102
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_103
[lookInsideStruct] singleValueType:src_reg_6_103
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_104
[lookInsideStruct] singleValueType:src_reg_6_104
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_105
[lookInsideStruct] singleValueType:src_reg_6_105
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_106
[lookInsideStruct] singleValueType:src_reg_6_106
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_107
[lookInsideStruct] singleValueType:src_reg_6_107
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_108
[lookInsideStruct] singleValueType:src_reg_6_108
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_109
[lookInsideStruct] singleValueType:src_reg_6_109
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_110
[lookInsideStruct] singleValueType:src_reg_6_110
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_111
[lookInsideStruct] singleValueType:src_reg_6_111
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_112
[lookInsideStruct] singleValueType:src_reg_6_112
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_113
[lookInsideStruct] singleValueType:src_reg_6_113
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then258.i
[handleMemoryPhiNode] incomingAccessI: 28 = MemoryDef(27)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_6_100)
(= src_reg_6_15 src_reg_6_101)
(= src_reg_6_16 src_reg_6_102)
(= src_reg_6_17 src_reg_6_103)
(= src_reg_6_18 src_reg_6_104)
(= src_reg_6_19 src_reg_6_105)
(= src_reg_6_20 src_reg_6_106)
(= src_reg_6_21 src_reg_6_107)
(= src_reg_6_22 src_reg_6_108)
(= src_reg_6_23 src_reg_6_109)
(= src_reg_6_24 src_reg_6_110)
(= src_reg_6_25 src_reg_6_111)
(= src_reg_6_26 src_reg_6_112)
(= src_reg_6_27 src_reg_6_113)
(= #x00000001 dst_reg_6_86)
(= dst_reg_6_1 dst_reg_6_87)
(= dst_reg_6_2 dst_reg_6_88)
(= dst_reg_6_3 dst_reg_6_89)
(= dst_reg_6_4 dst_reg_6_90)
(= dst_reg_6_5 dst_reg_6_91)
(= #x8000000000000000 dst_reg_6_92)
(= #x7fffffffffffffff dst_reg_6_93)
(= #x0000000000000000 dst_reg_6_94)
(= dst_reg_6_9 dst_reg_6_95)
(= dst_reg_6_10 dst_reg_6_96)
(= dst_reg_6_11 dst_reg_6_97)
(= dst_reg_6_12 dst_reg_6_98)
(= dst_reg_6_13 dst_reg_6_99)
]
[handleMemoryPhiNode] incomingBBI: if.else261.i
[handleMemoryPhiNode] incomingAccessI: 29 = MemoryDef(27)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_6_100)
(= src_reg_6_15 src_reg_6_101)
(= src_reg_6_16 src_reg_6_102)
(= src_reg_6_17 src_reg_6_103)
(= src_reg_6_18 src_reg_6_104)
(= src_reg_6_19 src_reg_6_105)
(= src_reg_6_20 src_reg_6_106)
(= src_reg_6_21 src_reg_6_107)
(= src_reg_6_22 src_reg_6_108)
(= src_reg_6_23 src_reg_6_109)
(= src_reg_6_24 src_reg_6_110)
(= src_reg_6_25 src_reg_6_111)
(= src_reg_6_26 src_reg_6_112)
(= src_reg_6_27 src_reg_6_113)
(= #x00000001 dst_reg_6_86)
(= dst_reg_6_1 dst_reg_6_87)
(= dst_reg_6_2 dst_reg_6_88)
(= dst_reg_6_3 dst_reg_6_89)
(= dst_reg_6_4 dst_reg_6_90)
(= dst_reg_6_5 dst_reg_6_91)
(= #x8000000000000000 dst_reg_6_92)
(= #x7fffffffffffffff dst_reg_6_93)
(= shl263.i_6_84 dst_reg_6_94)
(= dst_reg_6_9 dst_reg_6_95)
(= dst_reg_6_10 dst_reg_6_96)
(= dst_reg_6_11 dst_reg_6_97)
(= dst_reg_6_12 dst_reg_6_98)
(= dst_reg_6_13 dst_reg_6_99)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else261.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= shl263.i_6_84 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
<if.then258.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= #x0000000000000000 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[handlePhiNodeSetupBitVecs] valueI:   %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
[getBool] returning unique bool w/ prefix: if.else261.i_if.end266.i_6_114
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else261.i_if.end266.i_6_114
[handlePhiNodeSetupBitVecs] valueI: i64 -1
[getBool] returning unique bool w/ prefix: if.then258.i_if.end266.i_6_115
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then258.i_if.end266.i_6_115
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_6_115
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_6_114
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i_6_116
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i_6_116
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl265.i_6_85
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else261.i_if.end266.i_6_114
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then258.i_if.end266.i_6_115
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))

-------------------
  store i64 %storemerge.i, i64* %umax_value254.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_6_116
[handleStoreInst] BVToStore: storemerge.i_6_116
[handleStoreInst] destPointerValue:   %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(51)
[handleStoreInst] definingMemoryAccess: 51 = MemoryPhi({if.then258.i,28},{if.else261.i,29})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_95 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i_6_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %i263.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i263.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i263.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i263.i_6_118
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i263.i_6_118
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleLoadInst] (= dst_reg_6_4 i263.i_6_118)
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:3
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 255
[handleBinaryOperatorInst] opResVal:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_6_32
[getBitVecSingValType] i64 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000000000ff
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i_6_120
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i_6_120
[handleBinaryOperatorInst] AND instruction
(= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
-------------------
  %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i263.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[handleBinaryOperatorInst] opResVal:   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType]   %i263.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i263.i_6_118
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i_6_120
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i_6_121
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i_6_121
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
-------------------
  %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[handleBinaryOperatorInst] opResVal:   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_6_37
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i_6_120
[getBitVecSingValType]   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i_6_122
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i_6_122
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
-------------------
  store i64 %shl.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[handleStoreInst] BVToStore: shl.i.i_6_121
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(51)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_90 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl.i.i_6_121 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %shl5.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_6_122
[handleStoreInst] BVToStore: shl5.i.i_6_122
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_91 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl5.i.i_6_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val: i64 -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType]   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_6_122
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i199.i_6_124
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i199.i_6_124
[handleBinaryOperatorInst] AND instruction
(= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
-------------------
  %or.i200.i = or i64 %shl.i.i, %and.i199.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val:   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %or.i200.i = or i64 %shl.i.i, %and.i199.i
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[getBitVecSingValType]   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i199.i_6_124
[getBitVecSingValType]   %or.i200.i = or i64 %shl.i.i, %and.i199.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i200.i_6_125
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i200.i_6_125
[handleBinaryOperatorInst] OR instruction
(= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
-------------------
  store i64 %or.i200.i, i64* %smin_value252.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i200.i = or i64 %shl.i.i, %and.i199.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i200.i_6_125
[handleStoreInst] BVToStore: or.i200.i_6_125
[handleStoreInst] destPointerValue:   %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_92 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i200.i_6_125 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val: i64 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType]   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_6_122
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and7.i205.i_6_127
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and7.i205.i_6_127
[handleBinaryOperatorInst] AND instruction
(= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
-------------------
  %or8.i206.i = or i64 %shl.i.i, %and7.i205.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val:   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %or8.i206.i = or i64 %shl.i.i, %and7.i205.i
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[getBitVecSingValType]   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and7.i205.i_6_127
[getBitVecSingValType]   %or8.i206.i = or i64 %shl.i.i, %and7.i205.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i206.i_6_128
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i206.i_6_128
[handleBinaryOperatorInst] OR instruction
(= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
-------------------
  store i64 %or8.i206.i, i64* %smax_value253.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or8.i206.i = or i64 %shl.i.i, %and7.i205.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i206.i_6_128
[handleStoreInst] BVToStore: or8.i206.i_6_128
[handleStoreInst] destPointerValue:   %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_93 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or8.i206.i_6_128 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %i26.i210.i = load i64, i64* %umin_value259.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i26.i210.i = load i64, i64* %umin_value259.i, align 8
[handleLoadInst] pointerValue:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 51 = MemoryPhi({if.then258.i,28},{if.else261.i,29})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value259.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i26.i210.i_6_129
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i26.i210.i_6_129
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleLoadInst] (= dst_reg_6_94 i26.i210.i_6_129)
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:11
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value259.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i26.i210.i_6_129
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[getBitVecSingValType]   %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp19.i211.i_6_130
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp19.i211.i_6_130
[handleICmpInst] (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:12
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 

[handleSelectInst]SelectMap:
cond23.i212.i,i26.i210.i,shl.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp19.i211.i_6_130
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value259.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i26.i210.i_6_129
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[getBitVecSingValType]   %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond23.i212.i_6_131
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond23.i212.i_6_131
[handleSelectInst] z3ExprSelectOp1: cmp19.i211.i_6_130
[handleSelectInst] z3ExprSelectOp2: i26.i210.i_6_129
[handleSelectInst] z3ExprSelectOp3: shl.i.i_6_121
[handleSelectInst] z3ExprRes: cond23.i212.i_6_131
[handleSelectInst](ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
-------------------
  store i64 %cond23.i212.i, i64* %umin_value259.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond23.i212.i_6_131
[handleStoreInst] BVToStore: cond23.i212.i_6_131
[handleStoreInst] destPointerValue:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_94 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond23.i212.i_6_131 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val:   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[handleBinaryOperatorInst] opResVal:   %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
[getBitVecSingValType]   %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_6_121
[getBitVecSingValType]   %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_6_122
[getBitVecSingValType]   %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or29.i215.i_6_132
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or29.i215.i_6_132
[handleBinaryOperatorInst] OR instruction
(= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
-------------------
  %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_6_116
[getBitVecSingValType]   %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i215.i_6_132
[getBitVecSingValType]   %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i216.i_6_133
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i216.i_6_133
[handleICmpInst] (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 35 = MemoryDef(34)
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 

[handleSelectInst]SelectMap:
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i216.i_6_133
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_6_116
[getBitVecSingValType]   %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i215.i_6_132
[getBitVecSingValType]   %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i217.i_6_134
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i217.i_6_134
[handleSelectInst] z3ExprSelectOp1: cmp31.i216.i_6_133
[handleSelectInst] z3ExprSelectOp2: storemerge.i_6_116
[handleSelectInst] z3ExprSelectOp3: or29.i215.i_6_132
[handleSelectInst] z3ExprRes: cond35.i217.i_6_134
[handleSelectInst](ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))
-------------------
  store i64 %cond35.i217.i, i64* %umax_value254.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i217.i_6_134
[handleStoreInst] BVToStore: cond35.i217.i_6_134
[handleStoreInst] destPointerValue:   %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i_6_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond35.i217.i_6_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_135
[lookInsideStruct] singleValueType:dst_reg_6_135
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_136
[lookInsideStruct] singleValueType:dst_reg_6_136
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_137
[lookInsideStruct] singleValueType:dst_reg_6_137
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_138
[lookInsideStruct] singleValueType:dst_reg_6_138
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_139
[lookInsideStruct] singleValueType:dst_reg_6_139
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_140
[lookInsideStruct] singleValueType:dst_reg_6_140
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_141
[lookInsideStruct] singleValueType:dst_reg_6_141
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_142
[lookInsideStruct] singleValueType:dst_reg_6_142
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_143
[lookInsideStruct] singleValueType:dst_reg_6_143
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_144
[lookInsideStruct] singleValueType:dst_reg_6_144
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_145
[lookInsideStruct] singleValueType:dst_reg_6_145
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_146
[lookInsideStruct] singleValueType:dst_reg_6_146
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_147
[lookInsideStruct] singleValueType:dst_reg_6_147
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_148
[lookInsideStruct] singleValueType:dst_reg_6_148
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_149
[lookInsideStruct] singleValueType:src_reg_6_149
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_150
[lookInsideStruct] singleValueType:src_reg_6_150
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_151
[lookInsideStruct] singleValueType:src_reg_6_151
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_152
[lookInsideStruct] singleValueType:src_reg_6_152
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_153
[lookInsideStruct] singleValueType:src_reg_6_153
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_154
[lookInsideStruct] singleValueType:src_reg_6_154
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_155
[lookInsideStruct] singleValueType:src_reg_6_155
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_156
[lookInsideStruct] singleValueType:src_reg_6_156
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_157
[lookInsideStruct] singleValueType:src_reg_6_157
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_158
[lookInsideStruct] singleValueType:src_reg_6_158
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_159
[lookInsideStruct] singleValueType:src_reg_6_159
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_160
[lookInsideStruct] singleValueType:src_reg_6_160
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_161
[lookInsideStruct] singleValueType:src_reg_6_161
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_162
[lookInsideStruct] singleValueType:src_reg_6_162
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleMemoryPhiNode] incomingBBI: if.end266.i
[handleMemoryPhiNode] incomingAccessI: 36 = MemoryDef(35)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_100 src_reg_6_149)
(= src_reg_6_101 src_reg_6_150)
(= src_reg_6_102 src_reg_6_151)
(= src_reg_6_103 src_reg_6_152)
(= src_reg_6_104 src_reg_6_153)
(= src_reg_6_105 src_reg_6_154)
(= src_reg_6_106 src_reg_6_155)
(= src_reg_6_107 src_reg_6_156)
(= src_reg_6_108 src_reg_6_157)
(= src_reg_6_109 src_reg_6_158)
(= src_reg_6_110 src_reg_6_159)
(= src_reg_6_111 src_reg_6_160)
(= src_reg_6_112 src_reg_6_161)
(= src_reg_6_113 src_reg_6_162)
(= dst_reg_6_86 dst_reg_6_135)
(= dst_reg_6_87 dst_reg_6_136)
(= dst_reg_6_88 dst_reg_6_137)
(= dst_reg_6_89 dst_reg_6_138)
(= shl.i.i_6_121 dst_reg_6_139)
(= shl5.i.i_6_122 dst_reg_6_140)
(= or.i200.i_6_125 dst_reg_6_141)
(= or8.i206.i_6_128 dst_reg_6_142)
(= cond23.i212.i_6_131 dst_reg_6_143)
(= cond35.i217.i_6_134 dst_reg_6_144)
(= dst_reg_6_96 dst_reg_6_145)
(= dst_reg_6_97 dst_reg_6_146)
(= dst_reg_6_98 dst_reg_6_147)
(= dst_reg_6_99 dst_reg_6_148)
]
[handleMemoryPhiNode] incomingBBI: if.then250.i
[handleMemoryPhiNode] incomingAccessI: 25 = MemoryDef(24)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_6_149)
(= src_reg_6_15 src_reg_6_150)
(= src_reg_6_16 src_reg_6_151)
(= src_reg_6_17 src_reg_6_152)
(= src_reg_6_18 src_reg_6_153)
(= src_reg_6_19 src_reg_6_154)
(= src_reg_6_20 src_reg_6_155)
(= src_reg_6_21 src_reg_6_156)
(= src_reg_6_22 src_reg_6_157)
(= src_reg_6_23 src_reg_6_158)
(= src_reg_6_24 src_reg_6_159)
(= src_reg_6_25 src_reg_6_160)
(= src_reg_6_26 src_reg_6_161)
(= src_reg_6_27 src_reg_6_162)
(= #x00000001 dst_reg_6_135)
(= dst_reg_6_1 dst_reg_6_136)
(= dst_reg_6_2 dst_reg_6_137)
(= dst_reg_6_3 dst_reg_6_138)
(= #x0000000000000000 dst_reg_6_139)
(= #xffffffffffffffff dst_reg_6_140)
(= #x8000000000000000 dst_reg_6_141)
(= #x7fffffffffffffff dst_reg_6_142)
(= #x0000000000000000 dst_reg_6_143)
(= #xffffffffffffffff dst_reg_6_144)
(= dst_reg_6_10 dst_reg_6_145)
(= dst_reg_6_11 dst_reg_6_146)
(= dst_reg_6_12 dst_reg_6_147)
(= dst_reg_6_13 dst_reg_6_148)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then250.i, if.end309.i> :
  (= #x00000001 src_reg_6_149)
  (= src_reg_6_15 src_reg_6_150)
  (= src_reg_6_16 src_reg_6_151)
  (= src_reg_6_17 src_reg_6_152)
  (= src_reg_6_18 src_reg_6_153)
  (= src_reg_6_19 src_reg_6_154)
  (= src_reg_6_20 src_reg_6_155)
  (= src_reg_6_21 src_reg_6_156)
  (= src_reg_6_22 src_reg_6_157)
  (= src_reg_6_23 src_reg_6_158)
  (= src_reg_6_24 src_reg_6_159)
  (= src_reg_6_25 src_reg_6_160)
  (= src_reg_6_26 src_reg_6_161)
  (= src_reg_6_27 src_reg_6_162)
  (= #x00000001 dst_reg_6_135)
  (= dst_reg_6_1 dst_reg_6_136)
  (= dst_reg_6_2 dst_reg_6_137)
  (= dst_reg_6_3 dst_reg_6_138)
  (= #x0000000000000000 dst_reg_6_139)
  (= #xffffffffffffffff dst_reg_6_140)
  (= #x8000000000000000 dst_reg_6_141)
  (= #x7fffffffffffffff dst_reg_6_142)
  (= #x0000000000000000 dst_reg_6_143)
  (= #xffffffffffffffff dst_reg_6_144)
  (= dst_reg_6_10 dst_reg_6_145)
  (= dst_reg_6_11 dst_reg_6_146)
  (= dst_reg_6_12 dst_reg_6_147)
  (= dst_reg_6_13 dst_reg_6_148)
<if.end266.i, if.end309.i> :
  (= src_reg_6_100 src_reg_6_149)
  (= src_reg_6_101 src_reg_6_150)
  (= src_reg_6_102 src_reg_6_151)
  (= src_reg_6_103 src_reg_6_152)
  (= src_reg_6_104 src_reg_6_153)
  (= src_reg_6_105 src_reg_6_154)
  (= src_reg_6_106 src_reg_6_155)
  (= src_reg_6_107 src_reg_6_156)
  (= src_reg_6_108 src_reg_6_157)
  (= src_reg_6_109 src_reg_6_158)
  (= src_reg_6_110 src_reg_6_159)
  (= src_reg_6_111 src_reg_6_160)
  (= src_reg_6_112 src_reg_6_161)
  (= src_reg_6_113 src_reg_6_162)
  (= dst_reg_6_86 dst_reg_6_135)
  (= dst_reg_6_87 dst_reg_6_136)
  (= dst_reg_6_88 dst_reg_6_137)
  (= dst_reg_6_89 dst_reg_6_138)
  (= shl.i.i_6_121 dst_reg_6_139)
  (= shl5.i.i_6_122 dst_reg_6_140)
  (= or.i200.i_6_125 dst_reg_6_141)
  (= or8.i206.i_6_128 dst_reg_6_142)
  (= cond23.i212.i_6_131 dst_reg_6_143)
  (= cond35.i217.i_6_134 dst_reg_6_144)
  (= dst_reg_6_96 dst_reg_6_145)
  (= dst_reg_6_97 dst_reg_6_146)
  (= dst_reg_6_98 dst_reg_6_147)
  (= dst_reg_6_99 dst_reg_6_148)
<if.else261.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= shl263.i_6_84 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
<if.then258.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= #x0000000000000000 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[handleLoadInst] pointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_6_163
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_6_163
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_141 i.i322.i_6_163)
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end309.i, Size:1
  (= dst_reg_6_141 i.i322.i_6_163)
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_6_163
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_6_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_6_165
[handleICmpInst] (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.then258.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_6_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_6_166
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_142 i33.i.i_6_166)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_6_142 i33.i.i_6_166)
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_6_166
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_6_168
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_6_168
[handleICmpInst] (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_6_169
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_6_169
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_143 i34.i.i_6_169)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_6_143 i34.i.i_6_169)
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_6_163
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_6_169
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_6_170
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_6_170
[handleICmpInst] (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_6_170
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_6_163
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_6_169
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_6_171
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_6_171
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_6_170
[handleSelectInst] z3ExprSelectOp2: i.i322.i_6_163
[handleSelectInst] z3ExprSelectOp3: i34.i.i_6_169
[handleSelectInst] z3ExprRes: cond.i327.i_6_171
[handleSelectInst](ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_6_171
[handleStoreInst] BVToStore: cond.i327.i_6_171
[handleStoreInst] destPointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(52)
[handleStoreInst] definingMemoryAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_143 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_6_171 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_6_171
[handleStoreInst] BVToStore: cond.i327.i_6_171
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(52)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_141 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_6_171 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_6_172
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_6_172
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_142 i35.i.i_6_172)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_6_173
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_6_173
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_144 i36.i.i_6_173)
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_6_172
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_6_173
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_6_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_6_174
[handleICmpInst] (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_6_174
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_6_172
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_6_173
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_6_175
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_6_175
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_6_174
[handleSelectInst] z3ExprSelectOp2: i35.i.i_6_172
[handleSelectInst] z3ExprSelectOp3: i36.i.i_6_173
[handleSelectInst] z3ExprRes: cond12.i.i_6_175
[handleSelectInst](ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_6_175
[handleStoreInst] BVToStore: cond12.i.i_6_175
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_144 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_6_175 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_6_175
[handleStoreInst] BVToStore: cond12.i.i_6_175
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_142 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_6_175 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_6_176
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_6_176
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_144 i37.i.i_6_176)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_6_144 i37.i.i_6_176)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_6_176
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_6_178
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_6_178
[handleICmpInst] (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_6_179
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_6_179
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_143 i38.i.i_6_179)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_6_179
[handleStoreInst] BVToStore: i38.i.i_6_179
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(52)
[handleStoreInst] definingMemoryAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_141 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_6_179 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_6_166
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_6_176
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_6_180
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_6_180
[handleICmpInst] (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 41 = MemoryDef(52)
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 

[handleSelectInst]SelectMap:
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_6_180
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_6_166
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_6_176
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_6_181
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_6_181
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_6_180
[handleSelectInst] z3ExprSelectOp2: i33.i.i_6_166
[handleSelectInst] z3ExprSelectOp3: i37.i.i_6_176
[handleSelectInst] z3ExprRes: cond27.i.i_6_181
[handleSelectInst](ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_6_181
[handleStoreInst] BVToStore: cond27.i.i_6_181
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryDef(52)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_144 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_6_181 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_6_181
[handleStoreInst] BVToStore: cond27.i.i_6_181
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_142 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_6_181 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_6_179
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_6_183
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_6_183
[handleICmpInst] (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_6_163
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_6_179
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_6_184
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_6_184
[handleICmpInst] (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 43 = MemoryDef(42)
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_6_184
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_6_163
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_6_179
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_6_185
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_6_185
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_6_184
[handleSelectInst] z3ExprSelectOp2: i.i322.i_6_163
[handleSelectInst] z3ExprSelectOp3: i38.i.i_6_179
[handleSelectInst] z3ExprRes: cond40.i.i_6_185
[handleSelectInst](ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_6_185
[handleStoreInst] BVToStore: cond40.i.i_6_185
[handleStoreInst] destPointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(52)
[handleStoreInst] definingMemoryAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_143 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_6_185 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_6_185
[handleStoreInst] BVToStore: cond40.i.i_6_185
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 45 = MemoryDef(44)
[handleStoreInst] definingMemoryAccess: 44 = MemoryDef(52)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_141 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_6_185 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_6_176
[handleStoreInst] BVToStore: i37.i.i_6_176
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 46 = MemoryDef(45)
[handleStoreInst] definingMemoryAccess: 45 = MemoryDef(44)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_142 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_6_176 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(45) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_186
[lookInsideStruct] singleValueType:dst_reg_6_186
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_187
[lookInsideStruct] singleValueType:dst_reg_6_187
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_188
[lookInsideStruct] singleValueType:dst_reg_6_188
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_189
[lookInsideStruct] singleValueType:dst_reg_6_189
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_190
[lookInsideStruct] singleValueType:dst_reg_6_190
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_191
[lookInsideStruct] singleValueType:dst_reg_6_191
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_192
[lookInsideStruct] singleValueType:dst_reg_6_192
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_193
[lookInsideStruct] singleValueType:dst_reg_6_193
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_194
[lookInsideStruct] singleValueType:dst_reg_6_194
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_195
[lookInsideStruct] singleValueType:dst_reg_6_195
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_196
[lookInsideStruct] singleValueType:dst_reg_6_196
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_197
[lookInsideStruct] singleValueType:dst_reg_6_197
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_198
[lookInsideStruct] singleValueType:dst_reg_6_198
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_199
[lookInsideStruct] singleValueType:dst_reg_6_199
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_200
[lookInsideStruct] singleValueType:src_reg_6_200
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_201
[lookInsideStruct] singleValueType:src_reg_6_201
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_202
[lookInsideStruct] singleValueType:src_reg_6_202
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_203
[lookInsideStruct] singleValueType:src_reg_6_203
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_204
[lookInsideStruct] singleValueType:src_reg_6_204
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_205
[lookInsideStruct] singleValueType:src_reg_6_205
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_206
[lookInsideStruct] singleValueType:src_reg_6_206
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_207
[lookInsideStruct] singleValueType:src_reg_6_207
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_208
[lookInsideStruct] singleValueType:src_reg_6_208
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_209
[lookInsideStruct] singleValueType:src_reg_6_209
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_210
[lookInsideStruct] singleValueType:src_reg_6_210
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_211
[lookInsideStruct] singleValueType:src_reg_6_211
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_212
[lookInsideStruct] singleValueType:src_reg_6_212
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_213
[lookInsideStruct] singleValueType:src_reg_6_213
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 40 = MemoryDef(39)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_149 src_reg_6_200)
(= src_reg_6_150 src_reg_6_201)
(= src_reg_6_151 src_reg_6_202)
(= src_reg_6_152 src_reg_6_203)
(= src_reg_6_153 src_reg_6_204)
(= src_reg_6_154 src_reg_6_205)
(= src_reg_6_155 src_reg_6_206)
(= src_reg_6_156 src_reg_6_207)
(= src_reg_6_157 src_reg_6_208)
(= src_reg_6_158 src_reg_6_209)
(= src_reg_6_159 src_reg_6_210)
(= src_reg_6_160 src_reg_6_211)
(= src_reg_6_161 src_reg_6_212)
(= src_reg_6_162 src_reg_6_213)
(= dst_reg_6_135 dst_reg_6_186)
(= dst_reg_6_136 dst_reg_6_187)
(= dst_reg_6_137 dst_reg_6_188)
(= dst_reg_6_138 dst_reg_6_189)
(= dst_reg_6_139 dst_reg_6_190)
(= dst_reg_6_140 dst_reg_6_191)
(= cond.i327.i_6_171 dst_reg_6_192)
(= cond12.i.i_6_175 dst_reg_6_193)
(= cond.i327.i_6_171 dst_reg_6_194)
(= cond12.i.i_6_175 dst_reg_6_195)
(= dst_reg_6_145 dst_reg_6_196)
(= dst_reg_6_146 dst_reg_6_197)
(= dst_reg_6_147 dst_reg_6_198)
(= dst_reg_6_148 dst_reg_6_199)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 43 = MemoryDef(42)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_149 src_reg_6_200)
(= src_reg_6_150 src_reg_6_201)
(= src_reg_6_151 src_reg_6_202)
(= src_reg_6_152 src_reg_6_203)
(= src_reg_6_153 src_reg_6_204)
(= src_reg_6_154 src_reg_6_205)
(= src_reg_6_155 src_reg_6_206)
(= src_reg_6_156 src_reg_6_207)
(= src_reg_6_157 src_reg_6_208)
(= src_reg_6_158 src_reg_6_209)
(= src_reg_6_159 src_reg_6_210)
(= src_reg_6_160 src_reg_6_211)
(= src_reg_6_161 src_reg_6_212)
(= src_reg_6_162 src_reg_6_213)
(= dst_reg_6_135 dst_reg_6_186)
(= dst_reg_6_136 dst_reg_6_187)
(= dst_reg_6_137 dst_reg_6_188)
(= dst_reg_6_138 dst_reg_6_189)
(= dst_reg_6_139 dst_reg_6_190)
(= dst_reg_6_140 dst_reg_6_191)
(= i38.i.i_6_179 dst_reg_6_192)
(= cond27.i.i_6_181 dst_reg_6_193)
(= dst_reg_6_143 dst_reg_6_194)
(= cond27.i.i_6_181 dst_reg_6_195)
(= dst_reg_6_145 dst_reg_6_196)
(= dst_reg_6_146 dst_reg_6_197)
(= dst_reg_6_147 dst_reg_6_198)
(= dst_reg_6_148 dst_reg_6_199)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_149 src_reg_6_200)
(= src_reg_6_150 src_reg_6_201)
(= src_reg_6_151 src_reg_6_202)
(= src_reg_6_152 src_reg_6_203)
(= src_reg_6_153 src_reg_6_204)
(= src_reg_6_154 src_reg_6_205)
(= src_reg_6_155 src_reg_6_206)
(= src_reg_6_156 src_reg_6_207)
(= src_reg_6_157 src_reg_6_208)
(= src_reg_6_158 src_reg_6_209)
(= src_reg_6_159 src_reg_6_210)
(= src_reg_6_160 src_reg_6_211)
(= src_reg_6_161 src_reg_6_212)
(= src_reg_6_162 src_reg_6_213)
(= dst_reg_6_135 dst_reg_6_186)
(= dst_reg_6_136 dst_reg_6_187)
(= dst_reg_6_137 dst_reg_6_188)
(= dst_reg_6_138 dst_reg_6_189)
(= dst_reg_6_139 dst_reg_6_190)
(= dst_reg_6_140 dst_reg_6_191)
(= dst_reg_6_141 dst_reg_6_192)
(= dst_reg_6_142 dst_reg_6_193)
(= dst_reg_6_143 dst_reg_6_194)
(= dst_reg_6_144 dst_reg_6_195)
(= dst_reg_6_145 dst_reg_6_196)
(= dst_reg_6_146 dst_reg_6_197)
(= dst_reg_6_147 dst_reg_6_198)
(= dst_reg_6_148 dst_reg_6_199)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 46 = MemoryDef(45)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_149 src_reg_6_200)
(= src_reg_6_150 src_reg_6_201)
(= src_reg_6_151 src_reg_6_202)
(= src_reg_6_152 src_reg_6_203)
(= src_reg_6_153 src_reg_6_204)
(= src_reg_6_154 src_reg_6_205)
(= src_reg_6_155 src_reg_6_206)
(= src_reg_6_156 src_reg_6_207)
(= src_reg_6_157 src_reg_6_208)
(= src_reg_6_158 src_reg_6_209)
(= src_reg_6_159 src_reg_6_210)
(= src_reg_6_160 src_reg_6_211)
(= src_reg_6_161 src_reg_6_212)
(= src_reg_6_162 src_reg_6_213)
(= dst_reg_6_135 dst_reg_6_186)
(= dst_reg_6_136 dst_reg_6_187)
(= dst_reg_6_137 dst_reg_6_188)
(= dst_reg_6_138 dst_reg_6_189)
(= dst_reg_6_139 dst_reg_6_190)
(= dst_reg_6_140 dst_reg_6_191)
(= cond40.i.i_6_185 dst_reg_6_192)
(= i37.i.i_6_176 dst_reg_6_193)
(= cond40.i.i_6_185 dst_reg_6_194)
(= dst_reg_6_144 dst_reg_6_195)
(= dst_reg_6_145 dst_reg_6_196)
(= dst_reg_6_146 dst_reg_6_197)
(= dst_reg_6_147 dst_reg_6_198)
(= dst_reg_6_148 dst_reg_6_199)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= cond40.i.i_6_185 dst_reg_6_192)
  (= i37.i.i_6_176 dst_reg_6_193)
  (= cond40.i.i_6_185 dst_reg_6_194)
  (= dst_reg_6_144 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= dst_reg_6_141 dst_reg_6_192)
  (= dst_reg_6_142 dst_reg_6_193)
  (= dst_reg_6_143 dst_reg_6_194)
  (= dst_reg_6_144 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.then250.i, if.end309.i> :
  (= #x00000001 src_reg_6_149)
  (= src_reg_6_15 src_reg_6_150)
  (= src_reg_6_16 src_reg_6_151)
  (= src_reg_6_17 src_reg_6_152)
  (= src_reg_6_18 src_reg_6_153)
  (= src_reg_6_19 src_reg_6_154)
  (= src_reg_6_20 src_reg_6_155)
  (= src_reg_6_21 src_reg_6_156)
  (= src_reg_6_22 src_reg_6_157)
  (= src_reg_6_23 src_reg_6_158)
  (= src_reg_6_24 src_reg_6_159)
  (= src_reg_6_25 src_reg_6_160)
  (= src_reg_6_26 src_reg_6_161)
  (= src_reg_6_27 src_reg_6_162)
  (= #x00000001 dst_reg_6_135)
  (= dst_reg_6_1 dst_reg_6_136)
  (= dst_reg_6_2 dst_reg_6_137)
  (= dst_reg_6_3 dst_reg_6_138)
  (= #x0000000000000000 dst_reg_6_139)
  (= #xffffffffffffffff dst_reg_6_140)
  (= #x8000000000000000 dst_reg_6_141)
  (= #x7fffffffffffffff dst_reg_6_142)
  (= #x0000000000000000 dst_reg_6_143)
  (= #xffffffffffffffff dst_reg_6_144)
  (= dst_reg_6_10 dst_reg_6_145)
  (= dst_reg_6_11 dst_reg_6_146)
  (= dst_reg_6_12 dst_reg_6_147)
  (= dst_reg_6_13 dst_reg_6_148)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= i38.i.i_6_179 dst_reg_6_192)
  (= cond27.i.i_6_181 dst_reg_6_193)
  (= dst_reg_6_143 dst_reg_6_194)
  (= cond27.i.i_6_181 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.end266.i, if.end309.i> :
  (= src_reg_6_100 src_reg_6_149)
  (= src_reg_6_101 src_reg_6_150)
  (= src_reg_6_102 src_reg_6_151)
  (= src_reg_6_103 src_reg_6_152)
  (= src_reg_6_104 src_reg_6_153)
  (= src_reg_6_105 src_reg_6_154)
  (= src_reg_6_106 src_reg_6_155)
  (= src_reg_6_107 src_reg_6_156)
  (= src_reg_6_108 src_reg_6_157)
  (= src_reg_6_109 src_reg_6_158)
  (= src_reg_6_110 src_reg_6_159)
  (= src_reg_6_111 src_reg_6_160)
  (= src_reg_6_112 src_reg_6_161)
  (= src_reg_6_113 src_reg_6_162)
  (= dst_reg_6_86 dst_reg_6_135)
  (= dst_reg_6_87 dst_reg_6_136)
  (= dst_reg_6_88 dst_reg_6_137)
  (= dst_reg_6_89 dst_reg_6_138)
  (= shl.i.i_6_121 dst_reg_6_139)
  (= shl5.i.i_6_122 dst_reg_6_140)
  (= or.i200.i_6_125 dst_reg_6_141)
  (= or8.i206.i_6_128 dst_reg_6_142)
  (= cond23.i212.i_6_131 dst_reg_6_143)
  (= cond35.i217.i_6_134 dst_reg_6_144)
  (= dst_reg_6_96 dst_reg_6_145)
  (= dst_reg_6_97 dst_reg_6_146)
  (= dst_reg_6_98 dst_reg_6_147)
  (= dst_reg_6_99 dst_reg_6_148)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= cond.i327.i_6_171 dst_reg_6_192)
  (= cond12.i.i_6_175 dst_reg_6_193)
  (= cond.i327.i_6_171 dst_reg_6_194)
  (= cond12.i.i_6_175 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.else261.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= shl263.i_6_84 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
<if.then258.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= #x0000000000000000 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_6_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_6_214
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleLoadInst] (= dst_reg_6_194 i.i333.i_6_214)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_6_194 i.i333.i_6_214)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_6_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_6_215
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleLoadInst] (= dst_reg_6_195 i5.i.i_6_215)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_6_215
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_6_214
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_6_216
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_6_216
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_6_216
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_6_218
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_6_218
[handleICmpInst] (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_6_216
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_6_220
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_6_220
[handleICmpInst] (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_6_216
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_6_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_6_222
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_6_220
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_6_222
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_6_216
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_6_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_6_223
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_6_220
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_6_222
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_6_216
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_6_223
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
spec.select17.i.i.i.i.i,,
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_6_220
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_6_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_6_226
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_6_220
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_6_226
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_6_223
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_6_228
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_6_228
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_6_226
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_6_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_6_230
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_6_223
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_6_232
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_6_232
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_6_228
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_6_232
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_6_223
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_6_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_6_233
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_6_228
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_6_232
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_6_223
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_6_233
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond23.i212.i,i26.i210.i,shl.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond12.i.i,i35.i.i,i36.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_6_228
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_6_230
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_6_226
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_6_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_6_234
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_6_228
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_6_230
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_6_226
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_6_234
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_6_233
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_6_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_6_236
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_6_234
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_6_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_6_238
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_6_233
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_6_240
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_6_240
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_6_236
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_6_240
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_6_233
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_6_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_6_241
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_6_236
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_6_240
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_6_233
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_6_241
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_6_236
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_6_238
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_6_234
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_6_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_6_242
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_6_236
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_6_238
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_6_234
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_6_242
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_6_241
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_6_244
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_6_244
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_6_242
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_6_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_6_246
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_6_241
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_6_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_6_248
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_6_244
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_6_248
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_6_241
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_6_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_6_249
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_6_244
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_6_248
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_6_241
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_6_249
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_6_244
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_6_246
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_6_242
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_6_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_6_250
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_6_244
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_6_246
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_6_242
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_6_250
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_6_249
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_6_252
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_6_252
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
  (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
  (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
  (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_6_250
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_6_254
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_6_254
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_6_249
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_6_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_6_256
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_6_252
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_6_256
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_6_249
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_6_257
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_6_257
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_6_252
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_6_256
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_6_249
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_6_257
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256)
     (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_6_252
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_6_254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_6_250
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_6_258
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_6_258
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_6_252
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_6_254
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_6_250
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_6_258
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254)
     (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_6_257
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_6_260
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_6_260
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_6_260
   (bvlshr word.addr.4.i.i.i.i.i_6_257 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_6_260
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_6_261
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_6_261
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_6_261
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_6_258
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_6_261
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_6_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_6_262
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_6_262
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_6_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_6_264
[handleBinaryOperatorInst] AND instruction
(= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_6_115
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_6_114
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_6_267
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_6_267
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_6_264
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_6_267
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_6_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_6_270
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
  (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
  (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
  (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
  (= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 #x000000fe))
  (= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256)
     (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254)
     (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))
  (= word.addr.4.lobit.i.i.i.i.i.neg_6_260
   (bvlshr word.addr.4.i.i.i.i.i_6_257 #x000000000000003f))
  (= i.i.i.i.i.i.neg_6_261
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))
  (= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))
  (= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_6_267
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_6_271
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_6_271
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_6_271
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_6_273
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_6_273
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_6_273 (bvshl #xffffffffffffffff sh_prom.i.i.i_6_271))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_6_273
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_6_275
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_6_275
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_6_273
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_6_214
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_6_276
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_6_276
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_6_270
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_6_276
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_6_278
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_6_278
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_6_270
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_6_276
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_6_278
[handleSelectInst](ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.0.0.i.i.i_6_278 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond200.i,,cmp24.old.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond199.i,,cmp24.i
cond12.i.i,i35.i.i,i36.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
cond27.i.i,i33.i.i,i37.i.i
cond.i327.i,i.i322.i,i34.i.i
cond40.i.i,i.i322.i,i38.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_6_270
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_6_275
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_6_280
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_6_280
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_6_270
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_6_275
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_6_280
[handleSelectInst](ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.3.0.i.i.i_6_280 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i.i_6_281
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i.i_6_281
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_139 i9.i.i_6_281)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:10
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
  (= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))
  (= notmask.i.i.i_6_273 (bvshl #xffffffffffffffff sh_prom.i.i.i_6_271))
  (= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 #xffffffffffffffff))
  (= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.0.0.i.i.i_6_278 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.3.0.i.i.i_6_280 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))
  (= dst_reg_6_139 i9.i.i_6_281)
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
  (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
  (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
  (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
  (= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 #x000000fe))
  (= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256)
     (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254)
     (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))
  (= word.addr.4.lobit.i.i.i.i.i.neg_6_260
   (bvlshr word.addr.4.i.i.i.i.i_6_257 #x000000000000003f))
  (= i.i.i.i.i.i.neg_6_261
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))
  (= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))
  (= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 52 = MemoryPhi({if.end266.i,36},{if.then250.i,25})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
umin_value259.i, dst_reg, [8]
smin_value252.i, dst_reg, [6]
umin_value.i326.i, dst_reg, [8]
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
smax_value.i.i188.i, dst_reg, [7]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
smin_value.i.i.i, dst_reg, [6]
type1, src_reg, [0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umax_value15.i.i, dst_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value.i.i.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
umin_value18.i.i, dst_reg, [8]
type, dst_reg, [0]
smax_value.i324.i, dst_reg, [7]
frameno.i.i, dst_reg, [11]
umax_value.i.i34.i, dst_reg, [9]
umax_value.i.i.i, dst_reg, [9]
smax_value253.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i.i187.i, dst_reg, [6]
var_off.i28.i.repack1, dst_reg, [5, 1]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
umin_value.i.i33.i, dst_reg, [8]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
umax_value254.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
umin_value.i.i189.i, dst_reg, [8]
umax_value.i.i190.i, dst_reg, [9]
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i.i_6_282
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i.i_6_282
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
[handleLoadInst] (= dst_reg_6_140 i11.i.i_6_282)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:11
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
  (= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))
  (= notmask.i.i.i_6_273 (bvshl #xffffffffffffffff sh_prom.i.i.i_6_271))
  (= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 #xffffffffffffffff))
  (= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.0.0.i.i.i_6_278 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.3.0.i.i.i_6_280 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))
  (= dst_reg_6_139 i9.i.i_6_281)
  (= dst_reg_6_140 i11.i.i_6_282)
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
  (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
  (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
  (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
  (= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 #x000000fe))
  (= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256)
     (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254)
     (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))
  (= word.addr.4.lobit.i.i.i.i.i.neg_6_260
   (bvlshr word.addr.4.i.i.i.i.i_6_257 #x000000000000003f))
  (= i.i.i.i.i.i.neg_6_261
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))
  (= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))
  (= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:2
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:16
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))

-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_6_278
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i.i_6_281
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_6_283
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_6_283
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_6_283 (bvor retval.sroa.0.0.i.i.i_6_278 i9.i.i_6_281))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_6_280
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_6_282
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_6_284
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_6_284
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_6_284 (bvand retval.sroa.3.0.i.i.i_6_280 i11.i.i_6_282))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_6_284
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_6_286
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_6_286
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_6_286 (bvxor and.i1.i.i_6_284 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_6_283
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_6_286
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_6_287
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_6_287
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_6_287 (bvand or.i.i.i_6_283 neg.i.i.i_6_286))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_6_287
[handleStoreInst] BVToStore: and4.i.i.i_6_287
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 47 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_190 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_6_287 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46}) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
46 = MemoryDef(45) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
47 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_6_284
[handleStoreInst] BVToStore: and.i1.i.i_6_284
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 48 = MemoryDef(47)
[handleStoreInst] definingMemoryAccess: 47 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_6_191 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_6_284 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46}) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
46 = MemoryDef(45) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ and.i1.i.i_6_284 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
47 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_288
[lookInsideStruct] singleValueType:dst_reg_6_288
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_289
[lookInsideStruct] singleValueType:dst_reg_6_289
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_290
[lookInsideStruct] singleValueType:dst_reg_6_290
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_291
[lookInsideStruct] singleValueType:dst_reg_6_291
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_292
[lookInsideStruct] singleValueType:dst_reg_6_292
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_293
[lookInsideStruct] singleValueType:dst_reg_6_293
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_294
[lookInsideStruct] singleValueType:dst_reg_6_294
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_295
[lookInsideStruct] singleValueType:dst_reg_6_295
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_296
[lookInsideStruct] singleValueType:dst_reg_6_296
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_297
[lookInsideStruct] singleValueType:dst_reg_6_297
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_298
[lookInsideStruct] singleValueType:dst_reg_6_298
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_299
[lookInsideStruct] singleValueType:dst_reg_6_299
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_300
[lookInsideStruct] singleValueType:dst_reg_6_300
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_301
[lookInsideStruct] singleValueType:dst_reg_6_301
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_302
[lookInsideStruct] singleValueType:src_reg_6_302
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_303
[lookInsideStruct] singleValueType:src_reg_6_303
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_304
[lookInsideStruct] singleValueType:src_reg_6_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_305
[lookInsideStruct] singleValueType:src_reg_6_305
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_306
[lookInsideStruct] singleValueType:src_reg_6_306
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_307
[lookInsideStruct] singleValueType:src_reg_6_307
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_308
[lookInsideStruct] singleValueType:src_reg_6_308
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_309
[lookInsideStruct] singleValueType:src_reg_6_309
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_310
[lookInsideStruct] singleValueType:src_reg_6_310
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_311
[lookInsideStruct] singleValueType:src_reg_6_311
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_312
[lookInsideStruct] singleValueType:src_reg_6_312
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_313
[lookInsideStruct] singleValueType:src_reg_6_313
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_314
[lookInsideStruct] singleValueType:src_reg_6_314
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_315
[lookInsideStruct] singleValueType:src_reg_6_315
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
- dst_reg: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_6_302)
(= src_reg_6_15 src_reg_6_303)
(= src_reg_6_16 src_reg_6_304)
(= src_reg_6_17 src_reg_6_305)
(= src_reg_6_18 src_reg_6_306)
(= src_reg_6_19 src_reg_6_307)
(= src_reg_6_20 src_reg_6_308)
(= src_reg_6_21 src_reg_6_309)
(= src_reg_6_22 src_reg_6_310)
(= src_reg_6_23 src_reg_6_311)
(= src_reg_6_24 src_reg_6_312)
(= src_reg_6_25 src_reg_6_313)
(= src_reg_6_26 src_reg_6_314)
(= src_reg_6_27 src_reg_6_315)
(= #x00000001 dst_reg_6_288)
(= dst_reg_6_1 dst_reg_6_289)
(= dst_reg_6_2 dst_reg_6_290)
(= dst_reg_6_3 dst_reg_6_291)
(= #x0000000000000000 dst_reg_6_292)
(= #xffffffffffffffff dst_reg_6_293)
(= #x8000000000000000 dst_reg_6_294)
(= #x7fffffffffffffff dst_reg_6_295)
(= #x0000000000000000 dst_reg_6_296)
(= #xffffffffffffffff dst_reg_6_297)
(= #x00000000 dst_reg_6_298)
(= dst_reg_6_11 dst_reg_6_299)
(= dst_reg_6_12 dst_reg_6_300)
(= dst_reg_6_13 dst_reg_6_301)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 48 = MemoryDef(47)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ and.i1.i.i_6_284 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ and.i1.i.i_6_284 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_6_200 src_reg_6_302)
(= src_reg_6_201 src_reg_6_303)
(= src_reg_6_202 src_reg_6_304)
(= src_reg_6_203 src_reg_6_305)
(= src_reg_6_204 src_reg_6_306)
(= src_reg_6_205 src_reg_6_307)
(= src_reg_6_206 src_reg_6_308)
(= src_reg_6_207 src_reg_6_309)
(= src_reg_6_208 src_reg_6_310)
(= src_reg_6_209 src_reg_6_311)
(= src_reg_6_210 src_reg_6_312)
(= src_reg_6_211 src_reg_6_313)
(= src_reg_6_212 src_reg_6_314)
(= src_reg_6_213 src_reg_6_315)
(= dst_reg_6_186 dst_reg_6_288)
(= dst_reg_6_187 dst_reg_6_289)
(= dst_reg_6_188 dst_reg_6_290)
(= dst_reg_6_189 dst_reg_6_291)
(= and4.i.i.i_6_287 dst_reg_6_292)
(= and.i1.i.i_6_284 dst_reg_6_293)
(= dst_reg_6_192 dst_reg_6_294)
(= dst_reg_6_193 dst_reg_6_295)
(= dst_reg_6_194 dst_reg_6_296)
(= dst_reg_6_195 dst_reg_6_297)
(= dst_reg_6_196 dst_reg_6_298)
(= dst_reg_6_197 dst_reg_6_299)
(= dst_reg_6_198 dst_reg_6_300)
(= dst_reg_6_199 dst_reg_6_301)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_6_302)
(= src_reg_6_15 src_reg_6_303)
(= src_reg_6_16 src_reg_6_304)
(= src_reg_6_17 src_reg_6_305)
(= src_reg_6_18 src_reg_6_306)
(= src_reg_6_19 src_reg_6_307)
(= src_reg_6_20 src_reg_6_308)
(= src_reg_6_21 src_reg_6_309)
(= src_reg_6_22 src_reg_6_310)
(= src_reg_6_23 src_reg_6_311)
(= src_reg_6_24 src_reg_6_312)
(= src_reg_6_25 src_reg_6_313)
(= src_reg_6_26 src_reg_6_314)
(= src_reg_6_27 src_reg_6_315)
(= #x00000001 dst_reg_6_288)
(= dst_reg_6_1 dst_reg_6_289)
(= dst_reg_6_2 dst_reg_6_290)
(= dst_reg_6_3 dst_reg_6_291)
(= #x0000000000000000 dst_reg_6_292)
(= #xffffffffffffffff dst_reg_6_293)
(= #x8000000000000000 dst_reg_6_294)
(= #x7fffffffffffffff dst_reg_6_295)
(= #x0000000000000000 dst_reg_6_296)
(= #xffffffffffffffff dst_reg_6_297)
(= #x00000000 dst_reg_6_298)
(= dst_reg_6_11 dst_reg_6_299)
(= dst_reg_6_12 dst_reg_6_300)
(= dst_reg_6_13 dst_reg_6_301)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_6_302)
  (= src_reg_6_15 src_reg_6_303)
  (= src_reg_6_16 src_reg_6_304)
  (= src_reg_6_17 src_reg_6_305)
  (= src_reg_6_18 src_reg_6_306)
  (= src_reg_6_19 src_reg_6_307)
  (= src_reg_6_20 src_reg_6_308)
  (= src_reg_6_21 src_reg_6_309)
  (= src_reg_6_22 src_reg_6_310)
  (= src_reg_6_23 src_reg_6_311)
  (= src_reg_6_24 src_reg_6_312)
  (= src_reg_6_25 src_reg_6_313)
  (= src_reg_6_26 src_reg_6_314)
  (= src_reg_6_27 src_reg_6_315)
  (= #x00000001 dst_reg_6_288)
  (= dst_reg_6_1 dst_reg_6_289)
  (= dst_reg_6_2 dst_reg_6_290)
  (= dst_reg_6_3 dst_reg_6_291)
  (= #x0000000000000000 dst_reg_6_292)
  (= #xffffffffffffffff dst_reg_6_293)
  (= #x8000000000000000 dst_reg_6_294)
  (= #x7fffffffffffffff dst_reg_6_295)
  (= #x0000000000000000 dst_reg_6_296)
  (= #xffffffffffffffff dst_reg_6_297)
  (= #x00000000 dst_reg_6_298)
  (= dst_reg_6_11 dst_reg_6_299)
  (= dst_reg_6_12 dst_reg_6_300)
  (= dst_reg_6_13 dst_reg_6_301)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= cond40.i.i_6_185 dst_reg_6_192)
  (= i37.i.i_6_176 dst_reg_6_193)
  (= cond40.i.i_6_185 dst_reg_6_194)
  (= dst_reg_6_144 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= dst_reg_6_141 dst_reg_6_192)
  (= dst_reg_6_142 dst_reg_6_193)
  (= dst_reg_6_143 dst_reg_6_194)
  (= dst_reg_6_144 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.then250.i, if.end309.i> :
  (= #x00000001 src_reg_6_149)
  (= src_reg_6_15 src_reg_6_150)
  (= src_reg_6_16 src_reg_6_151)
  (= src_reg_6_17 src_reg_6_152)
  (= src_reg_6_18 src_reg_6_153)
  (= src_reg_6_19 src_reg_6_154)
  (= src_reg_6_20 src_reg_6_155)
  (= src_reg_6_21 src_reg_6_156)
  (= src_reg_6_22 src_reg_6_157)
  (= src_reg_6_23 src_reg_6_158)
  (= src_reg_6_24 src_reg_6_159)
  (= src_reg_6_25 src_reg_6_160)
  (= src_reg_6_26 src_reg_6_161)
  (= src_reg_6_27 src_reg_6_162)
  (= #x00000001 dst_reg_6_135)
  (= dst_reg_6_1 dst_reg_6_136)
  (= dst_reg_6_2 dst_reg_6_137)
  (= dst_reg_6_3 dst_reg_6_138)
  (= #x0000000000000000 dst_reg_6_139)
  (= #xffffffffffffffff dst_reg_6_140)
  (= #x8000000000000000 dst_reg_6_141)
  (= #x7fffffffffffffff dst_reg_6_142)
  (= #x0000000000000000 dst_reg_6_143)
  (= #xffffffffffffffff dst_reg_6_144)
  (= dst_reg_6_10 dst_reg_6_145)
  (= dst_reg_6_11 dst_reg_6_146)
  (= dst_reg_6_12 dst_reg_6_147)
  (= dst_reg_6_13 dst_reg_6_148)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_6_302)
  (= src_reg_6_15 src_reg_6_303)
  (= src_reg_6_16 src_reg_6_304)
  (= src_reg_6_17 src_reg_6_305)
  (= src_reg_6_18 src_reg_6_306)
  (= src_reg_6_19 src_reg_6_307)
  (= src_reg_6_20 src_reg_6_308)
  (= src_reg_6_21 src_reg_6_309)
  (= src_reg_6_22 src_reg_6_310)
  (= src_reg_6_23 src_reg_6_311)
  (= src_reg_6_24 src_reg_6_312)
  (= src_reg_6_25 src_reg_6_313)
  (= src_reg_6_26 src_reg_6_314)
  (= src_reg_6_27 src_reg_6_315)
  (= #x00000001 dst_reg_6_288)
  (= dst_reg_6_1 dst_reg_6_289)
  (= dst_reg_6_2 dst_reg_6_290)
  (= dst_reg_6_3 dst_reg_6_291)
  (= #x0000000000000000 dst_reg_6_292)
  (= #xffffffffffffffff dst_reg_6_293)
  (= #x8000000000000000 dst_reg_6_294)
  (= #x7fffffffffffffff dst_reg_6_295)
  (= #x0000000000000000 dst_reg_6_296)
  (= #xffffffffffffffff dst_reg_6_297)
  (= #x00000000 dst_reg_6_298)
  (= dst_reg_6_11 dst_reg_6_299)
  (= dst_reg_6_12 dst_reg_6_300)
  (= dst_reg_6_13 dst_reg_6_301)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= i38.i.i_6_179 dst_reg_6_192)
  (= cond27.i.i_6_181 dst_reg_6_193)
  (= dst_reg_6_143 dst_reg_6_194)
  (= cond27.i.i_6_181 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.end266.i, if.end309.i> :
  (= src_reg_6_100 src_reg_6_149)
  (= src_reg_6_101 src_reg_6_150)
  (= src_reg_6_102 src_reg_6_151)
  (= src_reg_6_103 src_reg_6_152)
  (= src_reg_6_104 src_reg_6_153)
  (= src_reg_6_105 src_reg_6_154)
  (= src_reg_6_106 src_reg_6_155)
  (= src_reg_6_107 src_reg_6_156)
  (= src_reg_6_108 src_reg_6_157)
  (= src_reg_6_109 src_reg_6_158)
  (= src_reg_6_110 src_reg_6_159)
  (= src_reg_6_111 src_reg_6_160)
  (= src_reg_6_112 src_reg_6_161)
  (= src_reg_6_113 src_reg_6_162)
  (= dst_reg_6_86 dst_reg_6_135)
  (= dst_reg_6_87 dst_reg_6_136)
  (= dst_reg_6_88 dst_reg_6_137)
  (= dst_reg_6_89 dst_reg_6_138)
  (= shl.i.i_6_121 dst_reg_6_139)
  (= shl5.i.i_6_122 dst_reg_6_140)
  (= or.i200.i_6_125 dst_reg_6_141)
  (= or8.i206.i_6_128 dst_reg_6_142)
  (= cond23.i212.i_6_131 dst_reg_6_143)
  (= cond35.i217.i_6_134 dst_reg_6_144)
  (= dst_reg_6_96 dst_reg_6_145)
  (= dst_reg_6_97 dst_reg_6_146)
  (= dst_reg_6_98 dst_reg_6_147)
  (= dst_reg_6_99 dst_reg_6_148)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_6_200 src_reg_6_302)
  (= src_reg_6_201 src_reg_6_303)
  (= src_reg_6_202 src_reg_6_304)
  (= src_reg_6_203 src_reg_6_305)
  (= src_reg_6_204 src_reg_6_306)
  (= src_reg_6_205 src_reg_6_307)
  (= src_reg_6_206 src_reg_6_308)
  (= src_reg_6_207 src_reg_6_309)
  (= src_reg_6_208 src_reg_6_310)
  (= src_reg_6_209 src_reg_6_311)
  (= src_reg_6_210 src_reg_6_312)
  (= src_reg_6_211 src_reg_6_313)
  (= src_reg_6_212 src_reg_6_314)
  (= src_reg_6_213 src_reg_6_315)
  (= dst_reg_6_186 dst_reg_6_288)
  (= dst_reg_6_187 dst_reg_6_289)
  (= dst_reg_6_188 dst_reg_6_290)
  (= dst_reg_6_189 dst_reg_6_291)
  (= and4.i.i.i_6_287 dst_reg_6_292)
  (= and.i1.i.i_6_284 dst_reg_6_293)
  (= dst_reg_6_192 dst_reg_6_294)
  (= dst_reg_6_193 dst_reg_6_295)
  (= dst_reg_6_194 dst_reg_6_296)
  (= dst_reg_6_195 dst_reg_6_297)
  (= dst_reg_6_196 dst_reg_6_298)
  (= dst_reg_6_197 dst_reg_6_299)
  (= dst_reg_6_198 dst_reg_6_300)
  (= dst_reg_6_199 dst_reg_6_301)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_6_149 src_reg_6_200)
  (= src_reg_6_150 src_reg_6_201)
  (= src_reg_6_151 src_reg_6_202)
  (= src_reg_6_152 src_reg_6_203)
  (= src_reg_6_153 src_reg_6_204)
  (= src_reg_6_154 src_reg_6_205)
  (= src_reg_6_155 src_reg_6_206)
  (= src_reg_6_156 src_reg_6_207)
  (= src_reg_6_157 src_reg_6_208)
  (= src_reg_6_158 src_reg_6_209)
  (= src_reg_6_159 src_reg_6_210)
  (= src_reg_6_160 src_reg_6_211)
  (= src_reg_6_161 src_reg_6_212)
  (= src_reg_6_162 src_reg_6_213)
  (= dst_reg_6_135 dst_reg_6_186)
  (= dst_reg_6_136 dst_reg_6_187)
  (= dst_reg_6_137 dst_reg_6_188)
  (= dst_reg_6_138 dst_reg_6_189)
  (= dst_reg_6_139 dst_reg_6_190)
  (= dst_reg_6_140 dst_reg_6_191)
  (= cond.i327.i_6_171 dst_reg_6_192)
  (= cond12.i.i_6_175 dst_reg_6_193)
  (= cond.i327.i_6_171 dst_reg_6_194)
  (= cond12.i.i_6_175 dst_reg_6_195)
  (= dst_reg_6_145 dst_reg_6_196)
  (= dst_reg_6_146 dst_reg_6_197)
  (= dst_reg_6_147 dst_reg_6_198)
  (= dst_reg_6_148 dst_reg_6_199)
<if.else261.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= shl263.i_6_84 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
<if.then258.i, if.end266.i> :
  (= #x00000001 src_reg_6_100)
  (= src_reg_6_15 src_reg_6_101)
  (= src_reg_6_16 src_reg_6_102)
  (= src_reg_6_17 src_reg_6_103)
  (= src_reg_6_18 src_reg_6_104)
  (= src_reg_6_19 src_reg_6_105)
  (= src_reg_6_20 src_reg_6_106)
  (= src_reg_6_21 src_reg_6_107)
  (= src_reg_6_22 src_reg_6_108)
  (= src_reg_6_23 src_reg_6_109)
  (= src_reg_6_24 src_reg_6_110)
  (= src_reg_6_25 src_reg_6_111)
  (= src_reg_6_26 src_reg_6_112)
  (= src_reg_6_27 src_reg_6_113)
  (= #x00000001 dst_reg_6_86)
  (= dst_reg_6_1 dst_reg_6_87)
  (= dst_reg_6_2 dst_reg_6_88)
  (= dst_reg_6_3 dst_reg_6_89)
  (= dst_reg_6_4 dst_reg_6_90)
  (= dst_reg_6_5 dst_reg_6_91)
  (= #x8000000000000000 dst_reg_6_92)
  (= #x7fffffffffffffff dst_reg_6_93)
  (= #x0000000000000000 dst_reg_6_94)
  (= dst_reg_6_9 dst_reg_6_95)
  (= dst_reg_6_10 dst_reg_6_96)
  (= dst_reg_6_11 dst_reg_6_97)
  (= dst_reg_6_12 dst_reg_6_98)
  (= dst_reg_6_13 dst_reg_6_99)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_6_36
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_6_36 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_6_36 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_6_36 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_6_46
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
if.then26.i
  (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
if.then26.i
  (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_6_50
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb247.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_6_36
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.bb247.i>: (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i>: (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.bb247.i: (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.then41.i: (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
sw.bb247.i
=========================
-------------------
  %cmp248.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
-------------------
-------------------
  br i1 %cmp248.not.i, label %if.end251.i, label %if.then250.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp248.not.i = icmp ult i64 %src_reg1.sroa.22.0.copyload, 64
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp248.not.i_6_68
[handleBranchInst] Edge Assertions:
<sw.bb247.i, if.end251.i>: (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i>: (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end251.i: (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.then250.i: (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
-------------------
  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
-------------------
  %smin_value.i.i187.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i187.i, align 8
-------------------
-------------------
  %smax_value.i.i188.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i188.i, align 8
-------------------
-------------------
  %umin_value.i.i189.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i189.i, align 8
-------------------
-------------------
  %umax_value.i.i190.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i190.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.end309.i: (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.end251.i
=========================
-------------------
  %smin_value252.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value252.i, align 8
-------------------
-------------------
  %smax_value253.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value253.i, align 8
-------------------
-------------------
  %umax_value254.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i261.i = load i64, i64* %umax_value254.i, align 8
-------------------
-------------------
  %shl.i = lshr i64 -9223372036854775808, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %cmp256.i = icmp ugt i64 %i261.i, %shl.i
-------------------
-------------------
  %umin_value259.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  br i1 %cmp256.i, label %if.then258.i, label %if.else261.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp256.i = icmp ugt i64 %i261.i, %shl.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp256.i_6_81
[handleBranchInst] Edge Assertions:
<if.end251.i, if.then258.i>: (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i>: (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then258.i: (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.else261.i: (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value259.i, align 8
-------------------
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end266.i
[handleBranchInst] newPathCond: (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.end266.i: (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] <if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.else261.i
=========================
-------------------
  %i262.i = load i64, i64* %umin_value259.i, align 8
-------------------
-------------------
  %shl263.i = shl i64 %i262.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  store i64 %shl263.i, i64* %umin_value259.i, align 8
-------------------
-------------------
  %shl265.i = shl i64 %i261.i, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end266.i
[handleBranchInst] newPathCond: (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] if.end266.i: (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] <if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.end266.i
=========================
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
-------------------
  store i64 %storemerge.i, i64* %umax_value254.i, align 8
-------------------
-------------------
  %i263.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %sh_prom.i.i = and i64 %src_reg1.sroa.17.0.copyload, 255
-------------------
-------------------
  %shl.i.i = shl i64 %i263.i, %sh_prom.i.i
-------------------
-------------------
  %shl5.i.i = shl i64 %i215.i, %sh_prom.i.i
-------------------
-------------------
  store i64 %shl.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %shl5.i.i, i64* %i214.i, align 8
-------------------
-------------------
  %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
-------------------
-------------------
  %or.i200.i = or i64 %shl.i.i, %and.i199.i
-------------------
-------------------
  store i64 %or.i200.i, i64* %smin_value252.i, align 8
-------------------
-------------------
  %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
-------------------
-------------------
  %or8.i206.i = or i64 %shl.i.i, %and7.i205.i
-------------------
-------------------
  store i64 %or8.i206.i, i64* %smax_value253.i, align 8
-------------------
-------------------
  %i26.i210.i = load i64, i64* %umin_value259.i, align 8
-------------------
-------------------
  %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
-------------------
-------------------
  %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
-------------------
-------------------
  store i64 %cond23.i212.i, i64* %umin_value259.i, align 8
-------------------
-------------------
  %or29.i215.i = or i64 %shl.i.i, %shl5.i.i
-------------------
-------------------
  %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
-------------------
-------------------
  %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
-------------------
-------------------
  store i64 %cond35.i217.i, i64* %umax_value254.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] if.end309.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
[handleBranchInst] <if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] EdgeAssertionsMap:
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
=========================
if.end309.i
=========================
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_6_165
[handleBranchInst] Edge Assertions:
<if.end309.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.end309.i, lor.lhs.false.i.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] <if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
[handleBranchInst] <if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_6_168
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
[handleBranchInst] if.end.i.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_6_178
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] if.else.i331.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp16.i.i_6_178 #b1)
           (= cmp1.i325.i_6_168 #b0)
           (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp16.i.i_6_178 #b1)
           (= cmp1.i325.i_6_168 #b0)
           (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp16.i.i_6_178 #b1)
           (= cmp1.i325.i_6_168 #b0)
           (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_6_183
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_6_183 #b0)
                (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_6_183 #b0)
                (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp31.i330.i_6_183 #b0)
                (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_6_218
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
               (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))))
(let ((a!2 (and (= cmp256.i_6_81 #b0)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1))))
      (a!3 (and (= cmp256.i_6_81 #b1)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_6_68 #b0)
                    (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!5 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4))))
      (a!6 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4)))))
(let ((a!7 (or (and (= cmp31.i330.i_6_183 #b1) a!5)
               (and (= cmp31.i330.i_6_183 #b0) a!5)
               a!6
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!4))
               (and (= cmp.i323.i_6_165 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!7)
      (and (= cmp.i.i.i.i_6_218 #b1) a!7)
      (and (= tobool.not.i.i_6_36 #b0) a!1)
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
               (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))))
(let ((a!2 (and (= cmp256.i_6_81 #b0)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1))))
      (a!3 (and (= cmp256.i_6_81 #b1)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_6_68 #b0)
                    (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!5 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4))))
      (a!6 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4)))))
(let ((a!7 (or (and (= cmp31.i330.i_6_183 #b1) a!5)
               (and (= cmp31.i330.i_6_183 #b0) a!5)
               a!6
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!4))
               (and (= cmp.i323.i_6_165 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!7)
      (and (= cmp.i.i.i.i_6_218 #b1) a!7)
      (and (= tobool.not.i.i_6_36 #b0) a!1)
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.bb247.i
=========================
=========================
if.then250.i
=========================
=========================
if.end251.i
=========================
=========================
if.then258.i
=========================
=========================
if.else261.i
=========================
=========================
if.end266.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= #x0000000000000000 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
phiResolveI (i=1) (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= shl263.i_6_84 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else261.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else261.i_if.end266.i_6_114
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.else261.i_if.end266.i_6_114 a!1))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then258.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then258.i_if.end266.i_6_115
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.then258.i_if.end266.i_6_115 a!1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))
  (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= #x0000000000000000 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
  (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= shl263.i_6_84 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
  (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.else261.i_if.end266.i_6_114 a!1))
  (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.then258.i_if.end266.i_6_115 a!1))

=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1))
      (and (= src_reg_6_100 src_reg_6_149)
           (= src_reg_6_101 src_reg_6_150)
           (= src_reg_6_102 src_reg_6_151)
           (= src_reg_6_103 src_reg_6_152)
           (= src_reg_6_104 src_reg_6_153)
           (= src_reg_6_105 src_reg_6_154)
           (= src_reg_6_106 src_reg_6_155)
           (= src_reg_6_107 src_reg_6_156)
           (= src_reg_6_108 src_reg_6_157)
           (= src_reg_6_109 src_reg_6_158)
           (= src_reg_6_110 src_reg_6_159)
           (= src_reg_6_111 src_reg_6_160)
           (= src_reg_6_112 src_reg_6_161)
           (= src_reg_6_113 src_reg_6_162)
           (= dst_reg_6_86 dst_reg_6_135)
           (= dst_reg_6_87 dst_reg_6_136)
           (= dst_reg_6_88 dst_reg_6_137)
           (= dst_reg_6_89 dst_reg_6_138)
           (= shl.i.i_6_121 dst_reg_6_139)
           (= shl5.i.i_6_122 dst_reg_6_140)
           (= or.i200.i_6_125 dst_reg_6_141)
           (= or8.i206.i_6_128 dst_reg_6_142)
           (= cond23.i212.i_6_131 dst_reg_6_143)
           (= cond35.i217.i_6_134 dst_reg_6_144)
           (= dst_reg_6_96 dst_reg_6_145)
           (= dst_reg_6_97 dst_reg_6_146)
           (= dst_reg_6_98 dst_reg_6_147)
           (= dst_reg_6_99 dst_reg_6_148))))
phiResolveI (i=1) (let ((a!1 (and (= cmp248.not.i_6_68 #b0)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_149)
           (= src_reg_6_15 src_reg_6_150)
           (= src_reg_6_16 src_reg_6_151)
           (= src_reg_6_17 src_reg_6_152)
           (= src_reg_6_18 src_reg_6_153)
           (= src_reg_6_19 src_reg_6_154)
           (= src_reg_6_20 src_reg_6_155)
           (= src_reg_6_21 src_reg_6_156)
           (= src_reg_6_22 src_reg_6_157)
           (= src_reg_6_23 src_reg_6_158)
           (= src_reg_6_24 src_reg_6_159)
           (= src_reg_6_25 src_reg_6_160)
           (= src_reg_6_26 src_reg_6_161)
           (= src_reg_6_27 src_reg_6_162)
           (= #x00000001 dst_reg_6_135)
           (= dst_reg_6_1 dst_reg_6_136)
           (= dst_reg_6_2 dst_reg_6_137)
           (= dst_reg_6_3 dst_reg_6_138)
           (= #x0000000000000000 dst_reg_6_139)
           (= #xffffffffffffffff dst_reg_6_140)
           (= #x8000000000000000 dst_reg_6_141)
           (= #x7fffffffffffffff dst_reg_6_142)
           (= #x0000000000000000 dst_reg_6_143)
           (= #xffffffffffffffff dst_reg_6_144)
           (= dst_reg_6_10 dst_reg_6_145)
           (= dst_reg_6_11 dst_reg_6_146)
           (= dst_reg_6_12 dst_reg_6_147)
           (= dst_reg_6_13 dst_reg_6_148))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
          (and (= cmp.i323.i_6_165 #b1) a!2))
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= cond.i327.i_6_171 dst_reg_6_192)
           (= cond12.i.i_6_175 dst_reg_6_193)
           (= cond.i327.i_6_171 dst_reg_6_194)
           (= cond12.i.i_6_175 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp16.i.i_6_178 #b1)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= i38.i.i_6_179 dst_reg_6_192)
           (= cond27.i.i_6_181 dst_reg_6_193)
           (= dst_reg_6_143 dst_reg_6_194)
           (= cond27.i.i_6_181 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp31.i330.i_6_183 #b0)
           (= cmp16.i.i_6_178 #b0)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= dst_reg_6_141 dst_reg_6_192)
           (= dst_reg_6_142 dst_reg_6_193)
           (= dst_reg_6_143 dst_reg_6_194)
           (= dst_reg_6_144 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
phiResolveI (i=3) (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp31.i330.i_6_183 #b1)
           (= cmp16.i.i_6_178 #b0)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= cond40.i.i_6_185 dst_reg_6_192)
           (= i37.i.i_6_176 dst_reg_6_193)
           (= cond40.i.i_6_185 dst_reg_6_194)
           (= dst_reg_6_144 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
     (and (= cmp.i.i.i.i_6_218 #b0) a!5))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
     (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
  (= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))
  (= notmask.i.i.i_6_273 (bvshl #xffffffffffffffff sh_prom.i.i.i_6_271))
  (= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 #xffffffffffffffff))
  (= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.0.0.i.i.i_6_278 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.3.0.i.i.i_6_280 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))
  (= dst_reg_6_139 i9.i.i_6_281)
  (= dst_reg_6_140 i11.i.i_6_282)
  (= or.i.i.i_6_283 (bvor retval.sroa.0.0.i.i.i_6_278 i9.i.i_6_281))
  (= and.i1.i.i_6_284 (bvand retval.sroa.3.0.i.i.i_6_280 i11.i.i_6_282))
  (= neg.i.i.i_6_286 (bvxor and.i1.i.i_6_284 #xffffffffffffffff))
  (= and4.i.i.i_6_287 (bvand or.i.i.i_6_283 neg.i.i.i_6_286))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
     (and (= cmp.i.i.i.i_6_218 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
     (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
        (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
    (and (= #x00000001 src_reg_6_302)
         (= src_reg_6_15 src_reg_6_303)
         (= src_reg_6_16 src_reg_6_304)
         (= src_reg_6_17 src_reg_6_305)
         (= src_reg_6_18 src_reg_6_306)
         (= src_reg_6_19 src_reg_6_307)
         (= src_reg_6_20 src_reg_6_308)
         (= src_reg_6_21 src_reg_6_309)
         (= src_reg_6_22 src_reg_6_310)
         (= src_reg_6_23 src_reg_6_311)
         (= src_reg_6_24 src_reg_6_312)
         (= src_reg_6_25 src_reg_6_313)
         (= src_reg_6_26 src_reg_6_314)
         (= src_reg_6_27 src_reg_6_315)
         (= #x00000001 dst_reg_6_288)
         (= dst_reg_6_1 dst_reg_6_289)
         (= dst_reg_6_2 dst_reg_6_290)
         (= dst_reg_6_3 dst_reg_6_291)
         (= #x0000000000000000 dst_reg_6_292)
         (= #xffffffffffffffff dst_reg_6_293)
         (= #x8000000000000000 dst_reg_6_294)
         (= #x7fffffffffffffff dst_reg_6_295)
         (= #x0000000000000000 dst_reg_6_296)
         (= #xffffffffffffffff dst_reg_6_297)
         (= #x00000000 dst_reg_6_298)
         (= dst_reg_6_11 dst_reg_6_299)
         (= dst_reg_6_12 dst_reg_6_300)
         (= dst_reg_6_13 dst_reg_6_301)))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_6_218 #b0) a!5)
          (and (= cmp.i.i.i.i_6_218 #b1) a!5))
      (and (= src_reg_6_200 src_reg_6_302)
           (= src_reg_6_201 src_reg_6_303)
           (= src_reg_6_202 src_reg_6_304)
           (= src_reg_6_203 src_reg_6_305)
           (= src_reg_6_204 src_reg_6_306)
           (= src_reg_6_205 src_reg_6_307)
           (= src_reg_6_206 src_reg_6_308)
           (= src_reg_6_207 src_reg_6_309)
           (= src_reg_6_208 src_reg_6_310)
           (= src_reg_6_209 src_reg_6_311)
           (= src_reg_6_210 src_reg_6_312)
           (= src_reg_6_211 src_reg_6_313)
           (= src_reg_6_212 src_reg_6_314)
           (= src_reg_6_213 src_reg_6_315)
           (= dst_reg_6_186 dst_reg_6_288)
           (= dst_reg_6_187 dst_reg_6_289)
           (= dst_reg_6_188 dst_reg_6_290)
           (= dst_reg_6_189 dst_reg_6_291)
           (= and4.i.i.i_6_287 dst_reg_6_292)
           (= and.i1.i.i_6_284 dst_reg_6_293)
           (= dst_reg_6_192 dst_reg_6_294)
           (= dst_reg_6_193 dst_reg_6_295)
           (= dst_reg_6_194 dst_reg_6_296)
           (= dst_reg_6_195 dst_reg_6_297)
           (= dst_reg_6_196 dst_reg_6_298)
           (= dst_reg_6_197 dst_reg_6_299)
           (= dst_reg_6_198 dst_reg_6_300)
           (= dst_reg_6_199 dst_reg_6_301)))))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_302)
           (= src_reg_6_15 src_reg_6_303)
           (= src_reg_6_16 src_reg_6_304)
           (= src_reg_6_17 src_reg_6_305)
           (= src_reg_6_18 src_reg_6_306)
           (= src_reg_6_19 src_reg_6_307)
           (= src_reg_6_20 src_reg_6_308)
           (= src_reg_6_21 src_reg_6_309)
           (= src_reg_6_22 src_reg_6_310)
           (= src_reg_6_23 src_reg_6_311)
           (= src_reg_6_24 src_reg_6_312)
           (= src_reg_6_25 src_reg_6_313)
           (= src_reg_6_26 src_reg_6_314)
           (= src_reg_6_27 src_reg_6_315)
           (= #x00000001 dst_reg_6_288)
           (= dst_reg_6_1 dst_reg_6_289)
           (= dst_reg_6_2 dst_reg_6_290)
           (= dst_reg_6_3 dst_reg_6_291)
           (= #x0000000000000000 dst_reg_6_292)
           (= #xffffffffffffffff dst_reg_6_293)
           (= #x8000000000000000 dst_reg_6_294)
           (= #x7fffffffffffffff dst_reg_6_295)
           (= #x0000000000000000 dst_reg_6_296)
           (= #xffffffffffffffff dst_reg_6_297)
           (= #x00000000 dst_reg_6_298)
           (= dst_reg_6_11 dst_reg_6_299)
           (= dst_reg_6_12 dst_reg_6_300)
           (= dst_reg_6_13 dst_reg_6_301))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
=========================
sw.bb247.i
=========================
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i187.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i188.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i189.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i190.i, align 8
-------------------
=========================
if.end251.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value252.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value253.i, align 8
-------------------
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value259.i, align 8
-------------------
=========================
if.else261.i
=========================
-------------------
  store i64 %shl263.i, i64* %umin_value259.i, align 8
-------------------
=========================
if.end266.i
=========================
-------------------
  store i64 %storemerge.i, i64* %umax_value254.i, align 8
-------------------
-------------------
  store i64 %shl.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %shl5.i.i, i64* %i214.i, align 8
-------------------
-------------------
  store i64 %or.i200.i, i64* %smin_value252.i, align 8
-------------------
-------------------
  store i64 %or8.i206.i, i64* %smax_value253.i, align 8
-------------------
-------------------
  store i64 %cond23.i212.i, i64* %umin_value259.i, align 8
-------------------
-------------------
  store i64 %cond35.i217.i, i64* %umax_value254.i, align 8
-------------------
=========================
if.end309.i
=========================
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 50 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,48},{if.then41.i,18})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
50 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,48},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
- dst_reg: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
}
49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46}) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
46 = MemoryDef(45) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ and.i1.i.i_6_284 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
47 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 50 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,48},{if.then41.i,18})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_316
[lookInsideStruct] singleValueType:dst_reg_6_316
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_317
[lookInsideStruct] singleValueType:dst_reg_6_317
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_318
[lookInsideStruct] singleValueType:dst_reg_6_318
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_319
[lookInsideStruct] singleValueType:dst_reg_6_319
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_320
[lookInsideStruct] singleValueType:dst_reg_6_320
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_321
[lookInsideStruct] singleValueType:dst_reg_6_321
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_322
[lookInsideStruct] singleValueType:dst_reg_6_322
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_323
[lookInsideStruct] singleValueType:dst_reg_6_323
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_324
[lookInsideStruct] singleValueType:dst_reg_6_324
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_325
[lookInsideStruct] singleValueType:dst_reg_6_325
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_326
[lookInsideStruct] singleValueType:dst_reg_6_326
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_327
[lookInsideStruct] singleValueType:dst_reg_6_327
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_328
[lookInsideStruct] singleValueType:dst_reg_6_328
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_6_329
[lookInsideStruct] singleValueType:dst_reg_6_329
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_6_316 ] [ ] [ dst_reg_6_317 ] [ dst_reg_6_318 ] [ dst_reg_6_319 ] [ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] [ dst_reg_6_322 ] [ dst_reg_6_323 ] [ dst_reg_6_324 ] [ dst_reg_6_325 ] [ ] [ dst_reg_6_326 ] [ dst_reg_6_327 ] [ dst_reg_6_328 ] [ dst_reg_6_329 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_6_288 dst_reg_6_316)
(= dst_reg_6_289 dst_reg_6_317)
(= dst_reg_6_290 dst_reg_6_318)
(= dst_reg_6_291 dst_reg_6_319)
(= dst_reg_6_292 dst_reg_6_320)
(= dst_reg_6_293 dst_reg_6_321)
(= dst_reg_6_294 dst_reg_6_322)
(= dst_reg_6_295 dst_reg_6_323)
(= dst_reg_6_296 dst_reg_6_324)
(= dst_reg_6_297 dst_reg_6_325)
(= dst_reg_6_298 dst_reg_6_326)
(= dst_reg_6_299 dst_reg_6_327)
(= dst_reg_6_300 dst_reg_6_328)
(= dst_reg_6_301 dst_reg_6_329)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_330
[lookInsideStruct] singleValueType:src_reg_6_330
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_331
[lookInsideStruct] singleValueType:src_reg_6_331
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_332
[lookInsideStruct] singleValueType:src_reg_6_332
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_333
[lookInsideStruct] singleValueType:src_reg_6_333
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_334
[lookInsideStruct] singleValueType:src_reg_6_334
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_335
[lookInsideStruct] singleValueType:src_reg_6_335
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_336
[lookInsideStruct] singleValueType:src_reg_6_336
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_337
[lookInsideStruct] singleValueType:src_reg_6_337
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_338
[lookInsideStruct] singleValueType:src_reg_6_338
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_339
[lookInsideStruct] singleValueType:src_reg_6_339
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_340
[lookInsideStruct] singleValueType:src_reg_6_340
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_341
[lookInsideStruct] singleValueType:src_reg_6_341
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_342
[lookInsideStruct] singleValueType:src_reg_6_342
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_6_343
[lookInsideStruct] singleValueType:src_reg_6_343
[setupBVTreeForArg] returning BVTree: [ [ src_reg_6_330 ] [ ] [ src_reg_6_331 ] [ src_reg_6_332 ] [ src_reg_6_333 ] [ [ src_reg_6_334 ] [ src_reg_6_335 ] ] [ src_reg_6_336 ] [ src_reg_6_337 ] [ src_reg_6_338 ] [ src_reg_6_339 ] [ ] [ src_reg_6_340 ] [ src_reg_6_341 ] [ src_reg_6_342 ] [ src_reg_6_343 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_6_302 src_reg_6_330)
(= src_reg_6_303 src_reg_6_331)
(= src_reg_6_304 src_reg_6_332)
(= src_reg_6_305 src_reg_6_333)
(= src_reg_6_306 src_reg_6_334)
(= src_reg_6_307 src_reg_6_335)
(= src_reg_6_308 src_reg_6_336)
(= src_reg_6_309 src_reg_6_337)
(= src_reg_6_310 src_reg_6_338)
(= src_reg_6_311 src_reg_6_339)
(= src_reg_6_312 src_reg_6_340)
(= src_reg_6_313 src_reg_6_341)
(= src_reg_6_314 src_reg_6_342)
(= src_reg_6_315 src_reg_6_343)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_6_330 ] [ ] [ src_reg_6_331 ] [ src_reg_6_332 ] [ src_reg_6_333 ] [ [ src_reg_6_334 ] [ src_reg_6_335 ] ] [ src_reg_6_336 ] [ src_reg_6_337 ] [ src_reg_6_338 ] [ src_reg_6_339 ] [ ] [ src_reg_6_340 ] [ src_reg_6_341 ] [ src_reg_6_342 ] [ src_reg_6_343 ] ] 
- dst_reg: [ [ dst_reg_6_316 ] [ ] [ dst_reg_6_317 ] [ dst_reg_6_318 ] [ dst_reg_6_319 ] [ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] [ dst_reg_6_322 ] [ dst_reg_6_323 ] [ dst_reg_6_324 ] [ dst_reg_6_325 ] [ ] [ dst_reg_6_326 ] [ dst_reg_6_327 ] [ dst_reg_6_328 ] [ dst_reg_6_329 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
        (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
    (and (= #x00000001 src_reg_6_302)
         (= src_reg_6_15 src_reg_6_303)
         (= src_reg_6_16 src_reg_6_304)
         (= src_reg_6_17 src_reg_6_305)
         (= src_reg_6_18 src_reg_6_306)
         (= src_reg_6_19 src_reg_6_307)
         (= src_reg_6_20 src_reg_6_308)
         (= src_reg_6_21 src_reg_6_309)
         (= src_reg_6_22 src_reg_6_310)
         (= src_reg_6_23 src_reg_6_311)
         (= src_reg_6_24 src_reg_6_312)
         (= src_reg_6_25 src_reg_6_313)
         (= src_reg_6_26 src_reg_6_314)
         (= src_reg_6_27 src_reg_6_315)
         (= #x00000001 dst_reg_6_288)
         (= dst_reg_6_1 dst_reg_6_289)
         (= dst_reg_6_2 dst_reg_6_290)
         (= dst_reg_6_3 dst_reg_6_291)
         (= #x0000000000000000 dst_reg_6_292)
         (= #xffffffffffffffff dst_reg_6_293)
         (= #x8000000000000000 dst_reg_6_294)
         (= #x7fffffffffffffff dst_reg_6_295)
         (= #x0000000000000000 dst_reg_6_296)
         (= #xffffffffffffffff dst_reg_6_297)
         (= #x00000000 dst_reg_6_298)
         (= dst_reg_6_11 dst_reg_6_299)
         (= dst_reg_6_12 dst_reg_6_300)
         (= dst_reg_6_13 dst_reg_6_301)))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_6_218 #b0) a!5)
          (and (= cmp.i.i.i.i_6_218 #b1) a!5))
      (and (= src_reg_6_200 src_reg_6_302)
           (= src_reg_6_201 src_reg_6_303)
           (= src_reg_6_202 src_reg_6_304)
           (= src_reg_6_203 src_reg_6_305)
           (= src_reg_6_204 src_reg_6_306)
           (= src_reg_6_205 src_reg_6_307)
           (= src_reg_6_206 src_reg_6_308)
           (= src_reg_6_207 src_reg_6_309)
           (= src_reg_6_208 src_reg_6_310)
           (= src_reg_6_209 src_reg_6_311)
           (= src_reg_6_210 src_reg_6_312)
           (= src_reg_6_211 src_reg_6_313)
           (= src_reg_6_212 src_reg_6_314)
           (= src_reg_6_213 src_reg_6_315)
           (= dst_reg_6_186 dst_reg_6_288)
           (= dst_reg_6_187 dst_reg_6_289)
           (= dst_reg_6_188 dst_reg_6_290)
           (= dst_reg_6_189 dst_reg_6_291)
           (= and4.i.i.i_6_287 dst_reg_6_292)
           (= and.i1.i.i_6_284 dst_reg_6_293)
           (= dst_reg_6_192 dst_reg_6_294)
           (= dst_reg_6_193 dst_reg_6_295)
           (= dst_reg_6_194 dst_reg_6_296)
           (= dst_reg_6_195 dst_reg_6_297)
           (= dst_reg_6_196 dst_reg_6_298)
           (= dst_reg_6_197 dst_reg_6_299)
           (= dst_reg_6_198 dst_reg_6_300)
           (= dst_reg_6_199 dst_reg_6_301)))))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_302)
           (= src_reg_6_15 src_reg_6_303)
           (= src_reg_6_16 src_reg_6_304)
           (= src_reg_6_17 src_reg_6_305)
           (= src_reg_6_18 src_reg_6_306)
           (= src_reg_6_19 src_reg_6_307)
           (= src_reg_6_20 src_reg_6_308)
           (= src_reg_6_21 src_reg_6_309)
           (= src_reg_6_22 src_reg_6_310)
           (= src_reg_6_23 src_reg_6_311)
           (= src_reg_6_24 src_reg_6_312)
           (= src_reg_6_25 src_reg_6_313)
           (= src_reg_6_26 src_reg_6_314)
           (= src_reg_6_27 src_reg_6_315)
           (= #x00000001 dst_reg_6_288)
           (= dst_reg_6_1 dst_reg_6_289)
           (= dst_reg_6_2 dst_reg_6_290)
           (= dst_reg_6_3 dst_reg_6_291)
           (= #x0000000000000000 dst_reg_6_292)
           (= #xffffffffffffffff dst_reg_6_293)
           (= #x8000000000000000 dst_reg_6_294)
           (= #x7fffffffffffffff dst_reg_6_295)
           (= #x0000000000000000 dst_reg_6_296)
           (= #xffffffffffffffff dst_reg_6_297)
           (= #x00000000 dst_reg_6_298)
           (= dst_reg_6_11 dst_reg_6_299)
           (= dst_reg_6_12 dst_reg_6_300)
           (= dst_reg_6_13 dst_reg_6_301))))
  (= dst_reg_6_288 dst_reg_6_316)
  (= dst_reg_6_289 dst_reg_6_317)
  (= dst_reg_6_290 dst_reg_6_318)
  (= dst_reg_6_291 dst_reg_6_319)
  (= dst_reg_6_292 dst_reg_6_320)
  (= dst_reg_6_293 dst_reg_6_321)
  (= dst_reg_6_294 dst_reg_6_322)
  (= dst_reg_6_295 dst_reg_6_323)
  (= dst_reg_6_296 dst_reg_6_324)
  (= dst_reg_6_297 dst_reg_6_325)
  (= dst_reg_6_298 dst_reg_6_326)
  (= dst_reg_6_299 dst_reg_6_327)
  (= dst_reg_6_300 dst_reg_6_328)
  (= dst_reg_6_301 dst_reg_6_329)
  (= src_reg_6_302 src_reg_6_330)
  (= src_reg_6_303 src_reg_6_331)
  (= src_reg_6_304 src_reg_6_332)
  (= src_reg_6_305 src_reg_6_333)
  (= src_reg_6_306 src_reg_6_334)
  (= src_reg_6_307 src_reg_6_335)
  (= src_reg_6_308 src_reg_6_336)
  (= src_reg_6_309 src_reg_6_337)
  (= src_reg_6_310 src_reg_6_338)
  (= src_reg_6_311 src_reg_6_339)
  (= src_reg_6_312 src_reg_6_340)
  (= src_reg_6_313 src_reg_6_341)
  (= src_reg_6_314 src_reg_6_342)
  (= src_reg_6_315 src_reg_6_343)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (=> (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
        (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
    (and (= #x00000001 src_reg_6_302)
         (= src_reg_6_15 src_reg_6_303)
         (= src_reg_6_16 src_reg_6_304)
         (= src_reg_6_17 src_reg_6_305)
         (= src_reg_6_18 src_reg_6_306)
         (= src_reg_6_19 src_reg_6_307)
         (= src_reg_6_20 src_reg_6_308)
         (= src_reg_6_21 src_reg_6_309)
         (= src_reg_6_22 src_reg_6_310)
         (= src_reg_6_23 src_reg_6_311)
         (= src_reg_6_24 src_reg_6_312)
         (= src_reg_6_25 src_reg_6_313)
         (= src_reg_6_26 src_reg_6_314)
         (= src_reg_6_27 src_reg_6_315)
         (= #x00000001 dst_reg_6_288)
         (= dst_reg_6_1 dst_reg_6_289)
         (= dst_reg_6_2 dst_reg_6_290)
         (= dst_reg_6_3 dst_reg_6_291)
         (= #x0000000000000000 dst_reg_6_292)
         (= #xffffffffffffffff dst_reg_6_293)
         (= #x8000000000000000 dst_reg_6_294)
         (= #x7fffffffffffffff dst_reg_6_295)
         (= #x0000000000000000 dst_reg_6_296)
         (= #xffffffffffffffff dst_reg_6_297)
         (= #x00000000 dst_reg_6_298)
         (= dst_reg_6_11 dst_reg_6_299)
         (= dst_reg_6_12 dst_reg_6_300)
         (= dst_reg_6_13 dst_reg_6_301)))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_6_218 #b0) a!5)
          (and (= cmp.i.i.i.i_6_218 #b1) a!5))
      (and (= src_reg_6_200 src_reg_6_302)
           (= src_reg_6_201 src_reg_6_303)
           (= src_reg_6_202 src_reg_6_304)
           (= src_reg_6_203 src_reg_6_305)
           (= src_reg_6_204 src_reg_6_306)
           (= src_reg_6_205 src_reg_6_307)
           (= src_reg_6_206 src_reg_6_308)
           (= src_reg_6_207 src_reg_6_309)
           (= src_reg_6_208 src_reg_6_310)
           (= src_reg_6_209 src_reg_6_311)
           (= src_reg_6_210 src_reg_6_312)
           (= src_reg_6_211 src_reg_6_313)
           (= src_reg_6_212 src_reg_6_314)
           (= src_reg_6_213 src_reg_6_315)
           (= dst_reg_6_186 dst_reg_6_288)
           (= dst_reg_6_187 dst_reg_6_289)
           (= dst_reg_6_188 dst_reg_6_290)
           (= dst_reg_6_189 dst_reg_6_291)
           (= and4.i.i.i_6_287 dst_reg_6_292)
           (= and.i1.i.i_6_284 dst_reg_6_293)
           (= dst_reg_6_192 dst_reg_6_294)
           (= dst_reg_6_193 dst_reg_6_295)
           (= dst_reg_6_194 dst_reg_6_296)
           (= dst_reg_6_195 dst_reg_6_297)
           (= dst_reg_6_196 dst_reg_6_298)
           (= dst_reg_6_197 dst_reg_6_299)
           (= dst_reg_6_198 dst_reg_6_300)
           (= dst_reg_6_199 dst_reg_6_301)))))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b0)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_302)
           (= src_reg_6_15 src_reg_6_303)
           (= src_reg_6_16 src_reg_6_304)
           (= src_reg_6_17 src_reg_6_305)
           (= src_reg_6_18 src_reg_6_306)
           (= src_reg_6_19 src_reg_6_307)
           (= src_reg_6_20 src_reg_6_308)
           (= src_reg_6_21 src_reg_6_309)
           (= src_reg_6_22 src_reg_6_310)
           (= src_reg_6_23 src_reg_6_311)
           (= src_reg_6_24 src_reg_6_312)
           (= src_reg_6_25 src_reg_6_313)
           (= src_reg_6_26 src_reg_6_314)
           (= src_reg_6_27 src_reg_6_315)
           (= #x00000001 dst_reg_6_288)
           (= dst_reg_6_1 dst_reg_6_289)
           (= dst_reg_6_2 dst_reg_6_290)
           (= dst_reg_6_3 dst_reg_6_291)
           (= #x0000000000000000 dst_reg_6_292)
           (= #xffffffffffffffff dst_reg_6_293)
           (= #x8000000000000000 dst_reg_6_294)
           (= #x7fffffffffffffff dst_reg_6_295)
           (= #x0000000000000000 dst_reg_6_296)
           (= #xffffffffffffffff dst_reg_6_297)
           (= #x00000000 dst_reg_6_298)
           (= dst_reg_6_11 dst_reg_6_299)
           (= dst_reg_6_12 dst_reg_6_300)
           (= dst_reg_6_13 dst_reg_6_301))))
  (= dst_reg_6_288 dst_reg_6_316)
  (= dst_reg_6_289 dst_reg_6_317)
  (= dst_reg_6_290 dst_reg_6_318)
  (= dst_reg_6_291 dst_reg_6_319)
  (= dst_reg_6_292 dst_reg_6_320)
  (= dst_reg_6_293 dst_reg_6_321)
  (= dst_reg_6_294 dst_reg_6_322)
  (= dst_reg_6_295 dst_reg_6_323)
  (= dst_reg_6_296 dst_reg_6_324)
  (= dst_reg_6_297 dst_reg_6_325)
  (= dst_reg_6_298 dst_reg_6_326)
  (= dst_reg_6_299 dst_reg_6_327)
  (= dst_reg_6_300 dst_reg_6_328)
  (= dst_reg_6_301 dst_reg_6_329)
  (= src_reg_6_302 src_reg_6_330)
  (= src_reg_6_303 src_reg_6_331)
  (= src_reg_6_304 src_reg_6_332)
  (= src_reg_6_305 src_reg_6_333)
  (= src_reg_6_306 src_reg_6_334)
  (= src_reg_6_307 src_reg_6_335)
  (= src_reg_6_308 src_reg_6_336)
  (= src_reg_6_309 src_reg_6_337)
  (= src_reg_6_310 src_reg_6_338)
  (= src_reg_6_311 src_reg_6_339)
  (= src_reg_6_312 src_reg_6_340)
  (= src_reg_6_313 src_reg_6_341)
  (= src_reg_6_314 src_reg_6_342)
  (= src_reg_6_315 src_reg_6_343)
BasicBlock: __reg_bound_offset.exit.i, Size:17
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
    (= retval.0.i.i.i.i_6_267 phi.bo_6_264))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
    (= retval.0.i.i.i.i_6_267 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_6_267 #x0000003f)
     (= cmp.i.i.i_6_270 #b1)
     (= cmp.i.i.i_6_270 #b0))
  (= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))
  (= notmask.i.i.i_6_273 (bvshl #xffffffffffffffff sh_prom.i.i.i_6_271))
  (= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 #xffffffffffffffff))
  (= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.0.0.i.i.i_6_278 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))
  (ite (= cmp.i.i.i_6_270 #b1)
     (= retval.sroa.3.0.i.i.i_6_280 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))
  (= dst_reg_6_139 i9.i.i_6_281)
  (= dst_reg_6_140 i11.i.i_6_282)
  (= or.i.i.i_6_283 (bvor retval.sroa.0.0.i.i.i_6_278 i9.i.i_6_281))
  (= and.i1.i.i_6_284 (bvand retval.sroa.3.0.i.i.i_6_280 i11.i.i_6_282))
  (= neg.i.i.i_6_286 (bvxor and.i1.i.i_6_284 #xffffffffffffffff))
  (= and4.i.i.i_6_287 (bvand or.i.i.i_6_283 neg.i.i.i_6_286))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_6_265
     (and (= cmp.i.i.i.i_6_218 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266
     (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_6_194 i.i333.i_6_214)
  (= dst_reg_6_195 i5.i.i_6_215)
  (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))
  (ite (= xor.i.i.i_6_216 #x0000000000000000)
     (= cmp.i.i.i.i_6_218 #b1)
     (= cmp.i.i.i.i_6_218 #b0))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
          (and (= cmp.i323.i_6_165 #b1) a!2))
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= cond.i327.i_6_171 dst_reg_6_192)
           (= cond12.i.i_6_175 dst_reg_6_193)
           (= cond.i327.i_6_171 dst_reg_6_194)
           (= cond12.i.i_6_175 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp16.i.i_6_178 #b1)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= i38.i.i_6_179 dst_reg_6_192)
           (= cond27.i.i_6_181 dst_reg_6_193)
           (= dst_reg_6_143 dst_reg_6_194)
           (= cond27.i.i_6_181 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp31.i330.i_6_183 #b0)
           (= cmp16.i.i_6_178 #b0)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= dst_reg_6_141 dst_reg_6_192)
           (= dst_reg_6_142 dst_reg_6_193)
           (= dst_reg_6_143 dst_reg_6_194)
           (= dst_reg_6_144 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (=> (and (= cmp31.i330.i_6_183 #b1)
           (= cmp16.i.i_6_178 #b0)
           (= cmp1.i325.i_6_168 #b0)
           (= cmp.i323.i_6_165 #b0)
           a!2)
      (and (= src_reg_6_149 src_reg_6_200)
           (= src_reg_6_150 src_reg_6_201)
           (= src_reg_6_151 src_reg_6_202)
           (= src_reg_6_152 src_reg_6_203)
           (= src_reg_6_153 src_reg_6_204)
           (= src_reg_6_154 src_reg_6_205)
           (= src_reg_6_155 src_reg_6_206)
           (= src_reg_6_156 src_reg_6_207)
           (= src_reg_6_157 src_reg_6_208)
           (= src_reg_6_158 src_reg_6_209)
           (= src_reg_6_159 src_reg_6_210)
           (= src_reg_6_160 src_reg_6_211)
           (= src_reg_6_161 src_reg_6_212)
           (= src_reg_6_162 src_reg_6_213)
           (= dst_reg_6_135 dst_reg_6_186)
           (= dst_reg_6_136 dst_reg_6_187)
           (= dst_reg_6_137 dst_reg_6_188)
           (= dst_reg_6_138 dst_reg_6_189)
           (= dst_reg_6_139 dst_reg_6_190)
           (= dst_reg_6_140 dst_reg_6_191)
           (= cond40.i.i_6_185 dst_reg_6_192)
           (= i37.i.i_6_176 dst_reg_6_193)
           (= cond40.i.i_6_185 dst_reg_6_194)
           (= dst_reg_6_144 dst_reg_6_195)
           (= dst_reg_6_145 dst_reg_6_196)
           (= dst_reg_6_146 dst_reg_6_197)
           (= dst_reg_6_147 dst_reg_6_198)
           (= dst_reg_6_148 dst_reg_6_199)))))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_6_163 i38.i.i_6_179)
     (= cmp36.i.i_6_184 #b1)
     (= cmp36.i.i_6_184 #b0))
  (ite (= cmp36.i.i_6_184 #b1)
     (= cond40.i.i_6_185 i.i322.i_6_163)
     (= cond40.i.i_6_185 i38.i.i_6_179))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_6_216 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= tobool.not.i.i.i.i.i_6_220 #b0))
  (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222)
     (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))
  (ite (= tobool.not.i.i.i.i.i_6_220 #b1)
     (= spec.select17.i.i.i.i.i_6_226 #x0000001f)
     (= spec.select17.i.i.i.i.i_6_226 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_6_223 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= tobool2.not.i.i.i.i.i_6_228 #b0))
  (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 #xfffffff0))
  (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232)
     (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))
  (ite (= tobool2.not.i.i.i.i.i_6_228 #b1)
     (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230)
     (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))
  (ite (bvult word.addr.1.i.i.i.i.i_6_233 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= tobool8.not.i.i.i.i.i_6_236 #b0))
  (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 #xfffffff8))
  (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240)
     (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))
  (ite (= tobool8.not.i.i.i.i.i_6_236 #b1)
     (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238)
     (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))
  (ite (bvult word.addr.2.i.i.i.i.i_6_241 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= tobool14.not.i.i.i.i.i_6_244 #b0))
  (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 #xfffffffc))
  (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248)
     (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))
  (ite (= tobool14.not.i.i.i.i.i_6_244 #b1)
     (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246)
     (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))
  (ite (bvult word.addr.3.i.i.i.i.i_6_249 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= tobool20.not.i.i.i.i.i_6_252 #b0))
  (= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 #x000000fe))
  (= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256)
     (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))
  (ite (= tobool20.not.i.i.i.i.i_6_252 #b1)
     (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254)
     (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))
  (= word.addr.4.lobit.i.i.i.i.i.neg_6_260
   (bvlshr word.addr.4.i.i.i.i.i_6_257 #x000000000000003f))
  (= i.i.i.i.i.i.neg_6_261
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))
  (= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))
  (= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_6_179 #x0000000000000000)
     (= cmp31.i330.i_6_183 #b1)
     (= cmp31.i330.i_6_183 #b0))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_6_144 i37.i.i_6_176)
  (ite (bvsgt i37.i.i_6_176 #xffffffffffffffff)
     (= cmp16.i.i_6_178 #b1)
     (= cmp16.i.i_6_178 #b0))
  (= dst_reg_6_143 i38.i.i_6_179)
BasicBlock: entry, Size:35
  (= dst_reg_6_0 dst_reg_6_0)
  (= dst_reg_6_1 dst_reg_6_1)
  (= dst_reg_6_2 dst_reg_6_2)
  (= dst_reg_6_3 dst_reg_6_3)
  (= dst_reg_6_4 dst_reg_6_4)
  (= dst_reg_6_5 dst_reg_6_5)
  (= dst_reg_6_6 dst_reg_6_6)
  (= dst_reg_6_7 dst_reg_6_7)
  (= dst_reg_6_8 dst_reg_6_8)
  (= dst_reg_6_9 dst_reg_6_9)
  (= dst_reg_6_10 dst_reg_6_10)
  (= dst_reg_6_11 dst_reg_6_11)
  (= dst_reg_6_12 dst_reg_6_12)
  (= dst_reg_6_13 dst_reg_6_13)
  (= src_reg_6_14 src_reg_6_14)
  (= src_reg_6_15 src_reg_6_15)
  (= src_reg_6_16 src_reg_6_16)
  (= src_reg_6_17 src_reg_6_17)
  (= src_reg_6_18 src_reg_6_18)
  (= src_reg_6_19 src_reg_6_19)
  (= src_reg_6_20 src_reg_6_20)
  (= src_reg_6_21 src_reg_6_21)
  (= src_reg_6_22 src_reg_6_22)
  (= src_reg_6_23 src_reg_6_23)
  (= src_reg_6_24 src_reg_6_24)
  (= src_reg_6_25 src_reg_6_25)
  (= src_reg_6_26 src_reg_6_26)
  (= src_reg_6_27 src_reg_6_27)
  (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)
  (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)
  (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)
  (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)
  (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)
  (ite (= src_reg1.sroa.10.0.copyload_6_34 #x0000000000000000)
     (= tobool.not.i.i_6_36 #b1)
     (= tobool.not.i.i_6_36 #b0))
  (= dst_reg_6_5 i215.i_6_37)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end309.i, Size:4
  (= dst_reg_6_141 i.i322.i_6_163)
  (ite (bvsgt i.i322.i_6_163 #xffffffffffffffff)
     (= cmp.i323.i_6_165 #b1)
     (= cmp.i323.i_6_165 #b0))
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1))
      (and (= src_reg_6_100 src_reg_6_149)
           (= src_reg_6_101 src_reg_6_150)
           (= src_reg_6_102 src_reg_6_151)
           (= src_reg_6_103 src_reg_6_152)
           (= src_reg_6_104 src_reg_6_153)
           (= src_reg_6_105 src_reg_6_154)
           (= src_reg_6_106 src_reg_6_155)
           (= src_reg_6_107 src_reg_6_156)
           (= src_reg_6_108 src_reg_6_157)
           (= src_reg_6_109 src_reg_6_158)
           (= src_reg_6_110 src_reg_6_159)
           (= src_reg_6_111 src_reg_6_160)
           (= src_reg_6_112 src_reg_6_161)
           (= src_reg_6_113 src_reg_6_162)
           (= dst_reg_6_86 dst_reg_6_135)
           (= dst_reg_6_87 dst_reg_6_136)
           (= dst_reg_6_88 dst_reg_6_137)
           (= dst_reg_6_89 dst_reg_6_138)
           (= shl.i.i_6_121 dst_reg_6_139)
           (= shl5.i.i_6_122 dst_reg_6_140)
           (= or.i200.i_6_125 dst_reg_6_141)
           (= or8.i206.i_6_128 dst_reg_6_142)
           (= cond23.i212.i_6_131 dst_reg_6_143)
           (= cond35.i217.i_6_134 dst_reg_6_144)
           (= dst_reg_6_96 dst_reg_6_145)
           (= dst_reg_6_97 dst_reg_6_146)
           (= dst_reg_6_98 dst_reg_6_147)
           (= dst_reg_6_99 dst_reg_6_148))))
  (let ((a!1 (and (= cmp248.not.i_6_68 #b0)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_149)
           (= src_reg_6_15 src_reg_6_150)
           (= src_reg_6_16 src_reg_6_151)
           (= src_reg_6_17 src_reg_6_152)
           (= src_reg_6_18 src_reg_6_153)
           (= src_reg_6_19 src_reg_6_154)
           (= src_reg_6_20 src_reg_6_155)
           (= src_reg_6_21 src_reg_6_156)
           (= src_reg_6_22 src_reg_6_157)
           (= src_reg_6_23 src_reg_6_158)
           (= src_reg_6_24 src_reg_6_159)
           (= src_reg_6_25 src_reg_6_160)
           (= src_reg_6_26 src_reg_6_161)
           (= src_reg_6_27 src_reg_6_162)
           (= #x00000001 dst_reg_6_135)
           (= dst_reg_6_1 dst_reg_6_136)
           (= dst_reg_6_2 dst_reg_6_137)
           (= dst_reg_6_3 dst_reg_6_138)
           (= #x0000000000000000 dst_reg_6_139)
           (= #xffffffffffffffff dst_reg_6_140)
           (= #x8000000000000000 dst_reg_6_141)
           (= #x7fffffffffffffff dst_reg_6_142)
           (= #x0000000000000000 dst_reg_6_143)
           (= #xffffffffffffffff dst_reg_6_144)
           (= dst_reg_6_10 dst_reg_6_145)
           (= dst_reg_6_11 dst_reg_6_146)
           (= dst_reg_6_12 dst_reg_6_147)
           (= dst_reg_6_13 dst_reg_6_148))))
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult src_reg1.sroa.22.0.copyload_6_33 #x0000000000000040)
     (= cmp248.not.i_6_68 #b1)
     (= cmp248.not.i_6_68 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_6_142 i33.i.i_6_166)
  (ite (bvslt i33.i.i_6_166 #x0000000000000000)
     (= cmp1.i325.i_6_168 #b1)
     (= cmp1.i325.i_6_168 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.old.i_6_47 #b1)
     (= cmp21.old.i_6_47 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.old.i_6_48 #b1)
     (= cmp24.old.i_6_48 #b0))
  (ite (= cmp21.old.i_6_47 #b1)
     (= or.cond200.i_6_50 #b1)
     (= or.cond200.i_6_50 cmp24.old.i_6_48))
BasicBlock: if.else261.i, Size:3
  (= dst_reg_6_8 i262.i_6_83)
  (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))
  (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_6_143 i34.i.i_6_169)
  (ite (bvugt i.i322.i_6_163 i34.i.i_6_169)
     (= cmp3.i.i_6_170 #b1)
     (= cmp3.i.i_6_170 #b0))
  (ite (= cmp3.i.i_6_170 #b1)
     (= cond.i327.i_6_171 i.i322.i_6_163)
     (= cond.i327.i_6_171 i34.i.i_6_169))
  (= dst_reg_6_142 i35.i.i_6_172)
  (= dst_reg_6_144 i36.i.i_6_173)
  (ite (bvult i35.i.i_6_172 i36.i.i_6_173)
     (= cmp8.i.i_6_174 #b1)
     (= cmp8.i.i_6_174 #b0))
  (ite (= cmp8.i.i_6_174 #b1)
     (= cond12.i.i_6_175 i35.i.i_6_172)
     (= cond12.i.i_6_175 i36.i.i_6_173))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end251.i, Size:3
  (= dst_reg_6_9 i261.i_6_78)
  (= shl.i_6_80 (bvlshr #x8000000000000000 src_reg1.sroa.22.0.copyload_6_33))
  (ite (bvugt i261.i_6_78 shl.i_6_80) (= cmp256.i_6_81 #b1) (= cmp256.i_6_81 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_6_166 i37.i.i_6_176)
     (= cmp23.i.i_6_180 #b1)
     (= cmp23.i.i_6_180 #b0))
  (ite (= cmp23.i.i_6_180 #b1)
     (= cond27.i.i_6_181 i33.i.i_6_166)
     (= cond27.i.i_6_181 i37.i.i_6_176))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_6_30
               src_reg1.sroa.15.0.copyload_6_31)
     (= cmp16.not.i_6_38 #b1)
     (= cmp16.not.i_6_38 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_6_32
               src_reg1.sroa.22.0.copyload_6_33)
     (= cmp18.not.i_6_39 #b1)
     (= cmp18.not.i_6_39 #b0))
  (ite (= cmp16.not.i_6_38 #b1)
     (= or.cond197.i_6_41 #b1)
     (= or.cond197.i_6_41 cmp18.not.i_6_39))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)
     (= cmp21.i_6_42 #b1)
     (= cmp21.i_6_42 #b0))
  (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))
  (ite (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)
     (= cmp24.i_6_44 #b1)
     (= cmp24.i_6_44 #b0))
  (ite (= or.cond198.i_6_43 #b1)
     (= or.cond199.i_6_46 #b1)
     (= or.cond199.i_6_46 cmp24.i_6_44))
BasicBlock: if.end266.i, Size:20
  (=> if.else261.i_if.end266.i_6_114 (= storemerge.i_6_116 shl265.i_6_85))
  (=> if.then258.i_if.end266.i_6_115 (= storemerge.i_6_116 #xffffffffffffffff))
  (= dst_reg_6_4 i263.i_6_118)
  (= sh_prom.i.i_6_120
   (bvand src_reg1.sroa.17.0.copyload_6_32 #x00000000000000ff))
  (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))
  (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))
  (= and.i199.i_6_124 (bvand shl5.i.i_6_122 #x8000000000000000))
  (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))
  (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 #x7fffffffffffffff))
  (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))
  (= dst_reg_6_94 i26.i210.i_6_129)
  (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121)
     (= cmp19.i211.i_6_130 #b1)
     (= cmp19.i211.i_6_130 #b0))
  (ite (= cmp19.i211.i_6_130 #b1)
     (= cond23.i212.i_6_131 i26.i210.i_6_129)
     (= cond23.i212.i_6_131 shl.i.i_6_121))
  (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))
  (ite (bvult storemerge.i_6_116 or29.i215.i_6_132)
     (= cmp31.i216.i_6_133 #b1)
     (= cmp31.i216.i_6_133 #b0))
  (ite (= cmp31.i216.i_6_133 #b1)
     (= cond35.i217.i_6_134 storemerge.i_6_116)
     (= cond35.i217.i_6_134 or29.i215.i_6_132))
  (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= #x0000000000000000 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
  (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_6_100)
           (= src_reg_6_15 src_reg_6_101)
           (= src_reg_6_16 src_reg_6_102)
           (= src_reg_6_17 src_reg_6_103)
           (= src_reg_6_18 src_reg_6_104)
           (= src_reg_6_19 src_reg_6_105)
           (= src_reg_6_20 src_reg_6_106)
           (= src_reg_6_21 src_reg_6_107)
           (= src_reg_6_22 src_reg_6_108)
           (= src_reg_6_23 src_reg_6_109)
           (= src_reg_6_24 src_reg_6_110)
           (= src_reg_6_25 src_reg_6_111)
           (= src_reg_6_26 src_reg_6_112)
           (= src_reg_6_27 src_reg_6_113)
           (= #x00000001 dst_reg_6_86)
           (= dst_reg_6_1 dst_reg_6_87)
           (= dst_reg_6_2 dst_reg_6_88)
           (= dst_reg_6_3 dst_reg_6_89)
           (= dst_reg_6_4 dst_reg_6_90)
           (= dst_reg_6_5 dst_reg_6_91)
           (= #x8000000000000000 dst_reg_6_92)
           (= #x7fffffffffffffff dst_reg_6_93)
           (= shl263.i_6_84 dst_reg_6_94)
           (= dst_reg_6_9 dst_reg_6_95)
           (= dst_reg_6_10 dst_reg_6_96)
           (= dst_reg_6_11 dst_reg_6_97)
           (= dst_reg_6_12 dst_reg_6_98)
           (= dst_reg_6_13 dst_reg_6_99))))
  (let ((a!1 (and (= cmp256.i_6_81 #b0)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.else261.i_if.end266.i_6_114 a!1))
  (let ((a!1 (and (= cmp256.i_6_81 #b1)
                (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (= if.then258.i_if.end266.i_6_115 a!1))

[encodeFunctionBody] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
  (or (and (= cmp31.i330.i_6_183 #b1) a!3)
      (and (= cmp31.i330.i_6_183 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_6_168 #b1) (and (= cmp.i323.i_6_165 #b0) a!2))
      (and (= cmp.i323.i_6_165 #b1) a!2)))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
sw.bb247.i
  (and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
if.then258.i
  (and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
lor.lhs.false20.i
  (= tobool.not.i.i_6_36 #b0)
if.else261.i
  (and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
               (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1)))))
(let ((a!2 (and (= cmp256.i_6_81 #b0)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1))))
      (a!3 (and (= cmp256.i_6_81 #b1)
                (and (= cmp248.not.i_6_68 #b1)
                     (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_6_68 #b0)
                    (and (= tobool.not.i.i_6_36 #b1) a!1)))))
(let ((a!5 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4))))
      (a!6 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!4)))))
(let ((a!7 (or (and (= cmp31.i330.i_6_183 #b1) a!5)
               (and (= cmp31.i330.i_6_183 #b0) a!5)
               a!6
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!4))
               (and (= cmp.i323.i_6_165 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!7)
      (and (= cmp.i.i.i.i_6_218 #b1) a!7)
      (and (= tobool.not.i.i_6_36 #b0) a!1)
      (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
      (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))))))))
if.end251.i
  (and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then41.i
  (and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
      (and (= cmp248.not.i_6_68 #b0) a!1)))
if.then250.i
  (and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
land.lhs.true.i
  (= tobool.not.i.i_6_36 #b1)
if.end266.i
  (let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
[encodeFunctionBody] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b1) a!5)))))
<if.then250.i, if.end309.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.end27.i, sw.bb247.i> :(and (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<sw.bb247.i, if.end251.i> :(and (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<sw.bb247.i, if.then250.i> :(and (= cmp248.not.i_6_68 #b0)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.end251.i, if.else261.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b0) a!2)))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_6_218 #b0) a!5) (and (= cmp.i.i.i.i_6_218 #b1) a!5))))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp.i323.i_6_165 #b1) a!2)))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_6_36 #b0)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b0)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_6_50 #b1) (= tobool.not.i.i_6_36 #b0))
    (and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_6_36 #b1)
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b1)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
(let ((a!3 (and (= cmp16.i.i_6_178 #b0)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_6_178 #b1)
                (and (= cmp1.i325.i_6_168 #b0)
                     (and (= cmp.i323.i_6_165 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_6_183 #b1) a!3)
               (and (= cmp31.i330.i_6_183 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_6_168 #b1)
                    (and (= cmp.i323.i_6_165 #b0) a!2))
               (and (= cmp.i323.i_6_165 #b1) a!2))))
  (and (= cmp.i.i.i.i_6_218 #b0) a!5)))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_6_36 #b0)
<if.end251.i, if.then258.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<if.else261.i, if.end266.i> :(and (= cmp256.i_6_81 #b0)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_6_46 #b1) (= tobool.not.i.i_6_36 #b1))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then258.i, if.end266.i> :(and (= cmp256.i_6_81 #b1)
     (= cmp248.not.i_6_68 #b1)
     (= tobool.not.i.i_6_36 #b1)
     (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
         (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp1.i325.i_6_168 #b0) (= cmp.i323.i_6_165 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (or (and (= cmp1.i325.i_6_168 #b1) (= cmp.i323.i_6_165 #b0) a!2)
      (and (= cmp.i323.i_6_165 #b1) a!2))))
<if.end266.i, if.end309.i> :(let ((a!1 (and (= cmp248.not.i_6_68 #b1)
                (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
  (or (and (= cmp256.i_6_81 #b0) a!1) (and (= cmp256.i_6_81 #b1) a!1)))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_6_36 #b1)
                (or (and (= or.cond200.i_6_50 #b0) (= tobool.not.i.i_6_36 #b0))
                    (and (= or.cond199.i_6_46 #b0) (= tobool.not.i.i_6_36 #b1))))))
(let ((a!2 (or (and (= cmp256.i_6_81 #b0) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp256.i_6_81 #b1) (and (= cmp248.not.i_6_68 #b1) a!1))
               (and (= cmp248.not.i_6_68 #b0) a!1))))
  (and (= cmp31.i330.i_6_183 #b1)
       (= cmp16.i.i_6_178 #b0)
       (= cmp1.i325.i_6_168 #b0)
       (= cmp.i323.i_6_165 #b0)
       a!2)))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
50 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,48},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_6_302 ] [ ] [ src_reg_6_303 ] [ src_reg_6_304 ] [ src_reg_6_305 ] [ [ src_reg_6_306 ] [ src_reg_6_307 ] ] [ src_reg_6_308 ] [ src_reg_6_309 ] [ src_reg_6_310 ] [ src_reg_6_311 ] [ ] [ src_reg_6_312 ] [ src_reg_6_313 ] [ src_reg_6_314 ] [ src_reg_6_315 ] ] 
- dst_reg: [ [ dst_reg_6_288 ] [ ] [ dst_reg_6_289 ] [ dst_reg_6_290 ] [ dst_reg_6_291 ] [ [ dst_reg_6_292 ] [ dst_reg_6_293 ] ] [ dst_reg_6_294 ] [ dst_reg_6_295 ] [ dst_reg_6_296 ] [ dst_reg_6_297 ] [ ] [ dst_reg_6_298 ] [ dst_reg_6_299 ] [ dst_reg_6_300 ] [ dst_reg_6_301 ] ] 
}
49 = MemoryPhi({if.then.i329.i,40},{if.then17.i.i,43},{if.else.i331.i,52},{if.then32.i.i,46}) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ dst_reg_6_190 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
46 = MemoryDef(45) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ i37.i.i_6_176 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond40.i.i_6_185 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
44 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond40.i.i_6_185 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
43 = MemoryDef(42) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ cond27.i.i_6_181 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
42 = MemoryDef(41) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ cond27.i.i_6_181 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
39 = MemoryDef(38) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ cond12.i.i_6_175 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ cond.i327.i_6_171 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
37 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ cond.i327.i_6_171 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
52 = MemoryPhi({if.end266.i,36},{if.then250.i,25}) : {
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ dst_reg_6_141 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ cond35.i217.i_6_134 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ cond23.i212.i_6_131 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ and.i1.i.i_6_284 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
}
30 = MemoryDef(51) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
51 = MemoryPhi({if.then258.i,28},{if.else261.i,29}) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ dst_reg_6_90 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ dst_reg_6_95 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
41 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_6_135 ] [ ] [ dst_reg_6_136 ] [ dst_reg_6_137 ] [ dst_reg_6_138 ] [ [ dst_reg_6_139 ] [ dst_reg_6_140 ] ] [ i38.i.i_6_179 ] [ dst_reg_6_142 ] [ dst_reg_6_143 ] [ dst_reg_6_144 ] [ ] [ dst_reg_6_145 ] [ dst_reg_6_146 ] [ dst_reg_6_147 ] [ dst_reg_6_148 ] ] 
- src_reg: [ [ src_reg_6_149 ] [ ] [ src_reg_6_150 ] [ src_reg_6_151 ] [ src_reg_6_152 ] [ [ src_reg_6_153 ] [ src_reg_6_154 ] ] [ src_reg_6_155 ] [ src_reg_6_156 ] [ src_reg_6_157 ] [ src_reg_6_158 ] [ ] [ src_reg_6_159 ] [ src_reg_6_160 ] [ src_reg_6_161 ] [ src_reg_6_162 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
31 = MemoryDef(30) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ dst_reg_6_91 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ dst_reg_6_92 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
47 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_6_186 ] [ ] [ dst_reg_6_187 ] [ dst_reg_6_188 ] [ dst_reg_6_189 ] [ [ and4.i.i.i_6_287 ] [ dst_reg_6_191 ] ] [ dst_reg_6_192 ] [ dst_reg_6_193 ] [ dst_reg_6_194 ] [ dst_reg_6_195 ] [ ] [ dst_reg_6_196 ] [ dst_reg_6_197 ] [ dst_reg_6_198 ] [ dst_reg_6_199 ] ] 
- src_reg: [ [ src_reg_6_200 ] [ ] [ src_reg_6_201 ] [ src_reg_6_202 ] [ src_reg_6_203 ] [ [ src_reg_6_204 ] [ src_reg_6_205 ] ] [ src_reg_6_206 ] [ src_reg_6_207 ] [ src_reg_6_208 ] [ src_reg_6_209 ] [ ] [ src_reg_6_210 ] [ src_reg_6_211 ] [ src_reg_6_212 ] [ src_reg_6_213 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ dst_reg_6_93 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
}
29 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_6_84 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
28 = MemoryDef(27) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_6_86 ] [ ] [ dst_reg_6_87 ] [ dst_reg_6_88 ] [ dst_reg_6_89 ] [ [ shl.i.i_6_121 ] [ shl5.i.i_6_122 ] ] [ or.i200.i_6_125 ] [ or8.i206.i_6_128 ] [ dst_reg_6_94 ] [ storemerge.i_6_116 ] [ ] [ dst_reg_6_96 ] [ dst_reg_6_97 ] [ dst_reg_6_98 ] [ dst_reg_6_99 ] ] 
- src_reg: [ [ src_reg_6_100 ] [ ] [ src_reg_6_101 ] [ src_reg_6_102 ] [ src_reg_6_103 ] [ [ src_reg_6_104 ] [ src_reg_6_105 ] ] [ src_reg_6_106 ] [ src_reg_6_107 ] [ src_reg_6_108 ] [ src_reg_6_109 ] [ ] [ src_reg_6_110 ] [ src_reg_6_111 ] [ src_reg_6_112 ] [ src_reg_6_113 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
27 = MemoryDef(26) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_6_9 ] [ ] [ #x00000000 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}
26 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ #x8000000000000000 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_6_0 ] [ ] [ dst_reg_6_1 ] [ dst_reg_6_2 ] [ dst_reg_6_3 ] [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] [ dst_reg_6_6 ] [ dst_reg_6_7 ] [ dst_reg_6_8 ] [ dst_reg_6_9 ] [ ] [ dst_reg_6_10 ] [ dst_reg_6_11 ] [ dst_reg_6_12 ] [ dst_reg_6_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_6_4 ] [ dst_reg_6_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_4",
	"dst_reg_6_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8",
	"dst_reg_6_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8",
	"dst_reg_6_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8",
	"dst_reg_6_9",
	"",
	"",
	"dst_reg_6_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8",
	"dst_reg_6_9",
	"",
	"",
	"dst_reg_6_10",
	"dst_reg_6_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_6_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_0",
	[
		""
	],
	"dst_reg_6_1",
	"dst_reg_6_2",
	"dst_reg_6_3",
	[
		"dst_reg_6_4",
		"dst_reg_6_5"
	],
	"dst_reg_6_6",
	"dst_reg_6_7",
	"dst_reg_6_8",
	"dst_reg_6_9",
	"",
	"",
	"dst_reg_6_10",
	"dst_reg_6_11",
	"dst_reg_6_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_6_14 ] [ ] [ src_reg_6_15 ] [ src_reg_6_16 ] [ src_reg_6_17 ] [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] [ src_reg_6_20 ] [ src_reg_6_21 ] [ src_reg_6_22 ] [ src_reg_6_23 ] [ ] [ src_reg_6_24 ] [ src_reg_6_25 ] [ src_reg_6_26 ] [ src_reg_6_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_6_18 ] [ src_reg_6_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_6_18 ] [ src_reg_6_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_18",
	"src_reg_6_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22",
	"src_reg_6_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22",
	"src_reg_6_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22",
	"src_reg_6_23",
	"",
	"",
	"src_reg_6_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22",
	"src_reg_6_23",
	"",
	"",
	"src_reg_6_24",
	"src_reg_6_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_6_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_14",
	[
		""
	],
	"src_reg_6_15",
	"src_reg_6_16",
	"src_reg_6_17",
	[
		"src_reg_6_18",
		"src_reg_6_19"
	],
	"src_reg_6_20",
	"src_reg_6_21",
	"src_reg_6_22",
	"src_reg_6_23",
	"",
	"",
	"src_reg_6_24",
	"src_reg_6_25",
	"src_reg_6_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_6_330 ] [ ] [ src_reg_6_331 ] [ src_reg_6_332 ] [ src_reg_6_333 ] [ [ src_reg_6_334 ] [ src_reg_6_335 ] ] [ src_reg_6_336 ] [ src_reg_6_337 ] [ src_reg_6_338 ] [ src_reg_6_339 ] [ ] [ src_reg_6_340 ] [ src_reg_6_341 ] [ src_reg_6_342 ] [ src_reg_6_343 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_6_330 ] [ ] [ src_reg_6_331 ] [ src_reg_6_332 ] [ src_reg_6_333 ] [ [ src_reg_6_334 ] [ src_reg_6_335 ] ] [ src_reg_6_336 ] [ src_reg_6_337 ] [ src_reg_6_338 ] [ src_reg_6_339 ] [ ] [ src_reg_6_340 ] [ src_reg_6_341 ] [ src_reg_6_342 ] [ src_reg_6_343 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_330 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_331 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_332 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_333 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_6_334 ] [ src_reg_6_335 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_6_334 ] [ src_reg_6_335 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_334 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_334"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_335 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_334",
	"src_reg_6_335"
]

[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_336 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_337 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_338 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_6_339 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338",
	"src_reg_6_339"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338",
	"src_reg_6_339",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_340 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338",
	"src_reg_6_339",
	"",
	"",
	"src_reg_6_340"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_6_341 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338",
	"src_reg_6_339",
	"",
	"",
	"src_reg_6_340",
	"src_reg_6_341"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_6_342 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_6_330",
	[
		""
	],
	"src_reg_6_331",
	"src_reg_6_332",
	"src_reg_6_333",
	[
		"src_reg_6_334",
		"src_reg_6_335"
	],
	"src_reg_6_336",
	"src_reg_6_337",
	"src_reg_6_338",
	"src_reg_6_339",
	"",
	"",
	"src_reg_6_340",
	"src_reg_6_341",
	"src_reg_6_342"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_6_316 ] [ ] [ dst_reg_6_317 ] [ dst_reg_6_318 ] [ dst_reg_6_319 ] [ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] [ dst_reg_6_322 ] [ dst_reg_6_323 ] [ dst_reg_6_324 ] [ dst_reg_6_325 ] [ ] [ dst_reg_6_326 ] [ dst_reg_6_327 ] [ dst_reg_6_328 ] [ dst_reg_6_329 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_6_316 ] [ ] [ dst_reg_6_317 ] [ dst_reg_6_318 ] [ dst_reg_6_319 ] [ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] [ dst_reg_6_322 ] [ dst_reg_6_323 ] [ dst_reg_6_324 ] [ dst_reg_6_325 ] [ ] [ dst_reg_6_326 ] [ dst_reg_6_327 ] [ dst_reg_6_328 ] [ dst_reg_6_329 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_316 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_317 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_318 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_319 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_6_320 ] [ dst_reg_6_321 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_320 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_320"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_321 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_320",
	"dst_reg_6_321"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_322 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_323 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_324 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_6_325 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324",
	"dst_reg_6_325"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324",
	"dst_reg_6_325",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_326 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324",
	"dst_reg_6_325",
	"",
	"",
	"dst_reg_6_326"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_6_327 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324",
	"dst_reg_6_325",
	"",
	"",
	"dst_reg_6_326",
	"dst_reg_6_327"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_6_328 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_6_316",
	[
		""
	],
	"dst_reg_6_317",
	"dst_reg_6_318",
	"dst_reg_6_319",
	[
		"dst_reg_6_320",
		"dst_reg_6_321"
	],
	"dst_reg_6_322",
	"dst_reg_6_323",
	"dst_reg_6_324",
	"dst_reg_6_325",
	"",
	"",
	"dst_reg_6_326",
	"dst_reg_6_327",
	"dst_reg_6_328"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_LSH
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_6_0",
      [ "" ],
      "dst_reg_6_1",
      "dst_reg_6_2",
      "dst_reg_6_3",
      [ "dst_reg_6_4", "dst_reg_6_5" ],
      "dst_reg_6_6",
      "dst_reg_6_7",
      "dst_reg_6_8",
      "dst_reg_6_9",
      "",
      "",
      "dst_reg_6_10",
      "dst_reg_6_11",
      "dst_reg_6_12"
   ],
   "src_reg" : [
      "src_reg_6_14",
      [ "" ],
      "src_reg_6_15",
      "src_reg_6_16",
      "src_reg_6_17",
      [ "src_reg_6_18", "src_reg_6_19" ],
      "src_reg_6_20",
      "src_reg_6_21",
      "src_reg_6_22",
      "src_reg_6_23",
      "",
      "",
      "src_reg_6_24",
      "src_reg_6_25",
      "src_reg_6_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_6_316",
      [ "" ],
      "dst_reg_6_317",
      "dst_reg_6_318",
      "dst_reg_6_319",
      [ "dst_reg_6_320", "dst_reg_6_321" ],
      "dst_reg_6_322",
      "dst_reg_6_323",
      "dst_reg_6_324",
      "dst_reg_6_325",
      "",
      "",
      "dst_reg_6_326",
      "dst_reg_6_327",
      "dst_reg_6_328"
   ],
   "src_reg" : [
      "src_reg_6_330",
      [ "" ],
      "src_reg_6_331",
      "src_reg_6_332",
      "src_reg_6_333",
      [ "src_reg_6_334", "src_reg_6_335" ],
      "src_reg_6_336",
      "src_reg_6_337",
      "src_reg_6_338",
      "src_reg_6_339",
      "",
      "",
      "src_reg_6_340",
      "src_reg_6_341",
      "src_reg_6_342"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun tobool.not.i.i_6_36 () (_ BitVec 1))
(declare-fun or.cond199.i_6_46 () (_ BitVec 1))
(declare-fun or.cond200.i_6_50 () (_ BitVec 1))
(declare-fun cmp248.not.i_6_68 () (_ BitVec 1))
(declare-fun cmp256.i_6_81 () (_ BitVec 1))
(declare-fun if.then258.i_if.end266.i_6_115 () Bool)
(declare-fun if.else261.i_if.end266.i_6_114 () Bool)
(declare-fun dst_reg_6_99 () (_ BitVec 8))
(declare-fun dst_reg_6_13 () (_ BitVec 8))
(declare-fun dst_reg_6_98 () (_ BitVec 32))
(declare-fun dst_reg_6_12 () (_ BitVec 32))
(declare-fun dst_reg_6_97 () (_ BitVec 32))
(declare-fun dst_reg_6_11 () (_ BitVec 32))
(declare-fun dst_reg_6_96 () (_ BitVec 32))
(declare-fun dst_reg_6_10 () (_ BitVec 32))
(declare-fun dst_reg_6_95 () (_ BitVec 64))
(declare-fun dst_reg_6_9 () (_ BitVec 64))
(declare-fun dst_reg_6_94 () (_ BitVec 64))
(declare-fun shl263.i_6_84 () (_ BitVec 64))
(declare-fun dst_reg_6_93 () (_ BitVec 64))
(declare-fun dst_reg_6_92 () (_ BitVec 64))
(declare-fun dst_reg_6_91 () (_ BitVec 64))
(declare-fun dst_reg_6_5 () (_ BitVec 64))
(declare-fun dst_reg_6_90 () (_ BitVec 64))
(declare-fun dst_reg_6_4 () (_ BitVec 64))
(declare-fun dst_reg_6_89 () (_ BitVec 32))
(declare-fun dst_reg_6_3 () (_ BitVec 32))
(declare-fun dst_reg_6_88 () (_ BitVec 32))
(declare-fun dst_reg_6_2 () (_ BitVec 32))
(declare-fun dst_reg_6_87 () (_ BitVec 32))
(declare-fun dst_reg_6_1 () (_ BitVec 32))
(declare-fun dst_reg_6_86 () (_ BitVec 32))
(declare-fun src_reg_6_113 () (_ BitVec 8))
(declare-fun src_reg_6_27 () (_ BitVec 8))
(declare-fun src_reg_6_112 () (_ BitVec 32))
(declare-fun src_reg_6_26 () (_ BitVec 32))
(declare-fun src_reg_6_111 () (_ BitVec 32))
(declare-fun src_reg_6_25 () (_ BitVec 32))
(declare-fun src_reg_6_110 () (_ BitVec 32))
(declare-fun src_reg_6_24 () (_ BitVec 32))
(declare-fun src_reg_6_109 () (_ BitVec 64))
(declare-fun src_reg_6_23 () (_ BitVec 64))
(declare-fun src_reg_6_108 () (_ BitVec 64))
(declare-fun src_reg_6_22 () (_ BitVec 64))
(declare-fun src_reg_6_107 () (_ BitVec 64))
(declare-fun src_reg_6_21 () (_ BitVec 64))
(declare-fun src_reg_6_106 () (_ BitVec 64))
(declare-fun src_reg_6_20 () (_ BitVec 64))
(declare-fun src_reg_6_105 () (_ BitVec 64))
(declare-fun src_reg_6_19 () (_ BitVec 64))
(declare-fun src_reg_6_104 () (_ BitVec 64))
(declare-fun src_reg_6_18 () (_ BitVec 64))
(declare-fun src_reg_6_103 () (_ BitVec 32))
(declare-fun src_reg_6_17 () (_ BitVec 32))
(declare-fun src_reg_6_102 () (_ BitVec 32))
(declare-fun src_reg_6_16 () (_ BitVec 32))
(declare-fun src_reg_6_101 () (_ BitVec 32))
(declare-fun src_reg_6_15 () (_ BitVec 32))
(declare-fun src_reg_6_100 () (_ BitVec 32))
(declare-fun or29.i215.i_6_132 () (_ BitVec 64))
(declare-fun cond35.i217.i_6_134 () (_ BitVec 64))
(declare-fun storemerge.i_6_116 () (_ BitVec 64))
(declare-fun cmp31.i216.i_6_133 () (_ BitVec 1))
(declare-fun shl5.i.i_6_122 () (_ BitVec 64))
(declare-fun shl.i.i_6_121 () (_ BitVec 64))
(declare-fun cond23.i212.i_6_131 () (_ BitVec 64))
(declare-fun i26.i210.i_6_129 () (_ BitVec 64))
(declare-fun cmp19.i211.i_6_130 () (_ BitVec 1))
(declare-fun and7.i205.i_6_127 () (_ BitVec 64))
(declare-fun or8.i206.i_6_128 () (_ BitVec 64))
(declare-fun and.i199.i_6_124 () (_ BitVec 64))
(declare-fun or.i200.i_6_125 () (_ BitVec 64))
(declare-fun sh_prom.i.i_6_120 () (_ BitVec 64))
(declare-fun i215.i_6_37 () (_ BitVec 64))
(declare-fun i263.i_6_118 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_6_32 () (_ BitVec 64))
(declare-fun shl265.i_6_85 () (_ BitVec 64))
(declare-fun cmp24.i_6_44 () (_ BitVec 1))
(declare-fun or.cond198.i_6_43 () (_ BitVec 1))
(declare-fun src_reg1.sroa.22.0.copyload_6_33 () (_ BitVec 64))
(declare-fun or.cond197.i_6_41 () (_ BitVec 1))
(declare-fun cmp21.i_6_42 () (_ BitVec 1))
(declare-fun src_reg1.sroa.15.0.copyload_6_31 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_6_30 () (_ BitVec 64))
(declare-fun cmp18.not.i_6_39 () (_ BitVec 1))
(declare-fun cmp16.not.i_6_38 () (_ BitVec 1))
(declare-fun i37.i.i_6_176 () (_ BitVec 64))
(declare-fun cond27.i.i_6_181 () (_ BitVec 64))
(declare-fun i33.i.i_6_166 () (_ BitVec 64))
(declare-fun cmp23.i.i_6_180 () (_ BitVec 1))
(declare-fun cmp.i323.i_6_165 () (_ BitVec 1))
(declare-fun cmp1.i325.i_6_168 () (_ BitVec 1))
(declare-fun cmp16.i.i_6_178 () (_ BitVec 1))
(declare-fun shl.i_6_80 () (_ BitVec 64))
(declare-fun i261.i_6_78 () (_ BitVec 64))
(declare-fun i36.i.i_6_173 () (_ BitVec 64))
(declare-fun cond12.i.i_6_175 () (_ BitVec 64))
(declare-fun i35.i.i_6_172 () (_ BitVec 64))
(declare-fun cmp8.i.i_6_174 () (_ BitVec 1))
(declare-fun dst_reg_6_144 () (_ BitVec 64))
(declare-fun dst_reg_6_142 () (_ BitVec 64))
(declare-fun i34.i.i_6_169 () (_ BitVec 64))
(declare-fun cond.i327.i_6_171 () (_ BitVec 64))
(declare-fun i.i322.i_6_163 () (_ BitVec 64))
(declare-fun cmp3.i.i_6_170 () (_ BitVec 1))
(declare-fun dst_reg_6_143 () (_ BitVec 64))
(declare-fun i262.i_6_83 () (_ BitVec 64))
(declare-fun dst_reg_6_8 () (_ BitVec 64))
(declare-fun cmp24.old.i_6_48 () (_ BitVec 1))
(declare-fun cmp21.old.i_6_47 () (_ BitVec 1))
(declare-fun dst_reg_6_148 () (_ BitVec 8))
(declare-fun dst_reg_6_147 () (_ BitVec 32))
(declare-fun dst_reg_6_146 () (_ BitVec 32))
(declare-fun dst_reg_6_145 () (_ BitVec 32))
(declare-fun dst_reg_6_141 () (_ BitVec 64))
(declare-fun dst_reg_6_140 () (_ BitVec 64))
(declare-fun dst_reg_6_139 () (_ BitVec 64))
(declare-fun dst_reg_6_138 () (_ BitVec 32))
(declare-fun dst_reg_6_137 () (_ BitVec 32))
(declare-fun dst_reg_6_136 () (_ BitVec 32))
(declare-fun dst_reg_6_135 () (_ BitVec 32))
(declare-fun src_reg_6_162 () (_ BitVec 8))
(declare-fun src_reg_6_161 () (_ BitVec 32))
(declare-fun src_reg_6_160 () (_ BitVec 32))
(declare-fun src_reg_6_159 () (_ BitVec 32))
(declare-fun src_reg_6_158 () (_ BitVec 64))
(declare-fun src_reg_6_157 () (_ BitVec 64))
(declare-fun src_reg_6_156 () (_ BitVec 64))
(declare-fun src_reg_6_155 () (_ BitVec 64))
(declare-fun src_reg_6_154 () (_ BitVec 64))
(declare-fun src_reg_6_153 () (_ BitVec 64))
(declare-fun src_reg_6_152 () (_ BitVec 32))
(declare-fun src_reg_6_151 () (_ BitVec 32))
(declare-fun src_reg_6_150 () (_ BitVec 32))
(declare-fun src_reg_6_149 () (_ BitVec 32))
(declare-fun src_reg1.sroa.10.0.copyload_6_34 () (_ BitVec 64))
(declare-fun src_reg_6_14 () (_ BitVec 32))
(declare-fun dst_reg_6_7 () (_ BitVec 64))
(declare-fun dst_reg_6_6 () (_ BitVec 64))
(declare-fun dst_reg_6_0 () (_ BitVec 32))
(declare-fun i38.i.i_6_179 () (_ BitVec 64))
(declare-fun cmp31.i330.i_6_183 () (_ BitVec 1))
(declare-fun add.i.i.i335.i_6_262 () (_ BitVec 32))
(declare-fun phi.bo_6_264 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_6_261 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_6_258 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_6_260 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_6_257 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_6_250 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_6_254 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_6_252 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_6_249 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_6_256 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_6_242 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_6_246 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_6_244 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_6_241 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_6_248 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_6_234 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_6_238 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_6_236 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_6_233 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_6_240 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_6_226 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_6_230 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_6_228 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_6_223 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_6_232 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_6_220 () (_ BitVec 1))
(declare-fun xor.i.i.i_6_216 () (_ BitVec 64))
(declare-fun shl.i.i.i.i.i_6_222 () (_ BitVec 64))
(declare-fun cmp.i.i.i.i_6_218 () (_ BitVec 1))
(declare-fun cond40.i.i_6_185 () (_ BitVec 64))
(declare-fun cmp36.i.i_6_184 () (_ BitVec 1))
(declare-fun dst_reg_6_199 () (_ BitVec 8))
(declare-fun dst_reg_6_198 () (_ BitVec 32))
(declare-fun dst_reg_6_197 () (_ BitVec 32))
(declare-fun dst_reg_6_196 () (_ BitVec 32))
(declare-fun dst_reg_6_195 () (_ BitVec 64))
(declare-fun dst_reg_6_194 () (_ BitVec 64))
(declare-fun dst_reg_6_193 () (_ BitVec 64))
(declare-fun dst_reg_6_192 () (_ BitVec 64))
(declare-fun dst_reg_6_191 () (_ BitVec 64))
(declare-fun dst_reg_6_190 () (_ BitVec 64))
(declare-fun dst_reg_6_189 () (_ BitVec 32))
(declare-fun dst_reg_6_188 () (_ BitVec 32))
(declare-fun dst_reg_6_187 () (_ BitVec 32))
(declare-fun dst_reg_6_186 () (_ BitVec 32))
(declare-fun src_reg_6_213 () (_ BitVec 8))
(declare-fun src_reg_6_212 () (_ BitVec 32))
(declare-fun src_reg_6_211 () (_ BitVec 32))
(declare-fun src_reg_6_210 () (_ BitVec 32))
(declare-fun src_reg_6_209 () (_ BitVec 64))
(declare-fun src_reg_6_208 () (_ BitVec 64))
(declare-fun src_reg_6_207 () (_ BitVec 64))
(declare-fun src_reg_6_206 () (_ BitVec 64))
(declare-fun src_reg_6_205 () (_ BitVec 64))
(declare-fun src_reg_6_204 () (_ BitVec 64))
(declare-fun src_reg_6_203 () (_ BitVec 32))
(declare-fun src_reg_6_202 () (_ BitVec 32))
(declare-fun src_reg_6_201 () (_ BitVec 32))
(declare-fun src_reg_6_200 () (_ BitVec 32))
(declare-fun i.i333.i_6_214 () (_ BitVec 64))
(declare-fun i5.i.i_6_215 () (_ BitVec 64))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_6_265 () Bool)
(declare-fun neg.i.i.i_6_286 () (_ BitVec 64))
(declare-fun or.i.i.i_6_283 () (_ BitVec 64))
(declare-fun and4.i.i.i_6_287 () (_ BitVec 64))
(declare-fun and.i1.i.i_6_284 () (_ BitVec 64))
(declare-fun i11.i.i_6_282 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_6_280 () (_ BitVec 64))
(declare-fun i9.i.i_6_281 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_6_278 () (_ BitVec 64))
(declare-fun sub.i.i.i_6_275 () (_ BitVec 64))
(declare-fun cmp.i.i.i_6_270 () (_ BitVec 1))
(declare-fun and.i.i336.i_6_276 () (_ BitVec 64))
(declare-fun notmask.i.i.i_6_273 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_6_271 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_6_267 () (_ BitVec 32))
(declare-fun src_reg_6_343 () (_ BitVec 8))
(declare-fun src_reg_6_315 () (_ BitVec 8))
(declare-fun src_reg_6_342 () (_ BitVec 32))
(declare-fun src_reg_6_314 () (_ BitVec 32))
(declare-fun src_reg_6_341 () (_ BitVec 32))
(declare-fun src_reg_6_313 () (_ BitVec 32))
(declare-fun src_reg_6_340 () (_ BitVec 32))
(declare-fun src_reg_6_312 () (_ BitVec 32))
(declare-fun src_reg_6_339 () (_ BitVec 64))
(declare-fun src_reg_6_311 () (_ BitVec 64))
(declare-fun src_reg_6_338 () (_ BitVec 64))
(declare-fun src_reg_6_310 () (_ BitVec 64))
(declare-fun src_reg_6_337 () (_ BitVec 64))
(declare-fun src_reg_6_309 () (_ BitVec 64))
(declare-fun src_reg_6_336 () (_ BitVec 64))
(declare-fun src_reg_6_308 () (_ BitVec 64))
(declare-fun src_reg_6_335 () (_ BitVec 64))
(declare-fun src_reg_6_307 () (_ BitVec 64))
(declare-fun src_reg_6_334 () (_ BitVec 64))
(declare-fun src_reg_6_306 () (_ BitVec 64))
(declare-fun src_reg_6_333 () (_ BitVec 32))
(declare-fun src_reg_6_305 () (_ BitVec 32))
(declare-fun src_reg_6_332 () (_ BitVec 32))
(declare-fun src_reg_6_304 () (_ BitVec 32))
(declare-fun src_reg_6_331 () (_ BitVec 32))
(declare-fun src_reg_6_303 () (_ BitVec 32))
(declare-fun src_reg_6_330 () (_ BitVec 32))
(declare-fun src_reg_6_302 () (_ BitVec 32))
(declare-fun dst_reg_6_329 () (_ BitVec 8))
(declare-fun dst_reg_6_301 () (_ BitVec 8))
(declare-fun dst_reg_6_328 () (_ BitVec 32))
(declare-fun dst_reg_6_300 () (_ BitVec 32))
(declare-fun dst_reg_6_327 () (_ BitVec 32))
(declare-fun dst_reg_6_299 () (_ BitVec 32))
(declare-fun dst_reg_6_326 () (_ BitVec 32))
(declare-fun dst_reg_6_298 () (_ BitVec 32))
(declare-fun dst_reg_6_325 () (_ BitVec 64))
(declare-fun dst_reg_6_297 () (_ BitVec 64))
(declare-fun dst_reg_6_324 () (_ BitVec 64))
(declare-fun dst_reg_6_296 () (_ BitVec 64))
(declare-fun dst_reg_6_323 () (_ BitVec 64))
(declare-fun dst_reg_6_295 () (_ BitVec 64))
(declare-fun dst_reg_6_322 () (_ BitVec 64))
(declare-fun dst_reg_6_294 () (_ BitVec 64))
(declare-fun dst_reg_6_321 () (_ BitVec 64))
(declare-fun dst_reg_6_293 () (_ BitVec 64))
(declare-fun dst_reg_6_320 () (_ BitVec 64))
(declare-fun dst_reg_6_292 () (_ BitVec 64))
(declare-fun dst_reg_6_319 () (_ BitVec 32))
(declare-fun dst_reg_6_291 () (_ BitVec 32))
(declare-fun dst_reg_6_318 () (_ BitVec 32))
(declare-fun dst_reg_6_290 () (_ BitVec 32))
(declare-fun dst_reg_6_317 () (_ BitVec 32))
(declare-fun dst_reg_6_289 () (_ BitVec 32))
(declare-fun dst_reg_6_316 () (_ BitVec 32))
(declare-fun dst_reg_6_288 () (_ BitVec 32))
(assert
 (let (($x78 (= tobool.not.i.i_6_36 (_ bv1 1))))
 (let (($x751 (= or.cond199.i_6_46 (_ bv0 1))))
 (let (($x753 (and $x751 $x78)))
 (let (($x76 (= tobool.not.i.i_6_36 (_ bv0 1))))
 (let (($x754 (= or.cond200.i_6_50 (_ bv0 1))))
 (let (($x756 (and $x754 $x76)))
 (let (($x758 (or $x756 $x753)))
 (let (($x759 (and $x78 $x758)))
 (let (($x134 (= cmp248.not.i_6_68 (_ bv1 1))))
 (let (($x762 (and $x134 $x759)))
 (let (($x144 (= cmp256.i_6_81 (_ bv1 1))))
 (let (($x764 (and $x144 $x762)))
 (let (($x789 (= if.then258.i_if.end266.i_6_115 $x764)))
 (let (($x143 (= cmp256.i_6_81 (_ bv0 1))))
 (let (($x765 (and $x143 $x762)))
 (let (($x788 (= if.else261.i_if.end266.i_6_114 $x765)))
 (let (($x209 (= dst_reg_6_13 dst_reg_6_99)))
 (let (($x208 (= dst_reg_6_12 dst_reg_6_98)))
 (let (($x207 (= dst_reg_6_11 dst_reg_6_97)))
 (let (($x206 (= dst_reg_6_10 dst_reg_6_96)))
 (let (($x205 (= dst_reg_6_9 dst_reg_6_95)))
 (let (($x210 (= shl263.i_6_84 dst_reg_6_94)))
 (let (($x203 (= (_ bv9223372036854775807 64) dst_reg_6_93)))
 (let (($x202 (= (_ bv9223372036854775808 64) dst_reg_6_92)))
 (let (($x201 (= dst_reg_6_5 dst_reg_6_91)))
 (let (($x200 (= dst_reg_6_4 dst_reg_6_90)))
 (let (($x199 (= dst_reg_6_3 dst_reg_6_89)))
 (let (($x198 (= dst_reg_6_2 dst_reg_6_88)))
 (let (($x197 (= dst_reg_6_1 dst_reg_6_87)))
 (let (($x196 (= (_ bv1 32) dst_reg_6_86)))
 (let (($x195 (= src_reg_6_27 src_reg_6_113)))
 (let (($x194 (= src_reg_6_26 src_reg_6_112)))
 (let (($x193 (= src_reg_6_25 src_reg_6_111)))
 (let (($x192 (= src_reg_6_24 src_reg_6_110)))
 (let (($x191 (= src_reg_6_23 src_reg_6_109)))
 (let (($x190 (= src_reg_6_22 src_reg_6_108)))
 (let (($x189 (= src_reg_6_21 src_reg_6_107)))
 (let (($x188 (= src_reg_6_20 src_reg_6_106)))
 (let (($x187 (= src_reg_6_19 src_reg_6_105)))
 (let (($x186 (= src_reg_6_18 src_reg_6_104)))
 (let (($x185 (= src_reg_6_17 src_reg_6_103)))
 (let (($x184 (= src_reg_6_16 src_reg_6_102)))
 (let (($x183 (= src_reg_6_15 src_reg_6_101)))
 (let (($x182 (= (_ bv1 32) src_reg_6_100)))
 (let (($x786 (and $x182 $x183 $x184 $x185 $x186 $x187 $x188 $x189 $x190 $x191 $x192 $x193 $x194 $x195 $x196 $x197 $x198 $x199 $x200 $x201 $x202 $x203 $x210 $x205 $x206 $x207 $x208 $x209)))
 (let (($x787 (=> $x765 $x786)))
 (let (($x204 (= (_ bv0 64) dst_reg_6_94)))
 (let (($x784 (and $x182 $x183 $x184 $x185 $x186 $x187 $x188 $x189 $x190 $x191 $x192 $x193 $x194 $x195 $x196 $x197 $x198 $x199 $x200 $x201 $x202 $x203 $x204 $x205 $x206 $x207 $x208 $x209)))
 (let (($x785 (=> $x764 $x784)))
 (let (($x259 (= cmp31.i216.i_6_133 (_ bv1 1))))
 (let (($x264 (ite $x259 (= cond35.i217.i_6_134 storemerge.i_6_116) (= cond35.i217.i_6_134 or29.i215.i_6_132))))
 (let (($x258 (= cmp31.i216.i_6_133 (_ bv0 1))))
 (let (($x260 (ite (bvult storemerge.i_6_116 or29.i215.i_6_132) $x259 $x258)))
 (let (($x255 (= or29.i215.i_6_132 (bvor shl.i.i_6_121 shl5.i.i_6_122))))
 (let (($x247 (= cmp19.i211.i_6_130 (_ bv1 1))))
 (let (($x252 (ite $x247 (= cond23.i212.i_6_131 i26.i210.i_6_129) (= cond23.i212.i_6_131 shl.i.i_6_121))))
 (let (($x246 (= cmp19.i211.i_6_130 (_ bv0 1))))
 (let (($x248 (ite (bvugt i26.i210.i_6_129 shl.i.i_6_121) $x247 $x246)))
 (let (($x243 (= dst_reg_6_94 i26.i210.i_6_129)))
 (let (($x241 (= or8.i206.i_6_128 (bvor shl.i.i_6_121 and7.i205.i_6_127))))
 (let (($x238 (= and7.i205.i_6_127 (bvand shl5.i.i_6_122 (_ bv9223372036854775807 64)))))
 (let (($x235 (= or.i200.i_6_125 (bvor shl.i.i_6_121 and.i199.i_6_124))))
 (let (($x232 (= and.i199.i_6_124 (bvand shl5.i.i_6_122 (_ bv9223372036854775808 64)))))
 (let (($x229 (= shl5.i.i_6_122 (bvshl i215.i_6_37 sh_prom.i.i_6_120))))
 (let (($x226 (= shl.i.i_6_121 (bvshl i263.i_6_118 sh_prom.i.i_6_120))))
 (let (($x223 (= sh_prom.i.i_6_120 (bvand src_reg1.sroa.17.0.copyload_6_32 (_ bv255 64)))))
 (let (($x219 (= dst_reg_6_4 i263.i_6_118)))
 (let (($x216 (= storemerge.i_6_116 (_ bv18446744073709551615 64))))
 (let (($x217 (=> if.then258.i_if.end266.i_6_115 $x216)))
 (let (($x214 (= storemerge.i_6_116 shl265.i_6_85)))
 (let (($x215 (=> if.else261.i_if.end266.i_6_114 $x214)))
 (let (($x897 (and $x215 $x217 $x219 $x223 $x226 $x229 $x232 $x235 $x238 $x241 $x243 $x248 $x252 $x255 $x260 $x264 $x785 $x787 $x788 $x789)))
 (let (($x766 (or $x765 $x764)))
 (let (($x898 (=> $x766 $x897)))
 (let (($x111 (= or.cond199.i_6_46 (_ bv1 1))))
 (let (($x113 (ite (= or.cond198.i_6_43 (_ bv1 1)) $x111 (= or.cond199.i_6_46 cmp24.i_6_44))))
 (let (($x106 (= cmp24.i_6_44 (_ bv0 1))))
 (let (($x107 (= cmp24.i_6_44 (_ bv1 1))))
 (let (($x105 (bvugt src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33)))
 (let (($x108 (ite $x105 $x107 $x106)))
 (let (($x103 (= or.cond198.i_6_43 (bvor cmp21.i_6_42 or.cond197.i_6_41))))
 (let (($x98 (= cmp21.i_6_42 (_ bv0 1))))
 (let (($x99 (= cmp21.i_6_42 (_ bv1 1))))
 (let (($x97 (bvsgt src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31)))
 (let (($x100 (ite $x97 $x99 $x98)))
 (let (($x85 (= cmp16.not.i_6_38 (_ bv1 1))))
 (let (($x95 (ite $x85 (= or.cond197.i_6_41 (_ bv1 1)) (= or.cond197.i_6_41 cmp18.not.i_6_39))))
 (let (($x89 (= cmp18.not.i_6_39 (_ bv0 1))))
 (let (($x90 (= cmp18.not.i_6_39 (_ bv1 1))))
 (let (($x88 (and (distinct src_reg1.sroa.17.0.copyload_6_32 src_reg1.sroa.22.0.copyload_6_33) true)))
 (let (($x91 (ite $x88 $x90 $x89)))
 (let (($x84 (= cmp16.not.i_6_38 (_ bv0 1))))
 (let (($x83 (and (distinct src_reg1.sroa.13.0.copyload_6_30 src_reg1.sroa.15.0.copyload_6_31) true)))
 (let (($x86 (ite $x83 $x85 $x84)))
 (let (($x896 (=> $x78 (and $x86 $x91 $x95 $x100 $x103 $x108 $x113))))
 (let (($x399 (= cmp23.i.i_6_180 (_ bv1 1))))
 (let (($x404 (ite $x399 (= cond27.i.i_6_181 i33.i.i_6_166) (= cond27.i.i_6_181 i37.i.i_6_176))))
 (let (($x398 (= cmp23.i.i_6_180 (_ bv0 1))))
 (let (($x400 (ite (bvult i33.i.i_6_166 i37.i.i_6_176) $x399 $x398)))
 (let (($x133 (= cmp248.not.i_6_68 (_ bv0 1))))
 (let (($x763 (and $x133 $x759)))
 (let (($x767 (or $x766 $x763)))
 (let (($x353 (= cmp.i323.i_6_165 (_ bv0 1))))
 (let (($x769 (and $x353 $x767)))
 (let (($x360 (= cmp1.i325.i_6_168 (_ bv0 1))))
 (let (($x771 (and $x360 $x769)))
 (let (($x392 (= cmp16.i.i_6_178 (_ bv1 1))))
 (let (($x773 (and $x392 $x771)))
 (let (($x894 (=> $x773 (and $x400 $x404))))
 (let (($x145 (ite (bvugt i261.i_6_78 shl.i_6_80) $x144 $x143)))
 (let (($x140 (= shl.i_6_80 (bvlshr (_ bv9223372036854775808 64) src_reg1.sroa.22.0.copyload_6_33))))
 (let (($x137 (= dst_reg_6_9 i261.i_6_78)))
 (let (($x892 (=> $x762 (and $x137 $x140 $x145))))
 (let (($x381 (= cmp8.i.i_6_174 (_ bv1 1))))
 (let (($x386 (ite $x381 (= cond12.i.i_6_175 i35.i.i_6_172) (= cond12.i.i_6_175 i36.i.i_6_173))))
 (let (($x380 (= cmp8.i.i_6_174 (_ bv0 1))))
 (let (($x382 (ite (bvult i35.i.i_6_172 i36.i.i_6_173) $x381 $x380)))
 (let (($x377 (= dst_reg_6_144 i36.i.i_6_173)))
 (let (($x375 (= dst_reg_6_142 i35.i.i_6_172)))
 (let (($x368 (= cmp3.i.i_6_170 (_ bv1 1))))
 (let (($x373 (ite $x368 (= cond.i327.i_6_171 i.i322.i_6_163) (= cond.i327.i_6_171 i34.i.i_6_169))))
 (let (($x367 (= cmp3.i.i_6_170 (_ bv0 1))))
 (let (($x369 (ite (bvugt i.i322.i_6_163 i34.i.i_6_169) $x368 $x367)))
 (let (($x364 (= dst_reg_6_143 i34.i.i_6_169)))
 (let (($x354 (= cmp.i323.i_6_165 (_ bv1 1))))
 (let (($x768 (and $x354 $x767)))
 (let (($x361 (= cmp1.i325.i_6_168 (_ bv1 1))))
 (let (($x770 (and $x361 $x769)))
 (let (($x772 (or $x770 $x768)))
 (let (($x890 (=> $x772 (and $x364 $x369 $x373 $x375 $x377 $x382 $x386))))
 (let (($x153 (= shl265.i_6_85 (bvshl i261.i_6_78 src_reg1.sroa.22.0.copyload_6_33))))
 (let (($x150 (= shl263.i_6_84 (bvshl i262.i_6_83 src_reg1.sroa.17.0.copyload_6_32))))
 (let (($x147 (= dst_reg_6_8 i262.i_6_83)))
 (let (($x887 (and $x147 $x150 $x153)))
 (let (($x888 (=> $x765 $x887)))
 (let (($x124 (= or.cond200.i_6_50 (_ bv1 1))))
 (let (($x116 (= cmp21.old.i_6_47 (_ bv1 1))))
 (let (($x125 (ite $x116 $x124 (= or.cond200.i_6_50 cmp24.old.i_6_48))))
 (let (($x119 (= cmp24.old.i_6_48 (_ bv0 1))))
 (let (($x120 (= cmp24.old.i_6_48 (_ bv1 1))))
 (let (($x121 (ite $x105 $x120 $x119)))
 (let (($x115 (= cmp21.old.i_6_47 (_ bv0 1))))
 (let (($x117 (ite $x97 $x116 $x115)))
 (let (($x886 (=> $x76 (and $x117 $x121 $x125))))
 (let (($x362 (ite (bvslt i33.i.i_6_166 (_ bv0 64)) $x361 $x360)))
 (let (($x357 (= dst_reg_6_142 i33.i.i_6_166)))
 (let (($x884 (=> $x769 (and $x357 $x362))))
 (let (($x882 (=> $x759 (and (ite (bvult src_reg1.sroa.22.0.copyload_6_33 (_ bv64 64)) $x134 $x133)))))
 (let (($x348 (= dst_reg_6_13 dst_reg_6_148)))
 (let (($x347 (= dst_reg_6_12 dst_reg_6_147)))
 (let (($x346 (= dst_reg_6_11 dst_reg_6_146)))
 (let (($x345 (= dst_reg_6_10 dst_reg_6_145)))
 (let (($x344 (= (_ bv18446744073709551615 64) dst_reg_6_144)))
 (let (($x343 (= (_ bv0 64) dst_reg_6_143)))
 (let (($x342 (= (_ bv9223372036854775807 64) dst_reg_6_142)))
 (let (($x341 (= (_ bv9223372036854775808 64) dst_reg_6_141)))
 (let (($x340 (= (_ bv18446744073709551615 64) dst_reg_6_140)))
 (let (($x339 (= (_ bv0 64) dst_reg_6_139)))
 (let (($x338 (= dst_reg_6_3 dst_reg_6_138)))
 (let (($x337 (= dst_reg_6_2 dst_reg_6_137)))
 (let (($x336 (= dst_reg_6_1 dst_reg_6_136)))
 (let (($x335 (= (_ bv1 32) dst_reg_6_135)))
 (let (($x334 (= src_reg_6_27 src_reg_6_162)))
 (let (($x333 (= src_reg_6_26 src_reg_6_161)))
 (let (($x332 (= src_reg_6_25 src_reg_6_160)))
 (let (($x331 (= src_reg_6_24 src_reg_6_159)))
 (let (($x330 (= src_reg_6_23 src_reg_6_158)))
 (let (($x329 (= src_reg_6_22 src_reg_6_157)))
 (let (($x328 (= src_reg_6_21 src_reg_6_156)))
 (let (($x327 (= src_reg_6_20 src_reg_6_155)))
 (let (($x326 (= src_reg_6_19 src_reg_6_154)))
 (let (($x325 (= src_reg_6_18 src_reg_6_153)))
 (let (($x324 (= src_reg_6_17 src_reg_6_152)))
 (let (($x323 (= src_reg_6_16 src_reg_6_151)))
 (let (($x322 (= src_reg_6_15 src_reg_6_150)))
 (let (($x321 (= (_ bv1 32) src_reg_6_149)))
 (let (($x792 (and $x321 $x322 $x323 $x324 $x325 $x326 $x327 $x328 $x329 $x330 $x331 $x332 $x333 $x334 $x335 $x336 $x337 $x338 $x339 $x340 $x341 $x342 $x343 $x344 $x345 $x346 $x347 $x348)))
 (let (($x793 (=> $x763 $x792)))
 (let (($x320 (= dst_reg_6_99 dst_reg_6_148)))
 (let (($x319 (= dst_reg_6_98 dst_reg_6_147)))
 (let (($x318 (= dst_reg_6_97 dst_reg_6_146)))
 (let (($x317 (= dst_reg_6_96 dst_reg_6_145)))
 (let (($x316 (= cond35.i217.i_6_134 dst_reg_6_144)))
 (let (($x315 (= cond23.i212.i_6_131 dst_reg_6_143)))
 (let (($x314 (= or8.i206.i_6_128 dst_reg_6_142)))
 (let (($x313 (= or.i200.i_6_125 dst_reg_6_141)))
 (let (($x312 (= shl5.i.i_6_122 dst_reg_6_140)))
 (let (($x311 (= shl.i.i_6_121 dst_reg_6_139)))
 (let (($x310 (= dst_reg_6_89 dst_reg_6_138)))
 (let (($x309 (= dst_reg_6_88 dst_reg_6_137)))
 (let (($x308 (= dst_reg_6_87 dst_reg_6_136)))
 (let (($x307 (= dst_reg_6_86 dst_reg_6_135)))
 (let (($x306 (= src_reg_6_113 src_reg_6_162)))
 (let (($x305 (= src_reg_6_112 src_reg_6_161)))
 (let (($x304 (= src_reg_6_111 src_reg_6_160)))
 (let (($x303 (= src_reg_6_110 src_reg_6_159)))
 (let (($x302 (= src_reg_6_109 src_reg_6_158)))
 (let (($x301 (= src_reg_6_108 src_reg_6_157)))
 (let (($x300 (= src_reg_6_107 src_reg_6_156)))
 (let (($x299 (= src_reg_6_106 src_reg_6_155)))
 (let (($x298 (= src_reg_6_105 src_reg_6_154)))
 (let (($x297 (= src_reg_6_104 src_reg_6_153)))
 (let (($x296 (= src_reg_6_103 src_reg_6_152)))
 (let (($x295 (= src_reg_6_102 src_reg_6_151)))
 (let (($x294 (= src_reg_6_101 src_reg_6_150)))
 (let (($x293 (= src_reg_6_100 src_reg_6_149)))
 (let (($x790 (and $x293 $x294 $x295 $x296 $x297 $x298 $x299 $x300 $x301 $x302 $x303 $x304 $x305 $x306 $x307 $x308 $x309 $x310 $x311 $x312 $x313 $x314 $x315 $x316 $x317 $x318 $x319 $x320)))
 (let (($x791 (=> $x766 $x790)))
 (let (($x355 (ite (bvsgt i.i322.i_6_163 (_ bv18446744073709551615 64)) $x354 $x353)))
 (let (($x350 (= dst_reg_6_141 i.i322.i_6_163)))
 (let (($x880 (=> $x767 (and $x350 $x355 $x791 $x793))))
 (let (($x81 (= dst_reg_6_5 i215.i_6_37)))
 (let (($x79 (ite (= src_reg1.sroa.10.0.copyload_6_34 (_ bv0 64)) $x78 $x76)))
 (let (($x71 (= src_reg_6_19 src_reg1.sroa.10.0.copyload_6_34)))
 (let (($x69 (= src_reg_6_23 src_reg1.sroa.22.0.copyload_6_33)))
 (let (($x67 (= src_reg_6_22 src_reg1.sroa.17.0.copyload_6_32)))
 (let (($x65 (= src_reg_6_21 src_reg1.sroa.15.0.copyload_6_31)))
 (let (($x63 (= src_reg_6_20 src_reg1.sroa.13.0.copyload_6_30)))
 (let (($x60 (= src_reg_6_27 src_reg_6_27)))
 (let (($x59 (= src_reg_6_26 src_reg_6_26)))
 (let (($x58 (= src_reg_6_25 src_reg_6_25)))
 (let (($x57 (= src_reg_6_24 src_reg_6_24)))
 (let (($x56 (= src_reg_6_23 src_reg_6_23)))
 (let (($x55 (= src_reg_6_22 src_reg_6_22)))
 (let (($x54 (= src_reg_6_21 src_reg_6_21)))
 (let (($x53 (= src_reg_6_20 src_reg_6_20)))
 (let (($x52 (= src_reg_6_19 src_reg_6_19)))
 (let (($x51 (= src_reg_6_18 src_reg_6_18)))
 (let (($x50 (= src_reg_6_17 src_reg_6_17)))
 (let (($x49 (= src_reg_6_16 src_reg_6_16)))
 (let (($x48 (= src_reg_6_15 src_reg_6_15)))
 (let (($x47 (= src_reg_6_14 src_reg_6_14)))
 (let (($x32 (= dst_reg_6_13 dst_reg_6_13)))
 (let (($x31 (= dst_reg_6_12 dst_reg_6_12)))
 (let (($x30 (= dst_reg_6_11 dst_reg_6_11)))
 (let (($x29 (= dst_reg_6_10 dst_reg_6_10)))
 (let (($x28 (= dst_reg_6_9 dst_reg_6_9)))
 (let (($x27 (= dst_reg_6_8 dst_reg_6_8)))
 (let (($x26 (= dst_reg_6_7 dst_reg_6_7)))
 (let (($x25 (= dst_reg_6_6 dst_reg_6_6)))
 (let (($x24 (= dst_reg_6_5 dst_reg_6_5)))
 (let (($x23 (= dst_reg_6_4 dst_reg_6_4)))
 (let (($x22 (= dst_reg_6_3 dst_reg_6_3)))
 (let (($x21 (= dst_reg_6_2 dst_reg_6_2)))
 (let (($x20 (= dst_reg_6_1 dst_reg_6_1)))
 (let (($x19 (= dst_reg_6_0 dst_reg_6_0)))
 (let (($x395 (= dst_reg_6_143 i38.i.i_6_179)))
 (let (($x391 (= cmp16.i.i_6_178 (_ bv0 1))))
 (let (($x393 (ite (bvsgt i37.i.i_6_176 (_ bv18446744073709551615 64)) $x392 $x391)))
 (let (($x388 (= dst_reg_6_144 i37.i.i_6_176)))
 (let (($x878 (=> $x771 (and $x388 $x393 $x395))))
 (let (($x407 (= cmp31.i330.i_6_183 (_ bv0 1))))
 (let (($x408 (= cmp31.i330.i_6_183 (_ bv1 1))))
 (let (($x409 (ite (bvslt i38.i.i_6_179 (_ bv0 64)) $x408 $x407)))
 (let (($x774 (and $x391 $x771)))
 (let (($x876 (=> $x774 (and $x409))))
 (let (($x618 (= phi.bo_6_264 (bvand add.i.i.i335.i_6_262 (_ bv255 32)))))
 (let (($x614 (= add.i.i.i335.i_6_262 (bvadd num.4.i.i.i.i.i_6_258 i.i.i.i.i.i.neg_6_261))))
 (let (($x611 (= i.i.i.i.i.i.neg_6_261 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_6_260))))
 (let (($x608 (= word.addr.4.lobit.i.i.i.i.i.neg_6_260 (bvlshr word.addr.4.i.i.i.i.i_6_257 (_ bv63 64)))))
 (let (($x587 (= tobool20.not.i.i.i.i.i_6_252 (_ bv1 1))))
 (let (($x604 (ite $x587 (= num.4.i.i.i.i.i_6_258 sub22.i.i.i.i.i_6_254) (= num.4.i.i.i.i.i_6_258 num.3.i.i.i.i.i_6_250))))
 (let (($x600 (ite $x587 (= word.addr.4.i.i.i.i.i_6_257 shl23.i.i.i.i.i_6_256) (= word.addr.4.i.i.i.i.i_6_257 word.addr.3.i.i.i.i.i_6_249))))
 (let (($x596 (= shl23.i.i.i.i.i_6_256 (bvshl word.addr.3.i.i.i.i.i_6_249 (_ bv2 64)))))
 (let (($x592 (= sub22.i.i.i.i.i_6_254 (bvadd num.3.i.i.i.i.i_6_250 (_ bv254 32)))))
 (let (($x586 (= tobool20.not.i.i.i.i.i_6_252 (_ bv0 1))))
 (let (($x588 (ite (bvult word.addr.3.i.i.i.i.i_6_249 (_ bv4611686018427387904 64)) $x587 $x586)))
 (let (($x565 (= tobool14.not.i.i.i.i.i_6_244 (_ bv1 1))))
 (let (($x582 (ite $x565 (= num.3.i.i.i.i.i_6_250 sub16.i.i.i.i.i_6_246) (= num.3.i.i.i.i.i_6_250 num.2.i.i.i.i.i_6_242))))
 (let (($x578 (ite $x565 (= word.addr.3.i.i.i.i.i_6_249 shl17.i.i.i.i.i_6_248) (= word.addr.3.i.i.i.i.i_6_249 word.addr.2.i.i.i.i.i_6_241))))
 (let (($x574 (= shl17.i.i.i.i.i_6_248 (bvshl word.addr.2.i.i.i.i.i_6_241 (_ bv4 64)))))
 (let (($x570 (= sub16.i.i.i.i.i_6_246 (bvadd num.2.i.i.i.i.i_6_242 (_ bv4294967292 32)))))
 (let (($x564 (= tobool14.not.i.i.i.i.i_6_244 (_ bv0 1))))
 (let (($x566 (ite (bvult word.addr.2.i.i.i.i.i_6_241 (_ bv1152921504606846976 64)) $x565 $x564)))
 (let (($x543 (= tobool8.not.i.i.i.i.i_6_236 (_ bv1 1))))
 (let (($x560 (ite $x543 (= num.2.i.i.i.i.i_6_242 sub10.i.i.i.i.i_6_238) (= num.2.i.i.i.i.i_6_242 num.1.i.i.i.i.i_6_234))))
 (let (($x556 (ite $x543 (= word.addr.2.i.i.i.i.i_6_241 shl11.i.i.i.i.i_6_240) (= word.addr.2.i.i.i.i.i_6_241 word.addr.1.i.i.i.i.i_6_233))))
 (let (($x552 (= shl11.i.i.i.i.i_6_240 (bvshl word.addr.1.i.i.i.i.i_6_233 (_ bv8 64)))))
 (let (($x548 (= sub10.i.i.i.i.i_6_238 (bvadd num.1.i.i.i.i.i_6_234 (_ bv4294967288 32)))))
 (let (($x542 (= tobool8.not.i.i.i.i.i_6_236 (_ bv0 1))))
 (let (($x544 (ite (bvult word.addr.1.i.i.i.i.i_6_233 (_ bv72057594037927936 64)) $x543 $x542)))
 (let (($x521 (= tobool2.not.i.i.i.i.i_6_228 (_ bv1 1))))
 (let (($x538 (ite $x521 (= num.1.i.i.i.i.i_6_234 sub4.i.i.i.i.i_6_230) (= num.1.i.i.i.i.i_6_234 spec.select17.i.i.i.i.i_6_226))))
 (let (($x534 (ite $x521 (= word.addr.1.i.i.i.i.i_6_233 shl5.i.i.i.i.i_6_232) (= word.addr.1.i.i.i.i.i_6_233 spec.select.i.i.i.i.i_6_223))))
 (let (($x530 (= shl5.i.i.i.i.i_6_232 (bvshl spec.select.i.i.i.i.i_6_223 (_ bv16 64)))))
 (let (($x526 (= sub4.i.i.i.i.i_6_230 (bvadd spec.select17.i.i.i.i.i_6_226 (_ bv4294967280 32)))))
 (let (($x520 (= tobool2.not.i.i.i.i.i_6_228 (_ bv0 1))))
 (let (($x522 (ite (bvult spec.select.i.i.i.i.i_6_223 (_ bv281474976710656 64)) $x521 $x520)))
 (let (($x501 (= tobool.not.i.i.i.i.i_6_220 (_ bv1 1))))
 (let (($x516 (ite $x501 (= spec.select17.i.i.i.i.i_6_226 (_ bv31 32)) (= spec.select17.i.i.i.i.i_6_226 (_ bv63 32)))))
 (let (($x510 (ite $x501 (= spec.select.i.i.i.i.i_6_223 shl.i.i.i.i.i_6_222) (= spec.select.i.i.i.i.i_6_223 xor.i.i.i_6_216))))
 (let (($x506 (= shl.i.i.i.i.i_6_222 (bvshl xor.i.i.i_6_216 (_ bv32 64)))))
 (let (($x500 (= tobool.not.i.i.i.i.i_6_220 (_ bv0 1))))
 (let (($x502 (ite (bvult xor.i.i.i_6_216 (_ bv4294967296 64)) $x501 $x500)))
 (let (($x873 (and $x502 $x506 $x510 $x516 $x522 $x526 $x530 $x534 $x538 $x544 $x548 $x552 $x556 $x560 $x566 $x570 $x574 $x578 $x582 $x588 $x592 $x596 $x600 $x604 $x608 $x611 $x614 $x618)))
 (let (($x776 (and $x408 $x774)))
 (let (($x779 (or $x776 (or (and $x407 $x774) (or $x773 $x772)))))
 (let (($x494 (= cmp.i.i.i.i_6_218 (_ bv0 1))))
 (let (($x781 (and $x494 $x779)))
 (let (($x874 (=> $x781 $x873)))
 (let (($x413 (= cmp36.i.i_6_184 (_ bv1 1))))
 (let (($x418 (ite $x413 (= cond40.i.i_6_185 i.i322.i_6_163) (= cond40.i.i_6_185 i38.i.i_6_179))))
 (let (($x412 (= cmp36.i.i_6_184 (_ bv0 1))))
 (let (($x414 (ite (bvugt i.i322.i_6_163 i38.i.i_6_179) $x413 $x412)))
 (let (($x872 (=> $x776 (and $x414 $x418))))
 (let (($x474 (= dst_reg_6_148 dst_reg_6_199)))
 (let (($x473 (= dst_reg_6_147 dst_reg_6_198)))
 (let (($x472 (= dst_reg_6_146 dst_reg_6_197)))
 (let (($x471 (= dst_reg_6_145 dst_reg_6_196)))
 (let (($x481 (= dst_reg_6_144 dst_reg_6_195)))
 (let (($x484 (= cond40.i.i_6_185 dst_reg_6_194)))
 (let (($x483 (= i37.i.i_6_176 dst_reg_6_193)))
 (let (($x482 (= cond40.i.i_6_185 dst_reg_6_192)))
 (let (($x466 (= dst_reg_6_140 dst_reg_6_191)))
 (let (($x465 (= dst_reg_6_139 dst_reg_6_190)))
 (let (($x464 (= dst_reg_6_138 dst_reg_6_189)))
 (let (($x463 (= dst_reg_6_137 dst_reg_6_188)))
 (let (($x462 (= dst_reg_6_136 dst_reg_6_187)))
 (let (($x461 (= dst_reg_6_135 dst_reg_6_186)))
 (let (($x460 (= src_reg_6_162 src_reg_6_213)))
 (let (($x459 (= src_reg_6_161 src_reg_6_212)))
 (let (($x458 (= src_reg_6_160 src_reg_6_211)))
 (let (($x457 (= src_reg_6_159 src_reg_6_210)))
 (let (($x456 (= src_reg_6_158 src_reg_6_209)))
 (let (($x455 (= src_reg_6_157 src_reg_6_208)))
 (let (($x454 (= src_reg_6_156 src_reg_6_207)))
 (let (($x453 (= src_reg_6_155 src_reg_6_206)))
 (let (($x452 (= src_reg_6_154 src_reg_6_205)))
 (let (($x451 (= src_reg_6_153 src_reg_6_204)))
 (let (($x450 (= src_reg_6_152 src_reg_6_203)))
 (let (($x449 (= src_reg_6_151 src_reg_6_202)))
 (let (($x448 (= src_reg_6_150 src_reg_6_201)))
 (let (($x447 (= src_reg_6_149 src_reg_6_200)))
 (let (($x800 (and $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x463 $x464 $x465 $x466 $x482 $x483 $x484 $x481 $x471 $x472 $x473 $x474)))
 (let (($x801 (=> $x776 $x800)))
 (let (($x477 (= dst_reg_6_143 dst_reg_6_194)))
 (let (($x480 (= dst_reg_6_142 dst_reg_6_193)))
 (let (($x479 (= dst_reg_6_141 dst_reg_6_192)))
 (let (($x798 (and $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x463 $x464 $x465 $x466 $x479 $x480 $x477 $x481 $x471 $x472 $x473 $x474)))
 (let (($x777 (and $x407 $x774)))
 (let (($x799 (=> $x777 $x798)))
 (let (($x478 (= cond27.i.i_6_181 dst_reg_6_195)))
 (let (($x476 (= cond27.i.i_6_181 dst_reg_6_193)))
 (let (($x475 (= i38.i.i_6_179 dst_reg_6_192)))
 (let (($x796 (and $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x463 $x464 $x465 $x466 $x475 $x476 $x477 $x478 $x471 $x472 $x473 $x474)))
 (let (($x797 (=> $x773 $x796)))
 (let (($x470 (= cond12.i.i_6_175 dst_reg_6_195)))
 (let (($x469 (= cond.i327.i_6_171 dst_reg_6_194)))
 (let (($x468 (= cond12.i.i_6_175 dst_reg_6_193)))
 (let (($x467 (= cond.i327.i_6_171 dst_reg_6_192)))
 (let (($x794 (and $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x463 $x464 $x465 $x466 $x467 $x468 $x469 $x470 $x471 $x472 $x473 $x474)))
 (let (($x795 (=> $x772 $x794)))
 (let (($x495 (= cmp.i.i.i.i_6_218 (_ bv1 1))))
 (let (($x496 (ite (= xor.i.i.i_6_216 (_ bv0 64)) $x495 $x494)))
 (let (($x491 (= xor.i.i.i_6_216 (bvxor i5.i.i_6_215 i.i333.i_6_214))))
 (let (($x488 (= dst_reg_6_195 i5.i.i_6_215)))
 (let (($x486 (= dst_reg_6_194 i.i333.i_6_214)))
 (let (($x870 (=> $x779 (and $x486 $x488 $x491 $x496 $x795 $x797 $x799 $x801))))
 (let (($x780 (and $x495 $x779)))
 (let (($x803 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266 $x780)))
 (let (($x802 (= if.end.i.i.i.i___reg_bound_offset.exit.i_6_265 $x781)))
 (let (($x666 (= and4.i.i.i_6_287 (bvand or.i.i.i_6_283 neg.i.i.i_6_286))))
 (let (($x663 (= neg.i.i.i_6_286 (bvxor and.i1.i.i_6_284 (_ bv18446744073709551615 64)))))
 (let (($x660 (= and.i1.i.i_6_284 (bvand retval.sroa.3.0.i.i.i_6_280 i11.i.i_6_282))))
 (let (($x657 (= or.i.i.i_6_283 (bvor retval.sroa.0.0.i.i.i_6_278 i9.i.i_6_281))))
 (let (($x654 (= dst_reg_6_140 i11.i.i_6_282)))
 (let (($x652 (= dst_reg_6_139 i9.i.i_6_281)))
 (let (($x629 (= cmp.i.i.i_6_270 (_ bv1 1))))
 (let (($x650 (ite $x629 (= retval.sroa.3.0.i.i.i_6_280 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_6_280 sub.i.i.i_6_275))))
 (let (($x646 (ite $x629 (= retval.sroa.0.0.i.i.i_6_278 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_6_278 and.i.i336.i_6_276))))
 (let (($x642 (= and.i.i336.i_6_276 (bvand notmask.i.i.i_6_273 i.i333.i_6_214))))
 (let (($x639 (= sub.i.i.i_6_275 (bvxor notmask.i.i.i_6_273 (_ bv18446744073709551615 64)))))
 (let (($x636 (= notmask.i.i.i_6_273 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_6_271))))
 (let (($x633 (= sh_prom.i.i.i_6_271 ((_ zero_extend 32) retval.0.i.i.i.i_6_267))))
 (let (($x628 (= cmp.i.i.i_6_270 (_ bv0 1))))
 (let (($x630 (ite (bvugt retval.0.i.i.i.i_6_267 (_ bv63 32)) $x629 $x628)))
 (let (($x624 (= retval.0.i.i.i.i_6_267 (_ bv0 32))))
 (let (($x625 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_6_266 $x624)))
 (let (($x622 (= retval.0.i.i.i.i_6_267 phi.bo_6_264)))
 (let (($x623 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_6_265 $x622)))
 (let (($x867 (and $x623 $x625 $x630 $x633 $x636 $x639 $x642 $x646 $x650 $x652 $x654 $x657 $x660 $x663 $x666 $x802 $x803)))
 (let (($x782 (or $x781 $x780)))
 (let (($x868 (=> $x782 $x867)))
 (let (($x864 (= src_reg_6_315 src_reg_6_343)))
 (let (($x863 (= src_reg_6_314 src_reg_6_342)))
 (let (($x862 (= src_reg_6_313 src_reg_6_341)))
 (let (($x861 (= src_reg_6_312 src_reg_6_340)))
 (let (($x860 (= src_reg_6_311 src_reg_6_339)))
 (let (($x859 (= src_reg_6_310 src_reg_6_338)))
 (let (($x858 (= src_reg_6_309 src_reg_6_337)))
 (let (($x857 (= src_reg_6_308 src_reg_6_336)))
 (let (($x856 (= src_reg_6_307 src_reg_6_335)))
 (let (($x855 (= src_reg_6_306 src_reg_6_334)))
 (let (($x854 (= src_reg_6_305 src_reg_6_333)))
 (let (($x853 (= src_reg_6_304 src_reg_6_332)))
 (let (($x852 (= src_reg_6_303 src_reg_6_331)))
 (let (($x851 (= src_reg_6_302 src_reg_6_330)))
 (let (($x836 (= dst_reg_6_301 dst_reg_6_329)))
 (let (($x835 (= dst_reg_6_300 dst_reg_6_328)))
 (let (($x834 (= dst_reg_6_299 dst_reg_6_327)))
 (let (($x833 (= dst_reg_6_298 dst_reg_6_326)))
 (let (($x832 (= dst_reg_6_297 dst_reg_6_325)))
 (let (($x831 (= dst_reg_6_296 dst_reg_6_324)))
 (let (($x830 (= dst_reg_6_295 dst_reg_6_323)))
 (let (($x829 (= dst_reg_6_294 dst_reg_6_322)))
 (let (($x828 (= dst_reg_6_293 dst_reg_6_321)))
 (let (($x827 (= dst_reg_6_292 dst_reg_6_320)))
 (let (($x826 (= dst_reg_6_291 dst_reg_6_319)))
 (let (($x825 (= dst_reg_6_290 dst_reg_6_318)))
 (let (($x824 (= dst_reg_6_289 dst_reg_6_317)))
 (let (($x823 (= dst_reg_6_288 dst_reg_6_316)))
 (let (($x722 (= dst_reg_6_13 dst_reg_6_301)))
 (let (($x721 (= dst_reg_6_12 dst_reg_6_300)))
 (let (($x720 (= dst_reg_6_11 dst_reg_6_299)))
 (let (($x719 (= (_ bv0 32) dst_reg_6_298)))
 (let (($x718 (= (_ bv18446744073709551615 64) dst_reg_6_297)))
 (let (($x717 (= (_ bv0 64) dst_reg_6_296)))
 (let (($x716 (= (_ bv9223372036854775807 64) dst_reg_6_295)))
 (let (($x715 (= (_ bv9223372036854775808 64) dst_reg_6_294)))
 (let (($x714 (= (_ bv18446744073709551615 64) dst_reg_6_293)))
 (let (($x713 (= (_ bv0 64) dst_reg_6_292)))
 (let (($x712 (= dst_reg_6_3 dst_reg_6_291)))
 (let (($x711 (= dst_reg_6_2 dst_reg_6_290)))
 (let (($x710 (= dst_reg_6_1 dst_reg_6_289)))
 (let (($x709 (= (_ bv1 32) dst_reg_6_288)))
 (let (($x708 (= src_reg_6_27 src_reg_6_315)))
 (let (($x707 (= src_reg_6_26 src_reg_6_314)))
 (let (($x706 (= src_reg_6_25 src_reg_6_313)))
 (let (($x705 (= src_reg_6_24 src_reg_6_312)))
 (let (($x704 (= src_reg_6_23 src_reg_6_311)))
 (let (($x703 (= src_reg_6_22 src_reg_6_310)))
 (let (($x702 (= src_reg_6_21 src_reg_6_309)))
 (let (($x701 (= src_reg_6_20 src_reg_6_308)))
 (let (($x700 (= src_reg_6_19 src_reg_6_307)))
 (let (($x699 (= src_reg_6_18 src_reg_6_306)))
 (let (($x698 (= src_reg_6_17 src_reg_6_305)))
 (let (($x697 (= src_reg_6_16 src_reg_6_304)))
 (let (($x696 (= src_reg_6_15 src_reg_6_303)))
 (let (($x695 (= (_ bv1 32) src_reg_6_302)))
 (let (($x804 (and $x695 $x696 $x697 $x698 $x699 $x700 $x701 $x702 $x703 $x704 $x705 $x706 $x707 $x708 $x709 $x710 $x711 $x712 $x713 $x714 $x715 $x716 $x717 $x718 $x719 $x720 $x721 $x722)))
 (let (($x760 (and $x76 $x758)))
 (let (($x808 (=> $x760 $x804)))
 (let (($x750 (= dst_reg_6_199 dst_reg_6_301)))
 (let (($x749 (= dst_reg_6_198 dst_reg_6_300)))
 (let (($x748 (= dst_reg_6_197 dst_reg_6_299)))
 (let (($x747 (= dst_reg_6_196 dst_reg_6_298)))
 (let (($x746 (= dst_reg_6_195 dst_reg_6_297)))
 (let (($x745 (= dst_reg_6_194 dst_reg_6_296)))
 (let (($x744 (= dst_reg_6_193 dst_reg_6_295)))
 (let (($x743 (= dst_reg_6_192 dst_reg_6_294)))
 (let (($x742 (= and.i1.i.i_6_284 dst_reg_6_293)))
 (let (($x741 (= and4.i.i.i_6_287 dst_reg_6_292)))
 (let (($x740 (= dst_reg_6_189 dst_reg_6_291)))
 (let (($x739 (= dst_reg_6_188 dst_reg_6_290)))
 (let (($x738 (= dst_reg_6_187 dst_reg_6_289)))
 (let (($x737 (= dst_reg_6_186 dst_reg_6_288)))
 (let (($x736 (= src_reg_6_213 src_reg_6_315)))
 (let (($x735 (= src_reg_6_212 src_reg_6_314)))
 (let (($x734 (= src_reg_6_211 src_reg_6_313)))
 (let (($x733 (= src_reg_6_210 src_reg_6_312)))
 (let (($x732 (= src_reg_6_209 src_reg_6_311)))
 (let (($x731 (= src_reg_6_208 src_reg_6_310)))
 (let (($x730 (= src_reg_6_207 src_reg_6_309)))
 (let (($x729 (= src_reg_6_206 src_reg_6_308)))
 (let (($x728 (= src_reg_6_205 src_reg_6_307)))
 (let (($x727 (= src_reg_6_204 src_reg_6_306)))
 (let (($x726 (= src_reg_6_203 src_reg_6_305)))
 (let (($x725 (= src_reg_6_202 src_reg_6_304)))
 (let (($x724 (= src_reg_6_201 src_reg_6_303)))
 (let (($x723 (= src_reg_6_200 src_reg_6_302)))
 (let (($x806 (and $x723 $x724 $x725 $x726 $x727 $x728 $x729 $x730 $x731 $x732 $x733 $x734 $x735 $x736 $x737 $x738 $x739 $x740 $x741 $x742 $x743 $x744 $x745 $x746 $x747 $x748 $x749 $x750)))
 (let (($x807 (=> $x782 $x806)))
 (let (($x752 (and $x111 $x78)))
 (let (($x755 (and $x124 $x76)))
 (let (($x757 (or $x755 $x752)))
 (let (($x805 (=> $x757 $x804)))
 (let (($x865 (and $x805 $x807 $x808 $x823 $x824 $x825 $x826 $x827 $x828 $x829 $x830 $x831 $x832 $x833 $x834 $x835 $x836 $x851 $x852 $x853 $x854 $x855 $x856 $x857 $x858 $x859 $x860 $x861 $x862 $x863 $x864)))
 (let (($x783 (or $x782 (or $x760 $x757))))
 (let (($x866 (=> $x783 $x865)))
 (and $x866 $x868 $x870 $x872 $x874 $x876 $x878 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x79 $x81 $x880 $x882 $x884 $x886 $x888 $x890 $x892 $x894 $x896 $x898)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH/BPF_LSH.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH BPF_LSH.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH 6 BPF_LSH.smt2

Finished llvm_to_smt_pass
