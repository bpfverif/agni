(declare-fun cmp.i_48_16 () (_ BitVec 1))
(declare-fun i.i_48_14 () (_ BitVec 64))
(declare-fun dst_reg_48_6 () (_ BitVec 64))
(declare-fun dst_reg_48_13 () (_ BitVec 8))
(declare-fun dst_reg_48_12 () (_ BitVec 32))
(declare-fun dst_reg_48_11 () (_ BitVec 32))
(declare-fun dst_reg_48_10 () (_ BitVec 32))
(declare-fun dst_reg_48_9 () (_ BitVec 64))
(declare-fun dst_reg_48_8 () (_ BitVec 64))
(declare-fun dst_reg_48_7 () (_ BitVec 64))
(declare-fun dst_reg_48_5 () (_ BitVec 64))
(declare-fun dst_reg_48_4 () (_ BitVec 64))
(declare-fun dst_reg_48_3 () (_ BitVec 32))
(declare-fun dst_reg_48_2 () (_ BitVec 32))
(declare-fun dst_reg_48_1 () (_ BitVec 32))
(declare-fun dst_reg_48_0 () (_ BitVec 32))
(declare-fun i36.i_48_24 () (_ BitVec 64))
(declare-fun cond12.i_48_26 () (_ BitVec 64))
(declare-fun i35.i_48_23 () (_ BitVec 64))
(declare-fun cmp8.i_48_25 () (_ BitVec 1))
(declare-fun i34.i_48_20 () (_ BitVec 64))
(declare-fun cond.i_48_22 () (_ BitVec 64))
(declare-fun cmp3.i_48_21 () (_ BitVec 1))
(declare-fun cmp1.i_48_19 () (_ BitVec 1))
(declare-fun i33.i_48_17 () (_ BitVec 64))
(declare-fun i38.i_48_30 () (_ BitVec 64))
(declare-fun cmp16.i_48_29 () (_ BitVec 1))
(declare-fun i37.i_48_27 () (_ BitVec 64))
(declare-fun cond27.i_48_32 () (_ BitVec 64))
(declare-fun cmp23.i_48_31 () (_ BitVec 1))
(declare-fun cmp31.i_48_34 () (_ BitVec 1))
(declare-fun dst_reg_48_138 () (_ BitVec 8))
(declare-fun dst_reg_48_50 () (_ BitVec 8))
(declare-fun dst_reg_48_137 () (_ BitVec 32))
(declare-fun dst_reg_48_49 () (_ BitVec 32))
(declare-fun dst_reg_48_136 () (_ BitVec 32))
(declare-fun dst_reg_48_48 () (_ BitVec 32))
(declare-fun dst_reg_48_135 () (_ BitVec 32))
(declare-fun dst_reg_48_47 () (_ BitVec 32))
(declare-fun dst_reg_48_134 () (_ BitVec 64))
(declare-fun dst_reg_48_46 () (_ BitVec 64))
(declare-fun dst_reg_48_133 () (_ BitVec 64))
(declare-fun dst_reg_48_45 () (_ BitVec 64))
(declare-fun dst_reg_48_132 () (_ BitVec 64))
(declare-fun dst_reg_48_44 () (_ BitVec 64))
(declare-fun dst_reg_48_131 () (_ BitVec 64))
(declare-fun dst_reg_48_43 () (_ BitVec 64))
(declare-fun dst_reg_48_130 () (_ BitVec 64))
(declare-fun and.i1.i_48_121 () (_ BitVec 64))
(declare-fun dst_reg_48_129 () (_ BitVec 64))
(declare-fun and4.i.i_48_124 () (_ BitVec 64))
(declare-fun dst_reg_48_128 () (_ BitVec 32))
(declare-fun dst_reg_48_40 () (_ BitVec 32))
(declare-fun dst_reg_48_127 () (_ BitVec 32))
(declare-fun dst_reg_48_39 () (_ BitVec 32))
(declare-fun dst_reg_48_126 () (_ BitVec 32))
(declare-fun dst_reg_48_38 () (_ BitVec 32))
(declare-fun dst_reg_48_125 () (_ BitVec 32))
(declare-fun dst_reg_48_37 () (_ BitVec 32))
(declare-fun cmp.i.i.i_48_55 () (_ BitVec 1))
(declare-fun __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103 () Bool)
(declare-fun if.end.i.i.i___reg_bound_offset.exit_48_102 () Bool)
(declare-fun neg.i.i_48_123 () (_ BitVec 64))
(declare-fun or.i.i_48_120 () (_ BitVec 64))
(declare-fun i11.i_48_119 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i_48_117 () (_ BitVec 64))
(declare-fun i9.i_48_118 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i_48_115 () (_ BitVec 64))
(declare-fun sub.i.i_48_112 () (_ BitVec 64))
(declare-fun cmp.i.i_48_107 () (_ BitVec 1))
(declare-fun and.i.i_48_113 () (_ BitVec 64))
(declare-fun i.i2_48_51 () (_ BitVec 64))
(declare-fun notmask.i.i_48_110 () (_ BitVec 64))
(declare-fun sh_prom.i.i_48_108 () (_ BitVec 64))
(declare-fun retval.0.i.i.i_48_104 () (_ BitVec 32))
(declare-fun phi.bo_48_101 () (_ BitVec 32))
(declare-fun cond40.i_48_36 () (_ BitVec 64))
(declare-fun cmp36.i_48_35 () (_ BitVec 1))
(declare-fun dst_reg_48_42 () (_ BitVec 64))
(declare-fun dst_reg_48_41 () (_ BitVec 64))
(declare-fun xor.i.i_48_53 () (_ BitVec 64))
(declare-fun i5.i_48_52 () (_ BitVec 64))
(declare-fun add.i.i.i_48_99 () (_ BitVec 32))
(declare-fun i.i.i.i.i.neg_48_98 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i_48_95 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.neg_48_97 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i_48_94 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i_48_87 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i_48_91 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i_48_89 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i_48_86 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i_48_93 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i_48_79 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i_48_83 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i_48_81 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i_48_78 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i_48_85 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i_48_71 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i_48_75 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i_48_73 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i_48_70 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i_48_77 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i_48_63 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i_48_67 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i_48_65 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i_48_60 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i_48_69 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i_48_57 () (_ BitVec 1))
(declare-fun shl.i.i.i.i_48_59 () (_ BitVec 64))
(assert (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))))
      (a!2 (and (= cmp16.i_48_29 #b1)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))))
      (a!3 (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1)))
      (a!12 (=> (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
                (and (= dst_reg_48_9 i37.i_48_27)
                     (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
                          (= cmp16.i_48_29 #b1)
                          (= cmp16.i_48_29 #b0))
                     (= dst_reg_48_8 i38.i_48_30))))
      (a!13 (=> (= cmp.i_48_16 #b0)
                (and (= dst_reg_48_7 i33.i_48_17)
                     (ite (bvslt i33.i_48_17 #x0000000000000000)
                          (= cmp1.i_48_19 #b1)
                          (= cmp1.i_48_19 #b0))))))
(let ((a!4 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               a!2
               a!3))
      (a!6 (and (= dst_reg_48_45 i.i2_48_51)
                (= dst_reg_48_46 i5.i_48_52)
                (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
                (ite (= xor.i.i_48_53 #x0000000000000000)
                     (= cmp.i.i.i_48_55 #b1)
                     (= cmp.i.i.i_48_55 #b0))
                (=> a!3
                    (and (= dst_reg_48_0 dst_reg_48_37)
                         (= dst_reg_48_1 dst_reg_48_38)
                         (= dst_reg_48_2 dst_reg_48_39)
                         (= dst_reg_48_3 dst_reg_48_40)
                         (= dst_reg_48_4 dst_reg_48_41)
                         (= dst_reg_48_5 dst_reg_48_42)
                         (= cond.i_48_22 dst_reg_48_43)
                         (= cond12.i_48_26 dst_reg_48_44)
                         (= cond.i_48_22 dst_reg_48_45)
                         (= cond12.i_48_26 dst_reg_48_46)
                         (= dst_reg_48_10 dst_reg_48_47)
                         (= dst_reg_48_11 dst_reg_48_48)
                         (= dst_reg_48_12 dst_reg_48_49)
                         (= dst_reg_48_13 dst_reg_48_50)))
                (=> a!2
                    (and (= dst_reg_48_0 dst_reg_48_37)
                         (= dst_reg_48_1 dst_reg_48_38)
                         (= dst_reg_48_2 dst_reg_48_39)
                         (= dst_reg_48_3 dst_reg_48_40)
                         (= dst_reg_48_4 dst_reg_48_41)
                         (= dst_reg_48_5 dst_reg_48_42)
                         (= i38.i_48_30 dst_reg_48_43)
                         (= cond27.i_48_32 dst_reg_48_44)
                         (= dst_reg_48_8 dst_reg_48_45)
                         (= cond27.i_48_32 dst_reg_48_46)
                         (= dst_reg_48_10 dst_reg_48_47)
                         (= dst_reg_48_11 dst_reg_48_48)
                         (= dst_reg_48_12 dst_reg_48_49)
                         (= dst_reg_48_13 dst_reg_48_50)))
                (=> (and (= cmp31.i_48_34 #b0) a!1)
                    (and (= dst_reg_48_0 dst_reg_48_37)
                         (= dst_reg_48_1 dst_reg_48_38)
                         (= dst_reg_48_2 dst_reg_48_39)
                         (= dst_reg_48_3 dst_reg_48_40)
                         (= dst_reg_48_4 dst_reg_48_41)
                         (= dst_reg_48_5 dst_reg_48_42)
                         (= dst_reg_48_6 dst_reg_48_43)
                         (= dst_reg_48_7 dst_reg_48_44)
                         (= dst_reg_48_8 dst_reg_48_45)
                         (= dst_reg_48_9 dst_reg_48_46)
                         (= dst_reg_48_10 dst_reg_48_47)
                         (= dst_reg_48_11 dst_reg_48_48)
                         (= dst_reg_48_12 dst_reg_48_49)
                         (= dst_reg_48_13 dst_reg_48_50)))
                (=> (and (= cmp31.i_48_34 #b1) a!1)
                    (and (= dst_reg_48_0 dst_reg_48_37)
                         (= dst_reg_48_1 dst_reg_48_38)
                         (= dst_reg_48_2 dst_reg_48_39)
                         (= dst_reg_48_3 dst_reg_48_40)
                         (= dst_reg_48_4 dst_reg_48_41)
                         (= dst_reg_48_5 dst_reg_48_42)
                         (= cond40.i_48_36 dst_reg_48_43)
                         (= i37.i_48_27 dst_reg_48_44)
                         (= cond40.i_48_36 dst_reg_48_45)
                         (= dst_reg_48_9 dst_reg_48_46)
                         (= dst_reg_48_10 dst_reg_48_47)
                         (= dst_reg_48_11 dst_reg_48_48)
                         (= dst_reg_48_12 dst_reg_48_49)
                         (= dst_reg_48_13 dst_reg_48_50)))))
      (a!7 (=> (and (= cmp31.i_48_34 #b1) a!1)
               (and (ite (bvugt i.i_48_14 i38.i_48_30)
                         (= cmp36.i_48_35 #b1)
                         (= cmp36.i_48_35 #b0))
                    (ite (= cmp36.i_48_35 #b1)
                         (= cond40.i_48_36 i.i_48_14)
                         (= cond40.i_48_36 i38.i_48_30)))))
      (a!10 (=> a!1
                (and (ite (bvslt i38.i_48_30 #x0000000000000000)
                          (= cmp31.i_48_34 #b1)
                          (= cmp31.i_48_34 #b0)))))
      (a!11 (=> a!2
                (and (ite (bvult i33.i_48_17 i37.i_48_27)
                          (= cmp23.i_48_31 #b1)
                          (= cmp23.i_48_31 #b0))
                     (ite (= cmp23.i_48_31 #b1)
                          (= cond27.i_48_32 i33.i_48_17)
                          (= cond27.i_48_32 i37.i_48_27)))))
      (a!14 (=> a!3
                (and (= dst_reg_48_8 i34.i_48_20)
                     (ite (bvugt i.i_48_14 i34.i_48_20)
                          (= cmp3.i_48_21 #b1)
                          (= cmp3.i_48_21 #b0))
                     (ite (= cmp3.i_48_21 #b1)
                          (= cond.i_48_22 i.i_48_14)
                          (= cond.i_48_22 i34.i_48_20))
                     (= dst_reg_48_7 i35.i_48_23)
                     (= dst_reg_48_9 i36.i_48_24)
                     (ite (bvult i35.i_48_23 i36.i_48_24)
                          (= cmp8.i_48_25 #b1)
                          (= cmp8.i_48_25 #b0))
                     (ite (= cmp8.i_48_25 #b1)
                          (= cond12.i_48_26 i35.i_48_23)
                          (= cond12.i_48_26 i36.i_48_24))))))
(let ((a!5 (=> (and (= cmp.i.i.i_48_55 #b0) a!4)
               (and (ite (bvult xor.i.i_48_53 #x0000000100000000)
                         (= tobool.not.i.i.i.i_48_57 #b1)
                         (= tobool.not.i.i.i.i_48_57 #b0))
                    (= shl.i.i.i.i_48_59
                       (bvshl xor.i.i_48_53 #x0000000000000020))
                    (ite (= tobool.not.i.i.i.i_48_57 #b1)
                         (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
                         (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
                    (ite (= tobool.not.i.i.i.i_48_57 #b1)
                         (= spec.select17.i.i.i.i_48_63 #x0000001f)
                         (= spec.select17.i.i.i.i_48_63 #x0000003f))
                    (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
                         (= tobool2.not.i.i.i.i_48_65 #b1)
                         (= tobool2.not.i.i.i.i_48_65 #b0))
                    (= sub4.i.i.i.i_48_67
                       (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
                    (= shl5.i.i.i.i_48_69
                       (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
                    (ite (= tobool2.not.i.i.i.i_48_65 #b1)
                         (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
                         (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
                    (ite (= tobool2.not.i.i.i.i_48_65 #b1)
                         (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
                         (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
                    (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
                         (= tobool8.not.i.i.i.i_48_73 #b1)
                         (= tobool8.not.i.i.i.i_48_73 #b0))
                    (= sub10.i.i.i.i_48_75
                       (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
                    (= shl11.i.i.i.i_48_77
                       (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
                    (ite (= tobool8.not.i.i.i.i_48_73 #b1)
                         (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
                         (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
                    (ite (= tobool8.not.i.i.i.i_48_73 #b1)
                         (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
                         (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
                    (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
                         (= tobool14.not.i.i.i.i_48_81 #b1)
                         (= tobool14.not.i.i.i.i_48_81 #b0))
                    (= sub16.i.i.i.i_48_83
                       (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
                    (= shl17.i.i.i.i_48_85
                       (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
                    (ite (= tobool14.not.i.i.i.i_48_81 #b1)
                         (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
                         (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
                    (ite (= tobool14.not.i.i.i.i_48_81 #b1)
                         (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
                         (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
                    (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
                         (= tobool20.not.i.i.i.i_48_89 #b1)
                         (= tobool20.not.i.i.i.i_48_89 #b0))
                    (= sub22.i.i.i.i_48_91
                       (bvadd num.3.i.i.i.i_48_87 #x000000fe))
                    (= shl23.i.i.i.i_48_93
                       (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
                    (ite (= tobool20.not.i.i.i.i_48_89 #b1)
                         (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
                         (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
                    (ite (= tobool20.not.i.i.i.i_48_89 #b1)
                         (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
                         (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
                    (= word.addr.4.lobit.i.i.i.i.neg_48_97
                       (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
                    (= i.i.i.i.i.neg_48_98
                       ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
                    (= add.i.i.i_48_99
                       (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
                    (= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff)))))
      (a!8 (and (=> if.end.i.i.i___reg_bound_offset.exit_48_102
                    (= retval.0.i.i.i_48_104 phi.bo_48_101))
                (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
                    (= retval.0.i.i.i_48_104 #x00000000))
                (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
                     (= cmp.i.i_48_107 #b1)
                     (= cmp.i.i_48_107 #b0))
                (= sh_prom.i.i_48_108
                   ((_ zero_extend 32) retval.0.i.i.i_48_104))
                (= notmask.i.i_48_110
                   (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
                (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
                (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
                (ite (= cmp.i.i_48_107 #b1)
                     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
                     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
                (ite (= cmp.i.i_48_107 #b1)
                     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
                     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
                (= dst_reg_48_4 i9.i_48_118)
                (= dst_reg_48_5 i11.i_48_119)
                (= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))
                (= and.i1.i_48_121
                   (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))
                (= neg.i.i_48_123 (bvxor and.i1.i_48_121 #xffffffffffffffff))
                (= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))
                (= if.end.i.i.i___reg_bound_offset.exit_48_102
                   (and (= cmp.i.i.i_48_55 #b0) a!4))
                (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
                   (and (= cmp.i.i.i_48_55 #b1) a!4))
                (= dst_reg_48_37 dst_reg_48_125)
                (= dst_reg_48_38 dst_reg_48_126)
                (= dst_reg_48_39 dst_reg_48_127)
                (= dst_reg_48_40 dst_reg_48_128)
                (= and4.i.i_48_124 dst_reg_48_129)
                (= and.i1.i_48_121 dst_reg_48_130)
                (= dst_reg_48_43 dst_reg_48_131)
                (= dst_reg_48_44 dst_reg_48_132)
                (= dst_reg_48_45 dst_reg_48_133)
                (= dst_reg_48_46 dst_reg_48_134)
                (= dst_reg_48_47 dst_reg_48_135)
                (= dst_reg_48_48 dst_reg_48_136)
                (= dst_reg_48_49 dst_reg_48_137)
                (= dst_reg_48_50 dst_reg_48_138))))
(let ((a!9 (=> (or (and (= cmp.i.i.i_48_55 #b0) a!4)
                   (and (= cmp.i.i.i_48_55 #b1) a!4))
               a!8)))
  (and a!5
       (=> a!4 a!6)
       a!7
       a!9
       a!10
       a!11
       a!12
       a!13
       a!14
       (= dst_reg_48_0 dst_reg_48_0)
       (= dst_reg_48_1 dst_reg_48_1)
       (= dst_reg_48_2 dst_reg_48_2)
       (= dst_reg_48_3 dst_reg_48_3)
       (= dst_reg_48_4 dst_reg_48_4)
       (= dst_reg_48_5 dst_reg_48_5)
       (= dst_reg_48_6 dst_reg_48_6)
       (= dst_reg_48_7 dst_reg_48_7)
       (= dst_reg_48_8 dst_reg_48_8)
       (= dst_reg_48_9 dst_reg_48_9)
       (= dst_reg_48_10 dst_reg_48_10)
       (= dst_reg_48_11 dst_reg_48_11)
       (= dst_reg_48_12 dst_reg_48_12)
       (= dst_reg_48_13 dst_reg_48_13)
       (= dst_reg_48_6 i.i_48_14)
       (ite (bvsgt i.i_48_14 #xffffffffffffffff)
            (= cmp.i_48_16 #b1)
            (= cmp.i_48_16 #b0))))))))

;{"dst_reg":["dst_reg_48_0",[""],"dst_reg_48_1","dst_reg_48_2","dst_reg_48_3",["dst_reg_48_4","dst_reg_48_5"],"dst_reg_48_6","dst_reg_48_7","dst_reg_48_8","dst_reg_48_9","","","dst_reg_48_10","dst_reg_48_11","dst_reg_48_12"]}
;{"dst_reg":["dst_reg_48_125",[""],"dst_reg_48_126","dst_reg_48_127","dst_reg_48_128",["dst_reg_48_129","dst_reg_48_130"],"dst_reg_48_131","dst_reg_48_132","dst_reg_48_133","dst_reg_48_134","","","dst_reg_48_135","dst_reg_48_136","dst_reg_48_137"]}
