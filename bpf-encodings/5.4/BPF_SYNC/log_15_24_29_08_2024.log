Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: reg_bounds_sync___
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: reg_bounds_sync___
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x27573f0
Call graph node for function: 'reg_bounds_sync___'<<0x27573f0>>  #uses=1
  CS<0x251c460> calls function '__reg_deduce_bounds'
  CS<0x251c650> calls function '__reg_bound_offset'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.ll reg_bounds_sync___ /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: reg_bounds_sync___
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'reg_bounds_sync___'<<0x1533020>>  #uses=1
  CS<0x13134a0> calls function '__reg_deduce_bounds'
  CS<0x1313690> calls function '__reg_bound_offset'

---------------------------
Functions to Inline:
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
reg_bounds_sync___
---------------------------
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
reg_bounds_sync___
********
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #21
1
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ll reg_bounds_sync___ /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: reg_bounds_sync___
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Removing dead memcpys in reg_bounds_sync___:

############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.ll reg_bounds_sync___ /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: reg_bounds_sync___
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll reg_bounds_sync___ /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: reg_bounds_sync___
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'reg_bounds_sync___'<<0xaf5f20>>  #uses=1

---------------------------
Functions to Inline:
reg_bounds_sync___
---------------------------
********
reg_bounds_sync___
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll reg_bounds_sync___ /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=reg_bounds_sync___ -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.smt2
FUNCTION_UNDER_EVAL: reg_bounds_sync___
GLOBAL_BITVECTOR_SUFFIX: 48
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_0
[lookInsideStruct] singleValueType:dst_reg_48_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_1
[lookInsideStruct] singleValueType:dst_reg_48_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_2
[lookInsideStruct] singleValueType:dst_reg_48_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_3
[lookInsideStruct] singleValueType:dst_reg_48_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_4
[lookInsideStruct] singleValueType:dst_reg_48_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_5
[lookInsideStruct] singleValueType:dst_reg_48_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_6
[lookInsideStruct] singleValueType:dst_reg_48_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_7
[lookInsideStruct] singleValueType:dst_reg_48_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_8
[lookInsideStruct] singleValueType:dst_reg_48_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_9
[lookInsideStruct] singleValueType:dst_reg_48_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_10
[lookInsideStruct] singleValueType:dst_reg_48_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_11
[lookInsideStruct] singleValueType:dst_reg_48_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_12
[lookInsideStruct] singleValueType:dst_reg_48_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_13
[lookInsideStruct] singleValueType:dst_reg_48_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i, dst_reg, [6]
-------------------
  %i.i = load i64, i64* %smin_value.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i = load i64, i64* %smin_value.i, align 8
[handleLoadInst] pointerValue:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i_48_14
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i_48_14
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_6 i.i_48_14)
[printBBAssertionsMap] 
BasicBlock: entry, Size:15
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)

-------------------
  %cmp.i = icmp sgt i64 %i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i_48_14
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i = icmp sgt i64 %i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i_48_16
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i_48_16
[handleICmpInst] (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i
=========================
-------------------
  %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
-------------------
  %i33.i = load i64, i64* %smax_value.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i = load i64, i64* %smax_value.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i33.i = load i64, i64* %smax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i_48_17
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i_48_17
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_7 i33.i_48_17)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:1
  (= dst_reg_48_7 i33.i_48_17)
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cmp1.i = icmp slt i64 %i33.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i = load i64, i64* %smax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i_48_17
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i = icmp slt i64 %i33.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i_48_19
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i_48_19
[handleICmpInst] (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  br i1 %cmp1.i, label %if.then.i, label %if.end.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i
=========================
-------------------
  %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
-------------------
  %i34.i = load i64, i64* %umin_value.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i = load i64, i64* %umin_value.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i34.i = load i64, i64* %umin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i_48_20
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i_48_20
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_8 i34.i_48_20)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:1
  (= dst_reg_48_8 i34.i_48_20)
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cmp3.i = icmp ugt i64 %i.i, %i34.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i_48_14
[getBitVecSingValType]   %i34.i = load i64, i64* %umin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i_48_20
[getBitVecSingValType]   %cmp3.i = icmp ugt i64 %i.i, %i34.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i_48_21
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i_48_21
[handleICmpInst] (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:2
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cond.i = select i1 %cmp3.i, i64 %i.i, i64 %i34.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 0 = MemoryDef(liveOnEntry)
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleSelectInst]SelectMap:
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i = icmp ugt i64 %i.i, %i34.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i_48_21
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i_48_14
[getBitVecSingValType]   %i34.i = load i64, i64* %umin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i_48_20
[getBitVecSingValType]   %cond.i = select i1 %cmp3.i, i64 %i.i, i64 %i34.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i_48_22
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i_48_22
[handleSelectInst] z3ExprSelectOp1: cmp3.i_48_21
[handleSelectInst] z3ExprSelectOp2: i.i_48_14
[handleSelectInst] z3ExprSelectOp3: i34.i_48_20
[handleSelectInst] z3ExprRes: cond.i_48_22
[handleSelectInst](ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
-------------------
  store i64 %cond.i, i64* %umin_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i = select i1 %cmp3.i, i64 %i.i, i64 %i34.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i_48_22
[handleStoreInst] BVToStore: cond.i_48_22
[handleStoreInst] destPointerValue:   %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i_48_22 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %cond.i, i64* %smin_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i = select i1 %cmp3.i, i64 %i.i, i64 %i34.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i_48_22
[handleStoreInst] BVToStore: cond.i_48_22
[handleStoreInst] destPointerValue:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i_48_22 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value6.i, dst_reg, [7]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
-------------------
  %i35.i = load i64, i64* %smax_value6.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i = load i64, i64* %smax_value6.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i, dst_reg, [7]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i35.i = load i64, i64* %smax_value6.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i_48_23
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i_48_23
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_7 i35.i_48_23)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:4
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
-------------------
  %i36.i = load i64, i64* %umax_value.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i = load i64, i64* %umax_value.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i36.i = load i64, i64* %umax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i_48_24
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i_48_24
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_9 i36.i_48_24)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:5
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cmp8.i = icmp ult i64 %i35.i, %i36.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i = load i64, i64* %smax_value6.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i_48_23
[getBitVecSingValType]   %i36.i = load i64, i64* %umax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i_48_24
[getBitVecSingValType]   %cmp8.i = icmp ult i64 %i35.i, %i36.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i_48_25
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i_48_25
[handleICmpInst] (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:6
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleSelectInst]SelectMap:
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i = icmp ult i64 %i35.i, %i36.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i_48_25
[getBitVecSingValType]   %i35.i = load i64, i64* %smax_value6.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i_48_23
[getBitVecSingValType]   %i36.i = load i64, i64* %umax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i_48_24
[getBitVecSingValType]   %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i_48_26
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i_48_26
[handleSelectInst] z3ExprSelectOp1: cmp8.i_48_25
[handleSelectInst] z3ExprSelectOp2: i35.i_48_23
[handleSelectInst] z3ExprSelectOp3: i36.i_48_24
[handleSelectInst] z3ExprRes: cond12.i_48_26
[handleSelectInst](ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
-------------------
  store i64 %cond12.i, i64* %umax_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i_48_26
[handleStoreInst] BVToStore: cond12.i_48_26
[handleStoreInst] destPointerValue:   %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i_48_26 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %cond12.i, i64* %smax_value6.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i_48_26
[handleStoreInst] BVToStore: cond12.i_48_26
[handleStoreInst] destPointerValue:   %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i_48_26 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i
=========================
-------------------
  %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
-------------------
  %i37.i = load i64, i64* %umax_value15.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i = load i64, i64* %umax_value15.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i37.i = load i64, i64* %umax_value15.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i_48_27
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i_48_27
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_9 i37.i_48_27)
[printBBAssertionsMap] 
BasicBlock: if.end.i, Size:1
  (= dst_reg_48_9 i37.i_48_27)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cmp16.i = icmp sgt i64 %i37.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i = load i64, i64* %umax_value15.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i_48_27
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i = icmp sgt i64 %i37.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i_48_29
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i_48_29
[handleICmpInst] (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i, Size:2
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
-------------------
  %i38.i = load i64, i64* %umin_value18.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i = load i64, i64* %umin_value18.i, align 8
[handleLoadInst] pointerValue:   %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i, dst_reg, [9]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i38.i = load i64, i64* %umin_value18.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i_48_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i_48_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_8 i38.i_48_30)
[printBBAssertionsMap] 
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  br i1 %cmp16.i, label %if.then17.i, label %if.else.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i
=========================
-------------------
  store i64 %i38.i, i64* %smin_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i = load i64, i64* %umin_value18.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i_48_30
[handleStoreInst] BVToStore: i38.i_48_30
[handleStoreInst] destPointerValue:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i_48_30 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  %cmp23.i = icmp ult i64 %i33.i, %i37.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i = load i64, i64* %smax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i_48_17
[getBitVecSingValType]   %i37.i = load i64, i64* %umax_value15.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i_48_27
[getBitVecSingValType]   %cmp23.i = icmp ult i64 %i33.i, %i37.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i_48_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i_48_31
[handleICmpInst] (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then17.i, Size:1
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 5 = MemoryDef(liveOnEntry)
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleSelectInst]SelectMap:
cond27.i,i33.i,i37.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i = icmp ult i64 %i33.i, %i37.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i_48_31
[getBitVecSingValType]   %i33.i = load i64, i64* %smax_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i_48_17
[getBitVecSingValType]   %i37.i = load i64, i64* %umax_value15.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i_48_27
[getBitVecSingValType]   %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i_48_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i_48_32
[handleSelectInst] z3ExprSelectOp1: cmp23.i_48_31
[handleSelectInst] z3ExprSelectOp2: i33.i_48_17
[handleSelectInst] z3ExprSelectOp3: i37.i_48_27
[handleSelectInst] z3ExprRes: cond27.i_48_32
[handleSelectInst](ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
-------------------
  store i64 %cond27.i, i64* %umax_value15.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i_48_32
[handleStoreInst] BVToStore: cond27.i_48_32
[handleStoreInst] destPointerValue:   %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i_48_32 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %cond27.i, i64* %smax_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i_48_32
[handleStoreInst] BVToStore: cond27.i_48_32
[handleStoreInst] destPointerValue:   %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i_48_32 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i
=========================
-------------------
  %cmp31.i = icmp slt i64 %i38.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i = load i64, i64* %umin_value18.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i_48_30
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i = icmp slt i64 %i38.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i_48_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i_48_34
[handleICmpInst] (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  br i1 %cmp31.i, label %if.then32.i, label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i
=========================
-------------------
  %cmp36.i = icmp ugt i64 %i.i, %i38.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i_48_14
[getBitVecSingValType]   %i38.i = load i64, i64* %umin_value18.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i_48_30
[getBitVecSingValType]   %cmp36.i = icmp ugt i64 %i.i, %i38.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i_48_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i_48_35
[handleICmpInst] (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i, Size:1
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %cond40.i = select i1 %cmp36.i, i64 %i.i, i64 %i38.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 7 = MemoryDef(6)
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleSelectInst]SelectMap:
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i = icmp ugt i64 %i.i, %i38.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i_48_35
[getBitVecSingValType]   %i.i = load i64, i64* %smin_value.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i_48_14
[getBitVecSingValType]   %i38.i = load i64, i64* %umin_value18.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i_48_30
[getBitVecSingValType]   %cond40.i = select i1 %cmp36.i, i64 %i.i, i64 %i38.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i_48_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i_48_36
[handleSelectInst] z3ExprSelectOp1: cmp36.i_48_35
[handleSelectInst] z3ExprSelectOp2: i.i_48_14
[handleSelectInst] z3ExprSelectOp3: i38.i_48_30
[handleSelectInst] z3ExprRes: cond40.i_48_36
[handleSelectInst](ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
-------------------
  store i64 %cond40.i, i64* %umin_value18.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i = select i1 %cmp36.i, i64 %i.i, i64 %i38.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i_48_36
[handleStoreInst] BVToStore: cond40.i_48_36
[handleStoreInst] destPointerValue:   %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i_48_36 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %cond40.i, i64* %smin_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i = select i1 %cmp36.i, i64 %i.i, i64 %i38.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i_48_36
[handleStoreInst] BVToStore: cond40.i_48_36
[handleStoreInst] destPointerValue:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i_48_36 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %i37.i, i64* %smax_value.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i = load i64, i64* %umax_value15.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i_48_27
[handleStoreInst] BVToStore: i37.i_48_27
[handleStoreInst] destPointerValue:   %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i_48_27 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_37
[lookInsideStruct] singleValueType:dst_reg_48_37
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_38
[lookInsideStruct] singleValueType:dst_reg_48_38
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_39
[lookInsideStruct] singleValueType:dst_reg_48_39
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_40
[lookInsideStruct] singleValueType:dst_reg_48_40
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_41
[lookInsideStruct] singleValueType:dst_reg_48_41
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_42
[lookInsideStruct] singleValueType:dst_reg_48_42
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_43
[lookInsideStruct] singleValueType:dst_reg_48_43
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_44
[lookInsideStruct] singleValueType:dst_reg_48_44
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_45
[lookInsideStruct] singleValueType:dst_reg_48_45
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_46
[lookInsideStruct] singleValueType:dst_reg_48_46
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_47
[lookInsideStruct] singleValueType:dst_reg_48_47
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_48
[lookInsideStruct] singleValueType:dst_reg_48_48
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_49
[lookInsideStruct] singleValueType:dst_reg_48_49
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_50
[lookInsideStruct] singleValueType:dst_reg_48_50
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i
[handleMemoryPhiNode] incomingAccessI: 4 = MemoryDef(3)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= dst_reg_48_0 dst_reg_48_37)
(= dst_reg_48_1 dst_reg_48_38)
(= dst_reg_48_2 dst_reg_48_39)
(= dst_reg_48_3 dst_reg_48_40)
(= dst_reg_48_4 dst_reg_48_41)
(= dst_reg_48_5 dst_reg_48_42)
(= cond.i_48_22 dst_reg_48_43)
(= cond12.i_48_26 dst_reg_48_44)
(= cond.i_48_22 dst_reg_48_45)
(= cond12.i_48_26 dst_reg_48_46)
(= dst_reg_48_10 dst_reg_48_47)
(= dst_reg_48_11 dst_reg_48_48)
(= dst_reg_48_12 dst_reg_48_49)
(= dst_reg_48_13 dst_reg_48_50)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i
[handleMemoryPhiNode] incomingAccessI: 7 = MemoryDef(6)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= dst_reg_48_0 dst_reg_48_37)
(= dst_reg_48_1 dst_reg_48_38)
(= dst_reg_48_2 dst_reg_48_39)
(= dst_reg_48_3 dst_reg_48_40)
(= dst_reg_48_4 dst_reg_48_41)
(= dst_reg_48_5 dst_reg_48_42)
(= i38.i_48_30 dst_reg_48_43)
(= cond27.i_48_32 dst_reg_48_44)
(= dst_reg_48_8 dst_reg_48_45)
(= cond27.i_48_32 dst_reg_48_46)
(= dst_reg_48_10 dst_reg_48_47)
(= dst_reg_48_11 dst_reg_48_48)
(= dst_reg_48_12 dst_reg_48_49)
(= dst_reg_48_13 dst_reg_48_50)
]
[handleMemoryPhiNode] incomingBBI: if.else.i
[handleMemoryPhiNode] incomingAccessI: 0 = MemoryDef(liveOnEntry)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= dst_reg_48_0 dst_reg_48_37)
(= dst_reg_48_1 dst_reg_48_38)
(= dst_reg_48_2 dst_reg_48_39)
(= dst_reg_48_3 dst_reg_48_40)
(= dst_reg_48_4 dst_reg_48_41)
(= dst_reg_48_5 dst_reg_48_42)
(= dst_reg_48_6 dst_reg_48_43)
(= dst_reg_48_7 dst_reg_48_44)
(= dst_reg_48_8 dst_reg_48_45)
(= dst_reg_48_9 dst_reg_48_46)
(= dst_reg_48_10 dst_reg_48_47)
(= dst_reg_48_11 dst_reg_48_48)
(= dst_reg_48_12 dst_reg_48_49)
(= dst_reg_48_13 dst_reg_48_50)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= dst_reg_48_0 dst_reg_48_37)
(= dst_reg_48_1 dst_reg_48_38)
(= dst_reg_48_2 dst_reg_48_39)
(= dst_reg_48_3 dst_reg_48_40)
(= dst_reg_48_4 dst_reg_48_41)
(= dst_reg_48_5 dst_reg_48_42)
(= cond40.i_48_36 dst_reg_48_43)
(= i37.i_48_27 dst_reg_48_44)
(= cond40.i_48_36 dst_reg_48_45)
(= dst_reg_48_9 dst_reg_48_46)
(= dst_reg_48_10 dst_reg_48_47)
(= dst_reg_48_11 dst_reg_48_48)
(= dst_reg_48_12 dst_reg_48_49)
(= dst_reg_48_13 dst_reg_48_50)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i, __reg_deduce_bounds.exit> :
  (= dst_reg_48_0 dst_reg_48_37)
  (= dst_reg_48_1 dst_reg_48_38)
  (= dst_reg_48_2 dst_reg_48_39)
  (= dst_reg_48_3 dst_reg_48_40)
  (= dst_reg_48_4 dst_reg_48_41)
  (= dst_reg_48_5 dst_reg_48_42)
  (= cond40.i_48_36 dst_reg_48_43)
  (= i37.i_48_27 dst_reg_48_44)
  (= cond40.i_48_36 dst_reg_48_45)
  (= dst_reg_48_9 dst_reg_48_46)
  (= dst_reg_48_10 dst_reg_48_47)
  (= dst_reg_48_11 dst_reg_48_48)
  (= dst_reg_48_12 dst_reg_48_49)
  (= dst_reg_48_13 dst_reg_48_50)
<if.else.i, __reg_deduce_bounds.exit> :
  (= dst_reg_48_0 dst_reg_48_37)
  (= dst_reg_48_1 dst_reg_48_38)
  (= dst_reg_48_2 dst_reg_48_39)
  (= dst_reg_48_3 dst_reg_48_40)
  (= dst_reg_48_4 dst_reg_48_41)
  (= dst_reg_48_5 dst_reg_48_42)
  (= dst_reg_48_6 dst_reg_48_43)
  (= dst_reg_48_7 dst_reg_48_44)
  (= dst_reg_48_8 dst_reg_48_45)
  (= dst_reg_48_9 dst_reg_48_46)
  (= dst_reg_48_10 dst_reg_48_47)
  (= dst_reg_48_11 dst_reg_48_48)
  (= dst_reg_48_12 dst_reg_48_49)
  (= dst_reg_48_13 dst_reg_48_50)
<if.then17.i, __reg_deduce_bounds.exit> :
  (= dst_reg_48_0 dst_reg_48_37)
  (= dst_reg_48_1 dst_reg_48_38)
  (= dst_reg_48_2 dst_reg_48_39)
  (= dst_reg_48_3 dst_reg_48_40)
  (= dst_reg_48_4 dst_reg_48_41)
  (= dst_reg_48_5 dst_reg_48_42)
  (= i38.i_48_30 dst_reg_48_43)
  (= cond27.i_48_32 dst_reg_48_44)
  (= dst_reg_48_8 dst_reg_48_45)
  (= cond27.i_48_32 dst_reg_48_46)
  (= dst_reg_48_10 dst_reg_48_47)
  (= dst_reg_48_11 dst_reg_48_48)
  (= dst_reg_48_12 dst_reg_48_49)
  (= dst_reg_48_13 dst_reg_48_50)
<if.then.i, __reg_deduce_bounds.exit> :
  (= dst_reg_48_0 dst_reg_48_37)
  (= dst_reg_48_1 dst_reg_48_38)
  (= dst_reg_48_2 dst_reg_48_39)
  (= dst_reg_48_3 dst_reg_48_40)
  (= dst_reg_48_4 dst_reg_48_41)
  (= dst_reg_48_5 dst_reg_48_42)
  (= cond.i_48_22 dst_reg_48_43)
  (= cond12.i_48_26 dst_reg_48_44)
  (= cond.i_48_22 dst_reg_48_45)
  (= cond12.i_48_26 dst_reg_48_46)
  (= dst_reg_48_10 dst_reg_48_47)
  (= dst_reg_48_11 dst_reg_48_48)
  (= dst_reg_48_12 dst_reg_48_49)
  (= dst_reg_48_13 dst_reg_48_50)
-------------------
  %umin_value.i1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
-------------------
  %i.i2 = load i64, i64* %umin_value.i1, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i2 = load i64, i64* %umin_value.i1, align 8
[handleLoadInst] pointerValue:   %umin_value.i1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i.i2 = load i64, i64* %umin_value.i1, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i2_48_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i2_48_51
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleLoadInst] (= dst_reg_48_45 i.i2_48_51)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit, Size:1
  (= dst_reg_48_45 i.i2_48_51)
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %umax_value.i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
-------------------
  %i5.i = load i64, i64* %umax_value.i3, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i = load i64, i64* %umax_value.i3, align 8
[handleLoadInst] pointerValue:   %umax_value.i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i5.i = load i64, i64* %umax_value.i3, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i_48_52
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i_48_52
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleLoadInst] (= dst_reg_48_46 i5.i_48_52)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit, Size:2
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %xor.i.i = xor i64 %i5.i, %i.i2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i = load i64, i64* %umax_value.i3, align 8
[handleBinaryOperatorInst] op1Val:   %i.i2 = load i64, i64* %umin_value.i1, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType]   %i5.i = load i64, i64* %umax_value.i3, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i_48_52
[getBitVecSingValType]   %i.i2 = load i64, i64* %umin_value.i1, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i2_48_51
[getBitVecSingValType]   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i_48_53
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i_48_53
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
-------------------
  %cmp.i.i.i = icmp eq i64 %xor.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_48_53
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i = icmp eq i64 %xor.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_48_55
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_48_55
[handleICmpInst] (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  br i1 %cmp.i.i.i, label %__reg_bound_offset.exit, label %if.end.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_48_53
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i_48_57
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i_48_57
[handleICmpInst] (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:1
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %shl.i.i.i.i = shl i64 %xor.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i = xor i64 %i5.i, %i.i2
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i = shl i64 %xor.i.i, 32
[getBitVecSingValType]   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_48_53
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i = shl i64 %xor.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i_48_59
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i_48_59
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i_48_57
[getBitVecSingValType]   %shl.i.i.i.i = shl i64 %xor.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i_48_59
[getBitVecSingValType]   %xor.i.i = xor i64 %i5.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_48_53
[getBitVecSingValType]   %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i_48_60
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i_48_60
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i_48_57
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i_48_59
[handleSelectInst] z3ExprSelectOp3: xor.i.i_48_53
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i_48_60
[handleSelectInst](ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
-------------------
  %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i_48_57
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i_48_63
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i_48_63
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i_48_57
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i_48_63
[handleSelectInst](ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i_48_60
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i_48_65
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i_48_65
[handleICmpInst] (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:5
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i_48_63
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i_48_67
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i_48_67
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
-------------------
  %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i_48_60
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i_48_69
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i_48_69
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i_48_65
[getBitVecSingValType]   %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i_48_69
[getBitVecSingValType]   %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i_48_60
[getBitVecSingValType]   %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i_48_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i_48_70
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i_48_65
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i_48_69
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i_48_60
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i_48_70
[handleSelectInst](ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
-------------------
  %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i_48_65
[getBitVecSingValType]   %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i_48_67
[getBitVecSingValType]   %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i_48_63
[getBitVecSingValType]   %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i_48_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i_48_71
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i_48_65
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i_48_67
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i_48_63
[handleSelectInst] z3ExprRes: num.1.i.i.i.i_48_71
[handleSelectInst](ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
-------------------
  %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i_48_70
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i_48_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i_48_73
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:10
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i_48_71
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i_48_75
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i_48_75
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
-------------------
  %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i_48_70
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i_48_77
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i_48_77
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i_48_73
[getBitVecSingValType]   %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i_48_77
[getBitVecSingValType]   %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i_48_70
[getBitVecSingValType]   %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i_48_78
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i_48_78
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i_48_73
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i_48_77
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i_48_70
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i_48_78
[handleSelectInst](ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
-------------------
  %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i_48_73
[getBitVecSingValType]   %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i_48_75
[getBitVecSingValType]   %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i_48_71
[getBitVecSingValType]   %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i_48_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i_48_79
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i_48_73
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i_48_75
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i_48_71
[handleSelectInst] z3ExprRes: num.2.i.i.i.i_48_79
[handleSelectInst](ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
-------------------
  %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i_48_78
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i_48_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i_48_81
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:15
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i_48_79
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i_48_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i_48_83
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
-------------------
  %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i_48_78
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i_48_85
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i_48_85
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i_48_81
[getBitVecSingValType]   %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i_48_85
[getBitVecSingValType]   %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i_48_78
[getBitVecSingValType]   %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i_48_86
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i_48_86
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i_48_81
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i_48_85
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i_48_78
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i_48_86
[handleSelectInst](ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
-------------------
  %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
num.3.i.i.i.i,sub16.i.i.i.i,num.2.i.i.i.i
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i_48_81
[getBitVecSingValType]   %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i_48_83
[getBitVecSingValType]   %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i_48_79
[getBitVecSingValType]   %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i_48_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i_48_87
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i_48_81
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i_48_83
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i_48_79
[handleSelectInst] z3ExprRes: num.3.i.i.i.i_48_87
[handleSelectInst](ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
-------------------
  %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i_48_86
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i_48_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i_48_89
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:20
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
  (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
  (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
  (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i_48_87
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i_48_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i_48_91
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 #x000000fe))
-------------------
  %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i_48_86
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i_48_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i_48_93
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
word.addr.4.i.i.i.i,shl23.i.i.i.i,word.addr.3.i.i.i.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
spec.select17.i.i.i.i,,
num.3.i.i.i.i,sub16.i.i.i.i,num.2.i.i.i.i
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
cond27.i,i33.i,i37.i
cond40.i,i.i,i38.i
cond12.i,i35.i,i36.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond.i,i.i,i34.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i_48_89
[getBitVecSingValType]   %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i_48_93
[getBitVecSingValType]   %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i_48_86
[getBitVecSingValType]   %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i_48_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i_48_94
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i_48_89
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i_48_93
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i_48_86
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i_48_94
[handleSelectInst](ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
     (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
-------------------
  %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
cond.i,i.i,i34.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond40.i,i.i,i38.i
cond27.i,i33.i,i37.i
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
num.3.i.i.i.i,sub16.i.i.i.i,num.2.i.i.i.i
spec.select17.i.i.i.i,,
word.addr.4.i.i.i.i,shl23.i.i.i.i,word.addr.3.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
cond12.i,i35.i,i36.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.4.i.i.i.i,sub22.i.i.i.i,num.3.i.i.i.i
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i_48_89
[getBitVecSingValType]   %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i_48_91
[getBitVecSingValType]   %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i_48_87
[getBitVecSingValType]   %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i_48_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i_48_95
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i_48_89
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i_48_91
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i_48_87
[handleSelectInst] z3ExprRes: num.4.i.i.i.i_48_95
[handleSelectInst](ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
     (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
-------------------
  %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i_48_94
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.neg_48_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.neg_48_97
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.neg_48_97
   (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
-------------------
  %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.neg_48_97
[getBitVecSingValType]   %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.neg_48_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.neg_48_98
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
-------------------
  %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i_48_95
[getBitVecSingValType]   %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.neg_48_98
[getBitVecSingValType]   %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i_48_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i_48_99
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
-------------------
  %phi.bo = and i32 %add.i.i.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i, 255
[getBitVecSingValType]   %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i_48_99
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_48_101
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_48_101
[handleBinaryOperatorInst] AND instruction
(= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit
=========================
-------------------
  %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i___reg_bound_offset.exit_48_102
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i___reg_bound_offset.exit_48_102
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i : [<phi.bo, if.end.i.i.i>, <, __reg_deduce_bounds.exit>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit, __reg_bound_offset.exit>: __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
<if.end.i.i.i, __reg_bound_offset.exit>: if.end.i.i.i___reg_bound_offset.exit_48_102
[getBitVecSingValType]   %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i_48_104
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i_48_104
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_48_101
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i___reg_bound_offset.exit_48_102
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))

-------------------
  %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i_48_104
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_48_107
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_48_107
[handleICmpInst] (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:28
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
  (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
  (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
  (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
  (= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 #x000000fe))
  (= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
     (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
     (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
  (= word.addr.4.lobit.i.i.i.i.neg_48_97
   (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
  (= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
  (= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
  (= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: __reg_bound_offset.exit, Size:3
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i_48_104
[getBitVecSingValType]   %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i_48_108
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i_48_108
[handleCastInst]ZEXT instruction
(= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
-------------------
  %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i_48_108
[getBitVecSingValType]   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i_48_110
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i_48_110
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
-------------------
  %sub.i.i = xor i64 %notmask.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i = xor i64 %notmask.i.i, -1
[getBitVecSingValType]   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i_48_110
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i = xor i64 %notmask.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i_48_112
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i_48_112
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
-------------------
  %and.i.i = and i64 %notmask.i.i, %i.i2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val:   %i.i2 = load i64, i64* %umin_value.i1, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i = and i64 %notmask.i.i, %i.i2
[getBitVecSingValType]   %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i_48_110
[getBitVecSingValType]   %i.i2 = load i64, i64* %umin_value.i1, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i2_48_51
[getBitVecSingValType]   %and.i.i = and i64 %notmask.i.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i_48_113
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i_48_113
[handleBinaryOperatorInst] AND instruction
(= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
-------------------
  %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i,,and.i.i
cond.i,i.i,i34.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond40.i,i.i,i38.i
cond27.i,i33.i,i37.i
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
num.3.i.i.i.i,sub16.i.i.i.i,num.2.i.i.i.i
spec.select17.i.i.i.i,,
word.addr.4.i.i.i.i,shl23.i.i.i.i,word.addr.3.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
cond12.i,i35.i,i36.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.4.i.i.i.i,sub22.i.i.i.i,num.3.i.i.i.i
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_48_107
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i = and i64 %notmask.i.i, %i.i2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i_48_113
[getBitVecSingValType]   %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i_48_115
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i_48_115
[handleSelectInst] z3ExprSelectOp1: cmp.i.i_48_107
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i_48_113
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i_48_115
[handleSelectInst](ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
-------------------
  %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.3.0.i.i,,sub.i.i
retval.sroa.0.0.i.i,,and.i.i
cond.i,i.i,i34.i
word.addr.2.i.i.i.i,shl11.i.i.i.i,word.addr.1.i.i.i.i
cond40.i,i.i,i38.i
cond27.i,i33.i,i37.i
spec.select.i.i.i.i,shl.i.i.i.i,xor.i.i
num.3.i.i.i.i,sub16.i.i.i.i,num.2.i.i.i.i
spec.select17.i.i.i.i,,
word.addr.4.i.i.i.i,shl23.i.i.i.i,word.addr.3.i.i.i.i
num.1.i.i.i.i,sub4.i.i.i.i,spec.select17.i.i.i.i
cond12.i,i35.i,i36.i
word.addr.1.i.i.i.i,shl5.i.i.i.i,spec.select.i.i.i.i
num.2.i.i.i.i,sub10.i.i.i.i,num.1.i.i.i.i
num.4.i.i.i.i,sub22.i.i.i.i,num.3.i.i.i.i
word.addr.3.i.i.i.i,shl17.i.i.i.i,word.addr.2.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_48_107
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i = xor i64 %notmask.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i_48_112
[getBitVecSingValType]   %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i_48_117
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i_48_117
[handleSelectInst] z3ExprSelectOp1: cmp.i.i_48_107
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i_48_112
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i_48_117
[handleSelectInst](ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
-------------------
  %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
i8.i, dst_reg, [5, 0]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
-------------------
  %i9.i = load i64, i64* %i8.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i = load i64, i64* %i8.i, align 8
[handleLoadInst] pointerValue:   %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
i8.i, dst_reg, [5, 0]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i9.i = load i64, i64* %i8.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i_48_118
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i_48_118
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_4 i9.i_48_118)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:28
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
  (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
  (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
  (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
  (= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 #x000000fe))
  (= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
     (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
     (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
  (= word.addr.4.lobit.i.i.i.i.neg_48_97
   (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
  (= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
  (= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
  (= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: __reg_bound_offset.exit, Size:10
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
  (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
  (= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
  (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
  (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
  (= dst_reg_48_4 i9.i_48_118)
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i10.i, dst_reg, [5, 1]
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
i8.i, dst_reg, [5, 0]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
-------------------
  %i11.i = load i64, i64* %i10.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i = load i64, i64* %i10.i, align 8
[handleLoadInst] pointerValue:   %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 0 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i10.i, dst_reg, [5, 1]
umax_value.i3, dst_reg, [9]
umax_value.i, dst_reg, [9]
umin_value.i1, dst_reg, [8]
smax_value6.i, dst_reg, [7]
umax_value15.i, dst_reg, [9]
umin_value.i, dst_reg, [8]
smax_value.i, dst_reg, [7]
i8.i, dst_reg, [5, 0]
umin_value18.i, dst_reg, [8]
smin_value.i, dst_reg, [6]
[getBitVecSingValType]   %i11.i = load i64, i64* %i10.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i_48_119
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i_48_119
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[handleLoadInst] (= dst_reg_48_5 i11.i_48_119)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:28
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
  (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
  (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
  (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
  (= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 #x000000fe))
  (= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
     (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
     (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
  (= word.addr.4.lobit.i.i.i.i.neg_48_97
   (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
  (= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
  (= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
  (= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit, Size:4
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: __reg_bound_offset.exit, Size:11
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
  (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
  (= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
  (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
  (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
  (= dst_reg_48_4 i9.i_48_118)
  (= dst_reg_48_5 i11.i_48_119)
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

-------------------
  %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i
[handleBinaryOperatorInst] op1Val:   %i9.i = load i64, i64* %i8.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i_48_115
[getBitVecSingValType]   %i9.i = load i64, i64* %i8.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i_48_118
[getBitVecSingValType]   %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i_48_120
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i_48_120
[handleBinaryOperatorInst] OR instruction
(= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))
-------------------
  %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
[handleBinaryOperatorInst] op1Val:   %i11.i = load i64, i64* %i10.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i_48_117
[getBitVecSingValType]   %i11.i = load i64, i64* %i10.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i_48_119
[getBitVecSingValType]   %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i_48_121
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i_48_121
[handleBinaryOperatorInst] AND instruction
(= and.i1.i_48_121 (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))
-------------------
  %neg.i.i = xor i64 %and.i1.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i = xor i64 %and.i1.i, -1
[getBitVecSingValType]   %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i_48_121
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i = xor i64 %and.i1.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i_48_123
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i_48_123
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i_48_123 (bvxor and.i1.i_48_121 #xffffffffffffffff))
-------------------
  %and4.i.i = and i64 %or.i.i, %neg.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i = xor i64 %and.i1.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i = and i64 %or.i.i, %neg.i.i
[getBitVecSingValType]   %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i_48_120
[getBitVecSingValType]   %neg.i.i = xor i64 %and.i1.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i_48_123
[getBitVecSingValType]   %and4.i.i = and i64 %or.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i_48_124
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i_48_124
[handleBinaryOperatorInst] AND instruction
(= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))
-------------------
  store i64 %and4.i.i, i64* %i8.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i = and i64 %or.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i_48_124
[handleStoreInst] BVToStore: and4.i.i_48_124
[handleStoreInst] destPointerValue:   %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_41 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i_48_124 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
11 = MemoryDef(13) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10}) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  store i64 %and.i1.i, i64* %i10.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i_48_121
[handleStoreInst] BVToStore: and.i1.i_48_121
[handleStoreInst] destPointerValue:   %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_48_42 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i_48_121 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ and.i1.i_48_121 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
11 = MemoryDef(13) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10}) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
10 = MemoryDef(9) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i.i = load i64, i64* %smin_value.i, align 8
-------------------
-------------------
  %cmp.i = icmp sgt i64 %i.i, -1
-------------------
-------------------
  br i1 %cmp.i, label %if.then.i, label %lor.lhs.false.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i = icmp sgt i64 %i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i_48_16
[handleBranchInst] Edge Assertions:
<entry, if.then.i>: (= cmp.i_48_16 #b1)
<entry, lor.lhs.false.i>: (= cmp.i_48_16 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i: (= cmp.i_48_16 #b1)
[handleBranchInst] lor.lhs.false.i: (= cmp.i_48_16 #b0)
[handleBranchInst] <entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] <entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (= cmp.i_48_16 #b1)
=========================
lor.lhs.false.i
=========================
-------------------
  %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i = load i64, i64* %smax_value.i, align 8
-------------------
-------------------
  %cmp1.i = icmp slt i64 %i33.i, 0
-------------------
-------------------
  br i1 %cmp1.i, label %if.then.i, label %if.end.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (= cmp.i_48_16 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i = icmp slt i64 %i33.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i_48_19
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i, if.then.i>: (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.end.i>: (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i: (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] if.end.i: (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] <lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
[handleBranchInst] <lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.then.i
=========================
-------------------
  %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i34.i = load i64, i64* %umin_value.i, align 8
-------------------
-------------------
  %cmp3.i = icmp ugt i64 %i.i, %i34.i
-------------------
-------------------
  %cond.i = select i1 %cmp3.i, i64 %i.i, i64 %i34.i
-------------------
-------------------
  store i64 %cond.i, i64* %umin_value.i, align 8
-------------------
-------------------
  store i64 %cond.i, i64* %smin_value.i, align 8
-------------------
-------------------
  %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i = load i64, i64* %smax_value6.i, align 8
-------------------
-------------------
  %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i = load i64, i64* %umax_value.i, align 8
-------------------
-------------------
  %cmp8.i = icmp ult i64 %i35.i, %i36.i
-------------------
-------------------
  %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
-------------------
-------------------
  store i64 %cond12.i, i64* %umax_value.i, align 8
-------------------
-------------------
  store i64 %cond12.i, i64* %smax_value6.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit
[handleBranchInst] newPathCond: (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] __reg_deduce_bounds.exit: (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] <if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.end.i
=========================
-------------------
  %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i = load i64, i64* %umax_value15.i, align 8
-------------------
-------------------
  %cmp16.i = icmp sgt i64 %i37.i, -1
-------------------
-------------------
  %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i38.i = load i64, i64* %umin_value18.i, align 8
-------------------
-------------------
  br i1 %cmp16.i, label %if.then17.i, label %if.else.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i = icmp sgt i64 %i37.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i_48_29
[handleBranchInst] Edge Assertions:
<if.end.i, if.then17.i>: (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i>: (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i: (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] if.else.i: (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] <if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] <if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.then17.i
=========================
-------------------
  store i64 %i38.i, i64* %smin_value.i, align 8
-------------------
-------------------
  %cmp23.i = icmp ult i64 %i33.i, %i37.i
-------------------
-------------------
  %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
-------------------
-------------------
  store i64 %cond27.i, i64* %umax_value15.i, align 8
-------------------
-------------------
  store i64 %cond27.i, i64* %smax_value.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit
[handleBranchInst] newPathCond: (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] __reg_deduce_bounds.exit: (or (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
[handleBranchInst] <if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.else.i
=========================
-------------------
  %cmp31.i = icmp slt i64 %i38.i, 0
-------------------
-------------------
  br i1 %cmp31.i, label %if.then32.i, label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i = icmp slt i64 %i38.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i_48_34
[handleBranchInst] Edge Assertions:
<if.else.i, if.then32.i>: (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, __reg_deduce_bounds.exit>: (and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i: (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] __reg_deduce_bounds.exit: (or (and (= cmp31.i_48_34 #b0)
         (= cmp16.i_48_29 #b0)
         (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
[handleBranchInst] <if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] <if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp31.i_48_34 #b0)
         (= cmp16.i_48_29 #b0)
         (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.then32.i
=========================
-------------------
  %cmp36.i = icmp ugt i64 %i.i, %i38.i
-------------------
-------------------
  %cond40.i = select i1 %cmp36.i, i64 %i.i, i64 %i38.i
-------------------
-------------------
  store i64 %cond40.i, i64* %umin_value18.i, align 8
-------------------
-------------------
  store i64 %cond40.i, i64* %smin_value.i, align 8
-------------------
-------------------
  store i64 %i37.i, i64* %smax_value.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (or (and (= cmp31.i_48_34 #b0)
         (= cmp16.i_48_29 #b0)
         (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
    (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
    (= cmp.i_48_16 #b1))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit
[handleBranchInst] newPathCond: (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] __reg_deduce_bounds.exit: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
[handleBranchInst] <if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
__reg_deduce_bounds.exit
=========================
-------------------
  %umin_value.i1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i.i2 = load i64, i64* %umin_value.i1, align 8
-------------------
-------------------
  %umax_value.i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i = load i64, i64* %umax_value.i3, align 8
-------------------
-------------------
  %xor.i.i = xor i64 %i5.i, %i.i2
-------------------
-------------------
  %cmp.i.i.i = icmp eq i64 %xor.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i, label %__reg_bound_offset.exit, label %if.end.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i = icmp eq i64 %xor.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_48_55
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit, __reg_bound_offset.exit>: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
<__reg_deduce_bounds.exit, if.end.i.i.i>: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
[handleBranchInst] if.end.i.i.i: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] <__reg_deduce_bounds.exit, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
[handleBranchInst] <__reg_deduce_bounds.exit, if.end.i.i.i> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit, if.end.i.i.i> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.end.i.i.i
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
if.end.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i = shl i64 %xor.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit, if.end.i.i.i> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<entry, if.then.i> :(= cmp.i_48_16 #b1)
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.end.i.i.i
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit
[handleBranchInst] newPathCond: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] __reg_bound_offset.exit: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (or (and (= cmp.i.i.i_48_55 #b0) a!2) (and (= cmp.i.i.i_48_55 #b1) a!2))))
[handleBranchInst] <if.end.i.i.i, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<entry, if.then.i> :(= cmp.i_48_16 #b1)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
<if.end.i.i.i, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, if.end.i.i.i> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (or (and (= cmp.i.i.i_48_55 #b0) a!2) (and (= cmp.i.i.i_48_55 #b1) a!2))))
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.end.i.i.i
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
=========================
__reg_bound_offset.exit
=========================
-------------------
  %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
-------------------
-------------------
  %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
-------------------
-------------------
  %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
-------------------
-------------------
  %sub.i.i = xor i64 %notmask.i.i, -1
-------------------
-------------------
  %and.i.i = and i64 %notmask.i.i, %i.i2
-------------------
-------------------
  %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i
-------------------
-------------------
  %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
-------------------
-------------------
  %i8.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i9.i = load i64, i64* %i8.i, align 8
-------------------
-------------------
  %i10.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i11.i = load i64, i64* %i10.i, align 8
-------------------
-------------------
  %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
-------------------
-------------------
  %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
-------------------
-------------------
  %neg.i.i = xor i64 %and.i1.i, -1
-------------------
-------------------
  %and4.i.i = and i64 %or.i.i, %neg.i.i
-------------------
-------------------
  store i64 %and4.i.i, i64* %i8.i, align 8
-------------------
-------------------
  store i64 %and.i1.i, i64* %i10.i, align 8
-------------------
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
lor.lhs.false.i
=========================
=========================
if.then.i
=========================
=========================
if.end.i
=========================
=========================
if.then17.i
=========================
=========================
if.else.i
=========================
=========================
if.then32.i
=========================
=========================
__reg_deduce_bounds.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= cond.i_48_22 dst_reg_48_43)
         (= cond12.i_48_26 dst_reg_48_44)
         (= cond.i_48_22 dst_reg_48_45)
         (= cond12.i_48_26 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
phiResolveI (i=1) (=> (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= i38.i_48_30 dst_reg_48_43)
         (= cond27.i_48_32 dst_reg_48_44)
         (= dst_reg_48_8 dst_reg_48_45)
         (= cond27.i_48_32 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
phiResolveI (i=2) (=> (and (= cmp31.i_48_34 #b0)
         (= cmp16.i_48_29 #b0)
         (= cmp1.i_48_19 #b0)
         (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= dst_reg_48_6 dst_reg_48_43)
         (= dst_reg_48_7 dst_reg_48_44)
         (= dst_reg_48_8 dst_reg_48_45)
         (= dst_reg_48_9 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
phiResolveI (i=3) (=> (and (= cmp31.i_48_34 #b1)
         (= cmp16.i_48_29 #b0)
         (= cmp1.i_48_19 #b0)
         (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= cond40.i_48_36 dst_reg_48_43)
         (= i37.i_48_27 dst_reg_48_44)
         (= cond40.i_48_36 dst_reg_48_45)
         (= dst_reg_48_9 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
=========================
if.end.i.i.i
=========================
=========================
__reg_bound_offset.exit
=========================
-------------------
  %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i___reg_bound_offset.exit_48_102
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= if.end.i.i.i___reg_bound_offset.exit_48_102
     (and (= cmp.i.i.i_48_55 #b0) a!2))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
     (and (= cmp.i.i.i_48_55 #b1) a!2))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
  (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
  (= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
  (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
  (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
  (= dst_reg_48_4 i9.i_48_118)
  (= dst_reg_48_5 i11.i_48_119)
  (= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))
  (= and.i1.i_48_121 (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))
  (= neg.i.i_48_123 (bvxor and.i1.i_48_121 #xffffffffffffffff))
  (= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= if.end.i.i.i___reg_bound_offset.exit_48_102
     (and (= cmp.i.i.i_48_55 #b0) a!2))))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
     (and (= cmp.i.i.i_48_55 #b1) a!2))))

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
lor.lhs.false.i
=========================
=========================
if.then.i
=========================
-------------------
  store i64 %cond.i, i64* %umin_value.i, align 8
-------------------
-------------------
  store i64 %cond.i, i64* %smin_value.i, align 8
-------------------
-------------------
  store i64 %cond12.i, i64* %umax_value.i, align 8
-------------------
-------------------
  store i64 %cond12.i, i64* %smax_value6.i, align 8
-------------------
=========================
if.end.i
=========================
=========================
if.then17.i
=========================
-------------------
  store i64 %i38.i, i64* %smin_value.i, align 8
-------------------
-------------------
  store i64 %cond27.i, i64* %umax_value15.i, align 8
-------------------
-------------------
  store i64 %cond27.i, i64* %smax_value.i, align 8
-------------------
=========================
if.else.i
=========================
=========================
if.then32.i
=========================
-------------------
  store i64 %cond40.i, i64* %umin_value18.i, align 8
-------------------
-------------------
  store i64 %cond40.i, i64* %smin_value.i, align 8
-------------------
-------------------
  store i64 %i37.i, i64* %smax_value.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit
=========================
=========================
if.end.i.i.i
=========================
=========================
__reg_bound_offset.exit
=========================
-------------------
  store i64 %and4.i.i, i64* %i8.i, align 8
-------------------
-------------------
  store i64 %and.i1.i, i64* %i10.i, align 8
-------------------
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 12 = MemoryDef(11)
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: __reg_bound_offset.exit
12 = MemoryDef(11) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ and.i1.i_48_121 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
11 = MemoryDef(13) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10}) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
10 = MemoryDef(9) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 12 = MemoryDef(11)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_125
[lookInsideStruct] singleValueType:dst_reg_48_125
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_126
[lookInsideStruct] singleValueType:dst_reg_48_126
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_127
[lookInsideStruct] singleValueType:dst_reg_48_127
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_128
[lookInsideStruct] singleValueType:dst_reg_48_128
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_129
[lookInsideStruct] singleValueType:dst_reg_48_129
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_130
[lookInsideStruct] singleValueType:dst_reg_48_130
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_131
[lookInsideStruct] singleValueType:dst_reg_48_131
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_132
[lookInsideStruct] singleValueType:dst_reg_48_132
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_133
[lookInsideStruct] singleValueType:dst_reg_48_133
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_134
[lookInsideStruct] singleValueType:dst_reg_48_134
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_135
[lookInsideStruct] singleValueType:dst_reg_48_135
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_136
[lookInsideStruct] singleValueType:dst_reg_48_136
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_137
[lookInsideStruct] singleValueType:dst_reg_48_137
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_48_138
[lookInsideStruct] singleValueType:dst_reg_48_138
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_48_125 ] [ ] [ dst_reg_48_126 ] [ dst_reg_48_127 ] [ dst_reg_48_128 ] [ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] [ dst_reg_48_131 ] [ dst_reg_48_132 ] [ dst_reg_48_133 ] [ dst_reg_48_134 ] [ ] [ dst_reg_48_135 ] [ dst_reg_48_136 ] [ dst_reg_48_137 ] [ dst_reg_48_138 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ and.i1.i_48_121 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_48_37 dst_reg_48_125)
(= dst_reg_48_38 dst_reg_48_126)
(= dst_reg_48_39 dst_reg_48_127)
(= dst_reg_48_40 dst_reg_48_128)
(= and4.i.i_48_124 dst_reg_48_129)
(= and.i1.i_48_121 dst_reg_48_130)
(= dst_reg_48_43 dst_reg_48_131)
(= dst_reg_48_44 dst_reg_48_132)
(= dst_reg_48_45 dst_reg_48_133)
(= dst_reg_48_46 dst_reg_48_134)
(= dst_reg_48_47 dst_reg_48_135)
(= dst_reg_48_48 dst_reg_48_136)
(= dst_reg_48_49 dst_reg_48_137)
(= dst_reg_48_50 dst_reg_48_138)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- dst_reg: [ [ dst_reg_48_125 ] [ ] [ dst_reg_48_126 ] [ dst_reg_48_127 ] [ dst_reg_48_128 ] [ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] [ dst_reg_48_131 ] [ dst_reg_48_132 ] [ dst_reg_48_133 ] [ dst_reg_48_134 ] [ ] [ dst_reg_48_135 ] [ dst_reg_48_136 ] [ dst_reg_48_137 ] [ dst_reg_48_138 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
  (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
  (= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
  (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
  (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
  (= dst_reg_48_4 i9.i_48_118)
  (= dst_reg_48_5 i11.i_48_119)
  (= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))
  (= and.i1.i_48_121 (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))
  (= neg.i.i_48_123 (bvxor and.i1.i_48_121 #xffffffffffffffff))
  (= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= if.end.i.i.i___reg_bound_offset.exit_48_102
     (and (= cmp.i.i.i_48_55 #b0) a!2))))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
     (and (= cmp.i.i.i_48_55 #b1) a!2))))
  (= dst_reg_48_37 dst_reg_48_125)
  (= dst_reg_48_38 dst_reg_48_126)
  (= dst_reg_48_39 dst_reg_48_127)
  (= dst_reg_48_40 dst_reg_48_128)
  (= and4.i.i_48_124 dst_reg_48_129)
  (= and.i1.i_48_121 dst_reg_48_130)
  (= dst_reg_48_43 dst_reg_48_131)
  (= dst_reg_48_44 dst_reg_48_132)
  (= dst_reg_48_45 dst_reg_48_133)
  (= dst_reg_48_46 dst_reg_48_134)
  (= dst_reg_48_47 dst_reg_48_135)
  (= dst_reg_48_48 dst_reg_48_136)
  (= dst_reg_48_49 dst_reg_48_137)
  (= dst_reg_48_50 dst_reg_48_138)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i, Size:28
  (ite (bvult xor.i.i_48_53 #x0000000100000000)
     (= tobool.not.i.i.i.i_48_57 #b1)
     (= tobool.not.i.i.i.i_48_57 #b0))
  (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59)
     (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))
  (ite (= tobool.not.i.i.i.i_48_57 #b1)
     (= spec.select17.i.i.i.i_48_63 #x0000001f)
     (= spec.select17.i.i.i.i_48_63 #x0000003f))
  (ite (bvult spec.select.i.i.i.i_48_60 #x0001000000000000)
     (= tobool2.not.i.i.i.i_48_65 #b1)
     (= tobool2.not.i.i.i.i_48_65 #b0))
  (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 #xfffffff0))
  (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69)
     (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))
  (ite (= tobool2.not.i.i.i.i_48_65 #b1)
     (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67)
     (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))
  (ite (bvult word.addr.1.i.i.i.i_48_70 #x0100000000000000)
     (= tobool8.not.i.i.i.i_48_73 #b1)
     (= tobool8.not.i.i.i.i_48_73 #b0))
  (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 #xfffffff8))
  (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77)
     (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))
  (ite (= tobool8.not.i.i.i.i_48_73 #b1)
     (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75)
     (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))
  (ite (bvult word.addr.2.i.i.i.i_48_78 #x1000000000000000)
     (= tobool14.not.i.i.i.i_48_81 #b1)
     (= tobool14.not.i.i.i.i_48_81 #b0))
  (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 #xfffffffc))
  (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85)
     (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))
  (ite (= tobool14.not.i.i.i.i_48_81 #b1)
     (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83)
     (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))
  (ite (bvult word.addr.3.i.i.i.i_48_86 #x4000000000000000)
     (= tobool20.not.i.i.i.i_48_89 #b1)
     (= tobool20.not.i.i.i.i_48_89 #b0))
  (= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 #x000000fe))
  (= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93)
     (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))
  (ite (= tobool20.not.i.i.i.i_48_89 #b1)
     (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91)
     (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))
  (= word.addr.4.lobit.i.i.i.i.neg_48_97
   (bvlshr word.addr.4.i.i.i.i_48_94 #x000000000000003f))
  (= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))
  (= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))
  (= phi.bo_48_101 (bvand add.i.i.i_48_99 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit, Size:8
  (= dst_reg_48_45 i.i2_48_51)
  (= dst_reg_48_46 i5.i_48_52)
  (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))
  (ite (= xor.i.i_48_53 #x0000000000000000)
     (= cmp.i.i.i_48_55 #b1)
     (= cmp.i.i.i_48_55 #b0))
  (=> (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= cond.i_48_22 dst_reg_48_43)
         (= cond12.i_48_26 dst_reg_48_44)
         (= cond.i_48_22 dst_reg_48_45)
         (= cond12.i_48_26 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
  (=> (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= i38.i_48_30 dst_reg_48_43)
         (= cond27.i_48_32 dst_reg_48_44)
         (= dst_reg_48_8 dst_reg_48_45)
         (= cond27.i_48_32 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
  (=> (and (= cmp31.i_48_34 #b0)
         (= cmp16.i_48_29 #b0)
         (= cmp1.i_48_19 #b0)
         (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= dst_reg_48_6 dst_reg_48_43)
         (= dst_reg_48_7 dst_reg_48_44)
         (= dst_reg_48_8 dst_reg_48_45)
         (= dst_reg_48_9 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
  (=> (and (= cmp31.i_48_34 #b1)
         (= cmp16.i_48_29 #b0)
         (= cmp1.i_48_19 #b0)
         (= cmp.i_48_16 #b0))
    (and (= dst_reg_48_0 dst_reg_48_37)
         (= dst_reg_48_1 dst_reg_48_38)
         (= dst_reg_48_2 dst_reg_48_39)
         (= dst_reg_48_3 dst_reg_48_40)
         (= dst_reg_48_4 dst_reg_48_41)
         (= dst_reg_48_5 dst_reg_48_42)
         (= cond40.i_48_36 dst_reg_48_43)
         (= i37.i_48_27 dst_reg_48_44)
         (= cond40.i_48_36 dst_reg_48_45)
         (= dst_reg_48_9 dst_reg_48_46)
         (= dst_reg_48_10 dst_reg_48_47)
         (= dst_reg_48_11 dst_reg_48_48)
         (= dst_reg_48_12 dst_reg_48_49)
         (= dst_reg_48_13 dst_reg_48_50)))
BasicBlock: if.then32.i, Size:2
  (ite (bvugt i.i_48_14 i38.i_48_30) (= cmp36.i_48_35 #b1) (= cmp36.i_48_35 #b0))
  (ite (= cmp36.i_48_35 #b1)
     (= cond40.i_48_36 i.i_48_14)
     (= cond40.i_48_36 i38.i_48_30))
BasicBlock: __reg_bound_offset.exit, Size:31
  (=> if.end.i.i.i___reg_bound_offset.exit_48_102
    (= retval.0.i.i.i_48_104 phi.bo_48_101))
  (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
    (= retval.0.i.i.i_48_104 #x00000000))
  (ite (bvugt retval.0.i.i.i_48_104 #x0000003f)
     (= cmp.i.i_48_107 #b1)
     (= cmp.i.i_48_107 #b0))
  (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))
  (= notmask.i.i_48_110 (bvshl #xffffffffffffffff sh_prom.i.i_48_108))
  (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 #xffffffffffffffff))
  (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.0.0.i.i_48_115 #x0000000000000000)
     (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))
  (ite (= cmp.i.i_48_107 #b1)
     (= retval.sroa.3.0.i.i_48_117 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))
  (= dst_reg_48_4 i9.i_48_118)
  (= dst_reg_48_5 i11.i_48_119)
  (= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))
  (= and.i1.i_48_121 (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))
  (= neg.i.i_48_123 (bvxor and.i1.i_48_121 #xffffffffffffffff))
  (= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= if.end.i.i.i___reg_bound_offset.exit_48_102
     (and (= cmp.i.i.i_48_55 #b0) a!2))))
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103
     (and (= cmp.i.i.i_48_55 #b1) a!2))))
  (= dst_reg_48_37 dst_reg_48_125)
  (= dst_reg_48_38 dst_reg_48_126)
  (= dst_reg_48_39 dst_reg_48_127)
  (= dst_reg_48_40 dst_reg_48_128)
  (= and4.i.i_48_124 dst_reg_48_129)
  (= and.i1.i_48_121 dst_reg_48_130)
  (= dst_reg_48_43 dst_reg_48_131)
  (= dst_reg_48_44 dst_reg_48_132)
  (= dst_reg_48_45 dst_reg_48_133)
  (= dst_reg_48_46 dst_reg_48_134)
  (= dst_reg_48_47 dst_reg_48_135)
  (= dst_reg_48_48 dst_reg_48_136)
  (= dst_reg_48_49 dst_reg_48_137)
  (= dst_reg_48_50 dst_reg_48_138)
BasicBlock: if.else.i, Size:1
  (ite (bvslt i38.i_48_30 #x0000000000000000)
     (= cmp31.i_48_34 #b1)
     (= cmp31.i_48_34 #b0))
BasicBlock: if.then17.i, Size:2
  (ite (bvult i33.i_48_17 i37.i_48_27)
     (= cmp23.i_48_31 #b1)
     (= cmp23.i_48_31 #b0))
  (ite (= cmp23.i_48_31 #b1)
     (= cond27.i_48_32 i33.i_48_17)
     (= cond27.i_48_32 i37.i_48_27))
BasicBlock: if.end.i, Size:3
  (= dst_reg_48_9 i37.i_48_27)
  (ite (bvsgt i37.i_48_27 #xffffffffffffffff)
     (= cmp16.i_48_29 #b1)
     (= cmp16.i_48_29 #b0))
  (= dst_reg_48_8 i38.i_48_30)
BasicBlock: lor.lhs.false.i, Size:2
  (= dst_reg_48_7 i33.i_48_17)
  (ite (bvslt i33.i_48_17 #x0000000000000000)
     (= cmp1.i_48_19 #b1)
     (= cmp1.i_48_19 #b0))
BasicBlock: if.then.i, Size:7
  (= dst_reg_48_8 i34.i_48_20)
  (ite (bvugt i.i_48_14 i34.i_48_20) (= cmp3.i_48_21 #b1) (= cmp3.i_48_21 #b0))
  (ite (= cmp3.i_48_21 #b1)
     (= cond.i_48_22 i.i_48_14)
     (= cond.i_48_22 i34.i_48_20))
  (= dst_reg_48_7 i35.i_48_23)
  (= dst_reg_48_9 i36.i_48_24)
  (ite (bvult i35.i_48_23 i36.i_48_24) (= cmp8.i_48_25 #b1) (= cmp8.i_48_25 #b0))
  (ite (= cmp8.i_48_25 #b1)
     (= cond12.i_48_26 i35.i_48_23)
     (= cond12.i_48_26 i36.i_48_24))
BasicBlock: entry, Size:16
  (= dst_reg_48_0 dst_reg_48_0)
  (= dst_reg_48_1 dst_reg_48_1)
  (= dst_reg_48_2 dst_reg_48_2)
  (= dst_reg_48_3 dst_reg_48_3)
  (= dst_reg_48_4 dst_reg_48_4)
  (= dst_reg_48_5 dst_reg_48_5)
  (= dst_reg_48_6 dst_reg_48_6)
  (= dst_reg_48_7 dst_reg_48_7)
  (= dst_reg_48_8 dst_reg_48_8)
  (= dst_reg_48_9 dst_reg_48_9)
  (= dst_reg_48_10 dst_reg_48_10)
  (= dst_reg_48_11 dst_reg_48_11)
  (= dst_reg_48_12 dst_reg_48_12)
  (= dst_reg_48_13 dst_reg_48_13)
  (= dst_reg_48_6 i.i_48_14)
  (ite (bvsgt i.i_48_14 #xffffffffffffffff)
     (= cmp.i_48_16 #b1)
     (= cmp.i_48_16 #b0))

[encodeFunctionBody] PathConditionsMap:
__reg_bound_offset.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (or (and (= cmp.i.i.i_48_55 #b0) a!2) (and (= cmp.i.i.i_48_55 #b1) a!2))))
if.else.i
  (and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.then17.i
  (and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
if.end.i.i.i
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
if.then32.i
  (and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
__reg_deduce_bounds.exit
  (let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
  (or (and (= cmp31.i_48_34 #b1) a!1)
      (and (= cmp31.i_48_34 #b0) a!1)
      (and (= cmp16.i_48_29 #b1) (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
      (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
      (= cmp.i_48_16 #b1)))
if.end.i
  (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
lor.lhs.false.i
  (= cmp.i_48_16 #b0)
if.then.i
  (or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
[encodeFunctionBody] EdgeAssertionsMap:
<entry, if.then.i> :(= cmp.i_48_16 #b1)
<if.end.i, if.then17.i> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.else.i, if.then32.i> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<if.else.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b0)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<entry, lor.lhs.false.i> :(= cmp.i_48_16 #b0)
<if.end.i, if.else.i> :(and (= cmp16.i_48_29 #b0) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<lor.lhs.false.i, if.then.i> :(and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b1) a!2)))
<if.end.i.i.i, __reg_bound_offset.exit> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
<lor.lhs.false.i, if.end.i> :(and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then.i, __reg_deduce_bounds.exit> :(or (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0)) (= cmp.i_48_16 #b1))
<if.then17.i, __reg_deduce_bounds.exit> :(and (= cmp16.i_48_29 #b1) (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0))
<if.then32.i, __reg_deduce_bounds.exit> :(and (= cmp31.i_48_34 #b1)
     (= cmp16.i_48_29 #b0)
     (= cmp1.i_48_19 #b0)
     (= cmp.i_48_16 #b0))
<__reg_deduce_bounds.exit, if.end.i.i.i> :(let ((a!1 (and (= cmp16.i_48_29 #b0)
                (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))))
(let ((a!2 (or (and (= cmp31.i_48_34 #b1) a!1)
               (and (= cmp31.i_48_34 #b0) a!1)
               (and (= cmp16.i_48_29 #b1)
                    (and (= cmp1.i_48_19 #b0) (= cmp.i_48_16 #b0)))
               (and (= cmp1.i_48_19 #b1) (= cmp.i_48_16 #b0))
               (= cmp.i_48_16 #b1))))
  (and (= cmp.i.i.i_48_55 #b0) a!2)))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ and.i1.i_48_121 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
11 = MemoryDef(13) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ and4.i.i_48_124 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
2 = MemoryDef(1) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
6 = MemoryDef(5) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
4 = MemoryDef(3) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
5 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ i38.i_48_30 ] [ cond27.i_48_32 ] [ dst_reg_48_8 ] [ cond27.i_48_32 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
13 = MemoryPhi({if.then.i,4},{if.then17.i,7},{if.else.i,liveOnEntry},{if.then32.i,10}) : {
- dst_reg: [ [ dst_reg_48_37 ] [ ] [ dst_reg_48_38 ] [ dst_reg_48_39 ] [ dst_reg_48_40 ] [ [ dst_reg_48_41 ] [ dst_reg_48_42 ] ] [ dst_reg_48_43 ] [ dst_reg_48_44 ] [ dst_reg_48_45 ] [ dst_reg_48_46 ] [ ] [ dst_reg_48_47 ] [ dst_reg_48_48 ] [ dst_reg_48_49 ] [ dst_reg_48_50 ] ] 
}
8 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond.i_48_22 ] [ dst_reg_48_7 ] [ cond.i_48_22 ] [ cond12.i_48_26 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}
10 = MemoryDef(9) : {
- dst_reg: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ cond40.i_48_36 ] [ i37.i_48_27 ] [ cond40.i_48_36 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_48_0 ] [ ] [ dst_reg_48_1 ] [ dst_reg_48_2 ] [ dst_reg_48_3 ] [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] [ dst_reg_48_6 ] [ dst_reg_48_7 ] [ dst_reg_48_8 ] [ dst_reg_48_9 ] [ ] [ dst_reg_48_10 ] [ dst_reg_48_11 ] [ dst_reg_48_12 ] [ dst_reg_48_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_48_4 ] [ dst_reg_48_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_4",
	"dst_reg_48_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8",
	"dst_reg_48_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8",
	"dst_reg_48_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8",
	"dst_reg_48_9",
	"",
	"",
	"dst_reg_48_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8",
	"dst_reg_48_9",
	"",
	"",
	"dst_reg_48_10",
	"dst_reg_48_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_48_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_0",
	[
		""
	],
	"dst_reg_48_1",
	"dst_reg_48_2",
	"dst_reg_48_3",
	[
		"dst_reg_48_4",
		"dst_reg_48_5"
	],
	"dst_reg_48_6",
	"dst_reg_48_7",
	"dst_reg_48_8",
	"dst_reg_48_9",
	"",
	"",
	"dst_reg_48_10",
	"dst_reg_48_11",
	"dst_reg_48_12"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_48_125 ] [ ] [ dst_reg_48_126 ] [ dst_reg_48_127 ] [ dst_reg_48_128 ] [ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] [ dst_reg_48_131 ] [ dst_reg_48_132 ] [ dst_reg_48_133 ] [ dst_reg_48_134 ] [ ] [ dst_reg_48_135 ] [ dst_reg_48_136 ] [ dst_reg_48_137 ] [ dst_reg_48_138 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_48_125 ] [ ] [ dst_reg_48_126 ] [ dst_reg_48_127 ] [ dst_reg_48_128 ] [ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] [ dst_reg_48_131 ] [ dst_reg_48_132 ] [ dst_reg_48_133 ] [ dst_reg_48_134 ] [ ] [ dst_reg_48_135 ] [ dst_reg_48_136 ] [ dst_reg_48_137 ] [ dst_reg_48_138 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_125 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_126 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_127 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_128 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_48_129 ] [ dst_reg_48_130 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_129 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_129"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_130 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_129",
	"dst_reg_48_130"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_131 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_132 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_133 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_48_134 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133",
	"dst_reg_48_134"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133",
	"dst_reg_48_134",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_135 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133",
	"dst_reg_48_134",
	"",
	"",
	"dst_reg_48_135"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_48_136 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133",
	"dst_reg_48_134",
	"",
	"",
	"dst_reg_48_135",
	"dst_reg_48_136"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_48_137 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_48_125",
	[
		""
	],
	"dst_reg_48_126",
	"dst_reg_48_127",
	"dst_reg_48_128",
	[
		"dst_reg_48_129",
		"dst_reg_48_130"
	],
	"dst_reg_48_131",
	"dst_reg_48_132",
	"dst_reg_48_133",
	"dst_reg_48_134",
	"",
	"",
	"dst_reg_48_135",
	"dst_reg_48_136",
	"dst_reg_48_137"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: reg_bounds_sync___
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_48_0",
      [ "" ],
      "dst_reg_48_1",
      "dst_reg_48_2",
      "dst_reg_48_3",
      [ "dst_reg_48_4", "dst_reg_48_5" ],
      "dst_reg_48_6",
      "dst_reg_48_7",
      "dst_reg_48_8",
      "dst_reg_48_9",
      "",
      "",
      "dst_reg_48_10",
      "dst_reg_48_11",
      "dst_reg_48_12"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_48_125",
      [ "" ],
      "dst_reg_48_126",
      "dst_reg_48_127",
      "dst_reg_48_128",
      [ "dst_reg_48_129", "dst_reg_48_130" ],
      "dst_reg_48_131",
      "dst_reg_48_132",
      "dst_reg_48_133",
      "dst_reg_48_134",
      "",
      "",
      "dst_reg_48_135",
      "dst_reg_48_136",
      "dst_reg_48_137"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun cmp.i_48_16 () (_ BitVec 1))
(declare-fun i.i_48_14 () (_ BitVec 64))
(declare-fun dst_reg_48_6 () (_ BitVec 64))
(declare-fun dst_reg_48_13 () (_ BitVec 8))
(declare-fun dst_reg_48_12 () (_ BitVec 32))
(declare-fun dst_reg_48_11 () (_ BitVec 32))
(declare-fun dst_reg_48_10 () (_ BitVec 32))
(declare-fun dst_reg_48_9 () (_ BitVec 64))
(declare-fun dst_reg_48_8 () (_ BitVec 64))
(declare-fun dst_reg_48_7 () (_ BitVec 64))
(declare-fun dst_reg_48_5 () (_ BitVec 64))
(declare-fun dst_reg_48_4 () (_ BitVec 64))
(declare-fun dst_reg_48_3 () (_ BitVec 32))
(declare-fun dst_reg_48_2 () (_ BitVec 32))
(declare-fun dst_reg_48_1 () (_ BitVec 32))
(declare-fun dst_reg_48_0 () (_ BitVec 32))
(declare-fun i36.i_48_24 () (_ BitVec 64))
(declare-fun cond12.i_48_26 () (_ BitVec 64))
(declare-fun i35.i_48_23 () (_ BitVec 64))
(declare-fun cmp8.i_48_25 () (_ BitVec 1))
(declare-fun i34.i_48_20 () (_ BitVec 64))
(declare-fun cond.i_48_22 () (_ BitVec 64))
(declare-fun cmp3.i_48_21 () (_ BitVec 1))
(declare-fun cmp1.i_48_19 () (_ BitVec 1))
(declare-fun i33.i_48_17 () (_ BitVec 64))
(declare-fun i38.i_48_30 () (_ BitVec 64))
(declare-fun cmp16.i_48_29 () (_ BitVec 1))
(declare-fun i37.i_48_27 () (_ BitVec 64))
(declare-fun cond27.i_48_32 () (_ BitVec 64))
(declare-fun cmp23.i_48_31 () (_ BitVec 1))
(declare-fun cmp31.i_48_34 () (_ BitVec 1))
(declare-fun dst_reg_48_138 () (_ BitVec 8))
(declare-fun dst_reg_48_50 () (_ BitVec 8))
(declare-fun dst_reg_48_137 () (_ BitVec 32))
(declare-fun dst_reg_48_49 () (_ BitVec 32))
(declare-fun dst_reg_48_136 () (_ BitVec 32))
(declare-fun dst_reg_48_48 () (_ BitVec 32))
(declare-fun dst_reg_48_135 () (_ BitVec 32))
(declare-fun dst_reg_48_47 () (_ BitVec 32))
(declare-fun dst_reg_48_134 () (_ BitVec 64))
(declare-fun dst_reg_48_46 () (_ BitVec 64))
(declare-fun dst_reg_48_133 () (_ BitVec 64))
(declare-fun dst_reg_48_45 () (_ BitVec 64))
(declare-fun dst_reg_48_132 () (_ BitVec 64))
(declare-fun dst_reg_48_44 () (_ BitVec 64))
(declare-fun dst_reg_48_131 () (_ BitVec 64))
(declare-fun dst_reg_48_43 () (_ BitVec 64))
(declare-fun dst_reg_48_130 () (_ BitVec 64))
(declare-fun and.i1.i_48_121 () (_ BitVec 64))
(declare-fun dst_reg_48_129 () (_ BitVec 64))
(declare-fun and4.i.i_48_124 () (_ BitVec 64))
(declare-fun dst_reg_48_128 () (_ BitVec 32))
(declare-fun dst_reg_48_40 () (_ BitVec 32))
(declare-fun dst_reg_48_127 () (_ BitVec 32))
(declare-fun dst_reg_48_39 () (_ BitVec 32))
(declare-fun dst_reg_48_126 () (_ BitVec 32))
(declare-fun dst_reg_48_38 () (_ BitVec 32))
(declare-fun dst_reg_48_125 () (_ BitVec 32))
(declare-fun dst_reg_48_37 () (_ BitVec 32))
(declare-fun cmp.i.i.i_48_55 () (_ BitVec 1))
(declare-fun __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103 () Bool)
(declare-fun if.end.i.i.i___reg_bound_offset.exit_48_102 () Bool)
(declare-fun neg.i.i_48_123 () (_ BitVec 64))
(declare-fun or.i.i_48_120 () (_ BitVec 64))
(declare-fun i11.i_48_119 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i_48_117 () (_ BitVec 64))
(declare-fun i9.i_48_118 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i_48_115 () (_ BitVec 64))
(declare-fun sub.i.i_48_112 () (_ BitVec 64))
(declare-fun cmp.i.i_48_107 () (_ BitVec 1))
(declare-fun and.i.i_48_113 () (_ BitVec 64))
(declare-fun i.i2_48_51 () (_ BitVec 64))
(declare-fun notmask.i.i_48_110 () (_ BitVec 64))
(declare-fun sh_prom.i.i_48_108 () (_ BitVec 64))
(declare-fun retval.0.i.i.i_48_104 () (_ BitVec 32))
(declare-fun phi.bo_48_101 () (_ BitVec 32))
(declare-fun cond40.i_48_36 () (_ BitVec 64))
(declare-fun cmp36.i_48_35 () (_ BitVec 1))
(declare-fun dst_reg_48_42 () (_ BitVec 64))
(declare-fun dst_reg_48_41 () (_ BitVec 64))
(declare-fun xor.i.i_48_53 () (_ BitVec 64))
(declare-fun i5.i_48_52 () (_ BitVec 64))
(declare-fun add.i.i.i_48_99 () (_ BitVec 32))
(declare-fun i.i.i.i.i.neg_48_98 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i_48_95 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.neg_48_97 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i_48_94 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i_48_87 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i_48_91 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i_48_89 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i_48_86 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i_48_93 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i_48_79 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i_48_83 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i_48_81 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i_48_78 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i_48_85 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i_48_71 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i_48_75 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i_48_73 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i_48_70 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i_48_77 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i_48_63 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i_48_67 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i_48_65 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i_48_60 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i_48_69 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i_48_57 () (_ BitVec 1))
(declare-fun shl.i.i.i.i_48_59 () (_ BitVec 64))
(assert
 (let (($x39 (= cmp.i_48_16 (_ bv0 1))))
 (let (($x41 (= cmp.i_48_16 (_ bv1 1))))
 (let (($x42 (ite (bvsgt i.i_48_14 (_ bv18446744073709551615 64)) $x41 $x39)))
 (let (($x34 (= dst_reg_48_6 i.i_48_14)))
 (let (($x32 (= dst_reg_48_13 dst_reg_48_13)))
 (let (($x31 (= dst_reg_48_12 dst_reg_48_12)))
 (let (($x30 (= dst_reg_48_11 dst_reg_48_11)))
 (let (($x29 (= dst_reg_48_10 dst_reg_48_10)))
 (let (($x28 (= dst_reg_48_9 dst_reg_48_9)))
 (let (($x27 (= dst_reg_48_8 dst_reg_48_8)))
 (let (($x26 (= dst_reg_48_7 dst_reg_48_7)))
 (let (($x25 (= dst_reg_48_6 dst_reg_48_6)))
 (let (($x24 (= dst_reg_48_5 dst_reg_48_5)))
 (let (($x23 (= dst_reg_48_4 dst_reg_48_4)))
 (let (($x22 (= dst_reg_48_3 dst_reg_48_3)))
 (let (($x21 (= dst_reg_48_2 dst_reg_48_2)))
 (let (($x20 (= dst_reg_48_1 dst_reg_48_1)))
 (let (($x19 (= dst_reg_48_0 dst_reg_48_0)))
 (let (($x69 (= cmp8.i_48_25 (_ bv1 1))))
 (let (($x74 (ite $x69 (= cond12.i_48_26 i35.i_48_23) (= cond12.i_48_26 i36.i_48_24))))
 (let (($x68 (= cmp8.i_48_25 (_ bv0 1))))
 (let (($x70 (ite (bvult i35.i_48_23 i36.i_48_24) $x69 $x68)))
 (let (($x65 (= dst_reg_48_9 i36.i_48_24)))
 (let (($x63 (= dst_reg_48_7 i35.i_48_23)))
 (let (($x56 (= cmp3.i_48_21 (_ bv1 1))))
 (let (($x61 (ite $x56 (= cond.i_48_22 i.i_48_14) (= cond.i_48_22 i34.i_48_20))))
 (let (($x55 (= cmp3.i_48_21 (_ bv0 1))))
 (let (($x57 (ite (bvugt i.i_48_14 i34.i_48_20) $x56 $x55)))
 (let (($x52 (= dst_reg_48_8 i34.i_48_20)))
 (let (($x49 (= cmp1.i_48_19 (_ bv1 1))))
 (let (($x328 (and $x49 $x39)))
 (let (($x330 (or $x328 $x41)))
 (let (($x396 (=> $x330 (and $x52 $x57 $x61 $x63 $x65 $x70 $x74))))
 (let (($x48 (= cmp1.i_48_19 (_ bv0 1))))
 (let (($x50 (ite (bvslt i33.i_48_17 (_ bv0 64)) $x49 $x48)))
 (let (($x44 (= dst_reg_48_7 i33.i_48_17)))
 (let (($x394 (=> $x39 (and $x44 $x50))))
 (let (($x83 (= dst_reg_48_8 i38.i_48_30)))
 (let (($x79 (= cmp16.i_48_29 (_ bv0 1))))
 (let (($x80 (= cmp16.i_48_29 (_ bv1 1))))
 (let (($x81 (ite (bvsgt i37.i_48_27 (_ bv18446744073709551615 64)) $x80 $x79)))
 (let (($x76 (= dst_reg_48_9 i37.i_48_27)))
 (let (($x329 (and $x48 $x39)))
 (let (($x392 (=> $x329 (and $x76 $x81 $x83))))
 (let (($x87 (= cmp23.i_48_31 (_ bv1 1))))
 (let (($x92 (ite $x87 (= cond27.i_48_32 i33.i_48_17) (= cond27.i_48_32 i37.i_48_27))))
 (let (($x86 (= cmp23.i_48_31 (_ bv0 1))))
 (let (($x88 (ite (bvult i33.i_48_17 i37.i_48_27) $x87 $x86)))
 (let (($x331 (and $x80 $x329)))
 (let (($x390 (=> $x331 (and $x88 $x92))))
 (let (($x95 (= cmp31.i_48_34 (_ bv0 1))))
 (let (($x96 (= cmp31.i_48_34 (_ bv1 1))))
 (let (($x97 (ite (bvslt i38.i_48_30 (_ bv0 64)) $x96 $x95)))
 (let (($x332 (and $x79 $x329)))
 (let (($x388 (=> $x332 (and $x97))))
 (let (($x378 (= dst_reg_48_50 dst_reg_48_138)))
 (let (($x377 (= dst_reg_48_49 dst_reg_48_137)))
 (let (($x376 (= dst_reg_48_48 dst_reg_48_136)))
 (let (($x375 (= dst_reg_48_47 dst_reg_48_135)))
 (let (($x374 (= dst_reg_48_46 dst_reg_48_134)))
 (let (($x373 (= dst_reg_48_45 dst_reg_48_133)))
 (let (($x372 (= dst_reg_48_44 dst_reg_48_132)))
 (let (($x371 (= dst_reg_48_43 dst_reg_48_131)))
 (let (($x370 (= and.i1.i_48_121 dst_reg_48_130)))
 (let (($x369 (= and4.i.i_48_124 dst_reg_48_129)))
 (let (($x368 (= dst_reg_48_40 dst_reg_48_128)))
 (let (($x367 (= dst_reg_48_39 dst_reg_48_127)))
 (let (($x366 (= dst_reg_48_38 dst_reg_48_126)))
 (let (($x365 (= dst_reg_48_37 dst_reg_48_125)))
 (let (($x334 (and $x96 $x332)))
 (let (($x337 (or $x334 (or (and $x95 $x332) (or $x331 $x330)))))
 (let (($x155 (= cmp.i.i.i_48_55 (_ bv1 1))))
 (let (($x338 (and $x155 $x337)))
 (let (($x350 (= __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103 $x338)))
 (let (($x154 (= cmp.i.i.i_48_55 (_ bv0 1))))
 (let (($x339 (and $x154 $x337)))
 (let (($x349 (= if.end.i.i.i___reg_bound_offset.exit_48_102 $x339)))
 (let (($x327 (= and4.i.i_48_124 (bvand or.i.i_48_120 neg.i.i_48_123))))
 (let (($x324 (= neg.i.i_48_123 (bvxor and.i1.i_48_121 (_ bv18446744073709551615 64)))))
 (let (($x321 (= and.i1.i_48_121 (bvand retval.sroa.3.0.i.i_48_117 i11.i_48_119))))
 (let (($x318 (= or.i.i_48_120 (bvor retval.sroa.0.0.i.i_48_115 i9.i_48_118))))
 (let (($x315 (= dst_reg_48_5 i11.i_48_119)))
 (let (($x313 (= dst_reg_48_4 i9.i_48_118)))
 (let (($x290 (= cmp.i.i_48_107 (_ bv1 1))))
 (let (($x311 (ite $x290 (= retval.sroa.3.0.i.i_48_117 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i_48_117 sub.i.i_48_112))))
 (let (($x307 (ite $x290 (= retval.sroa.0.0.i.i_48_115 (_ bv0 64)) (= retval.sroa.0.0.i.i_48_115 and.i.i_48_113))))
 (let (($x303 (= and.i.i_48_113 (bvand notmask.i.i_48_110 i.i2_48_51))))
 (let (($x300 (= sub.i.i_48_112 (bvxor notmask.i.i_48_110 (_ bv18446744073709551615 64)))))
 (let (($x297 (= notmask.i.i_48_110 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i_48_108))))
 (let (($x294 (= sh_prom.i.i_48_108 ((_ zero_extend 32) retval.0.i.i.i_48_104))))
 (let (($x289 (= cmp.i.i_48_107 (_ bv0 1))))
 (let (($x291 (ite (bvugt retval.0.i.i.i_48_104 (_ bv63 32)) $x290 $x289)))
 (let (($x285 (= retval.0.i.i.i_48_104 (_ bv0 32))))
 (let (($x286 (=> __reg_deduce_bounds.exit___reg_bound_offset.exit_48_103 $x285)))
 (let (($x282 (= retval.0.i.i.i_48_104 phi.bo_48_101)))
 (let (($x283 (=> if.end.i.i.i___reg_bound_offset.exit_48_102 $x282)))
 (let (($x385 (and $x283 $x286 $x291 $x294 $x297 $x300 $x303 $x307 $x311 $x313 $x315 $x318 $x321 $x324 $x327 $x349 $x350 $x365 $x366 $x367 $x368 $x369 $x370 $x371 $x372 $x373 $x374 $x375 $x376 $x377 $x378)))
 (let (($x340 (or $x339 $x338)))
 (let (($x386 (=> $x340 $x385)))
 (let (($x101 (= cmp36.i_48_35 (_ bv1 1))))
 (let (($x106 (ite $x101 (= cond40.i_48_36 i.i_48_14) (= cond40.i_48_36 i38.i_48_30))))
 (let (($x100 (= cmp36.i_48_35 (_ bv0 1))))
 (let (($x102 (ite (bvugt i.i_48_14 i38.i_48_30) $x101 $x100)))
 (let (($x384 (=> $x334 (and $x102 $x106))))
 (let (($x134 (= dst_reg_48_13 dst_reg_48_50)))
 (let (($x133 (= dst_reg_48_12 dst_reg_48_49)))
 (let (($x132 (= dst_reg_48_11 dst_reg_48_48)))
 (let (($x131 (= dst_reg_48_10 dst_reg_48_47)))
 (let (($x141 (= dst_reg_48_9 dst_reg_48_46)))
 (let (($x144 (= cond40.i_48_36 dst_reg_48_45)))
 (let (($x143 (= i37.i_48_27 dst_reg_48_44)))
 (let (($x142 (= cond40.i_48_36 dst_reg_48_43)))
 (let (($x126 (= dst_reg_48_5 dst_reg_48_42)))
 (let (($x125 (= dst_reg_48_4 dst_reg_48_41)))
 (let (($x124 (= dst_reg_48_3 dst_reg_48_40)))
 (let (($x123 (= dst_reg_48_2 dst_reg_48_39)))
 (let (($x122 (= dst_reg_48_1 dst_reg_48_38)))
 (let (($x121 (= dst_reg_48_0 dst_reg_48_37)))
 (let (($x347 (and $x121 $x122 $x123 $x124 $x125 $x126 $x142 $x143 $x144 $x141 $x131 $x132 $x133 $x134)))
 (let (($x348 (=> $x334 $x347)))
 (let (($x137 (= dst_reg_48_8 dst_reg_48_45)))
 (let (($x140 (= dst_reg_48_7 dst_reg_48_44)))
 (let (($x139 (= dst_reg_48_6 dst_reg_48_43)))
 (let (($x345 (and $x121 $x122 $x123 $x124 $x125 $x126 $x139 $x140 $x137 $x141 $x131 $x132 $x133 $x134)))
 (let (($x335 (and $x95 $x332)))
 (let (($x346 (=> $x335 $x345)))
 (let (($x138 (= cond27.i_48_32 dst_reg_48_46)))
 (let (($x136 (= cond27.i_48_32 dst_reg_48_44)))
 (let (($x135 (= i38.i_48_30 dst_reg_48_43)))
 (let (($x343 (and $x121 $x122 $x123 $x124 $x125 $x126 $x135 $x136 $x137 $x138 $x131 $x132 $x133 $x134)))
 (let (($x344 (=> $x331 $x343)))
 (let (($x130 (= cond12.i_48_26 dst_reg_48_46)))
 (let (($x129 (= cond.i_48_22 dst_reg_48_45)))
 (let (($x128 (= cond12.i_48_26 dst_reg_48_44)))
 (let (($x127 (= cond.i_48_22 dst_reg_48_43)))
 (let (($x341 (and $x121 $x122 $x123 $x124 $x125 $x126 $x127 $x128 $x129 $x130 $x131 $x132 $x133 $x134)))
 (let (($x342 (=> $x330 $x341)))
 (let (($x156 (ite (= xor.i.i_48_53 (_ bv0 64)) $x155 $x154)))
 (let (($x151 (= xor.i.i_48_53 (bvxor i5.i_48_52 i.i2_48_51))))
 (let (($x148 (= dst_reg_48_46 i5.i_48_52)))
 (let (($x146 (= dst_reg_48_45 i.i2_48_51)))
 (let (($x382 (=> $x337 (and $x146 $x148 $x151 $x156 $x342 $x344 $x346 $x348))))
 (let (($x278 (= phi.bo_48_101 (bvand add.i.i.i_48_99 (_ bv255 32)))))
 (let (($x274 (= add.i.i.i_48_99 (bvadd num.4.i.i.i.i_48_95 i.i.i.i.i.neg_48_98))))
 (let (($x271 (= i.i.i.i.i.neg_48_98 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.neg_48_97))))
 (let (($x268 (= word.addr.4.lobit.i.i.i.i.neg_48_97 (bvlshr word.addr.4.i.i.i.i_48_94 (_ bv63 64)))))
 (let (($x247 (= tobool20.not.i.i.i.i_48_89 (_ bv1 1))))
 (let (($x264 (ite $x247 (= num.4.i.i.i.i_48_95 sub22.i.i.i.i_48_91) (= num.4.i.i.i.i_48_95 num.3.i.i.i.i_48_87))))
 (let (($x260 (ite $x247 (= word.addr.4.i.i.i.i_48_94 shl23.i.i.i.i_48_93) (= word.addr.4.i.i.i.i_48_94 word.addr.3.i.i.i.i_48_86))))
 (let (($x256 (= shl23.i.i.i.i_48_93 (bvshl word.addr.3.i.i.i.i_48_86 (_ bv2 64)))))
 (let (($x252 (= sub22.i.i.i.i_48_91 (bvadd num.3.i.i.i.i_48_87 (_ bv254 32)))))
 (let (($x246 (= tobool20.not.i.i.i.i_48_89 (_ bv0 1))))
 (let (($x248 (ite (bvult word.addr.3.i.i.i.i_48_86 (_ bv4611686018427387904 64)) $x247 $x246)))
 (let (($x225 (= tobool14.not.i.i.i.i_48_81 (_ bv1 1))))
 (let (($x242 (ite $x225 (= num.3.i.i.i.i_48_87 sub16.i.i.i.i_48_83) (= num.3.i.i.i.i_48_87 num.2.i.i.i.i_48_79))))
 (let (($x238 (ite $x225 (= word.addr.3.i.i.i.i_48_86 shl17.i.i.i.i_48_85) (= word.addr.3.i.i.i.i_48_86 word.addr.2.i.i.i.i_48_78))))
 (let (($x234 (= shl17.i.i.i.i_48_85 (bvshl word.addr.2.i.i.i.i_48_78 (_ bv4 64)))))
 (let (($x230 (= sub16.i.i.i.i_48_83 (bvadd num.2.i.i.i.i_48_79 (_ bv4294967292 32)))))
 (let (($x224 (= tobool14.not.i.i.i.i_48_81 (_ bv0 1))))
 (let (($x226 (ite (bvult word.addr.2.i.i.i.i_48_78 (_ bv1152921504606846976 64)) $x225 $x224)))
 (let (($x203 (= tobool8.not.i.i.i.i_48_73 (_ bv1 1))))
 (let (($x220 (ite $x203 (= num.2.i.i.i.i_48_79 sub10.i.i.i.i_48_75) (= num.2.i.i.i.i_48_79 num.1.i.i.i.i_48_71))))
 (let (($x216 (ite $x203 (= word.addr.2.i.i.i.i_48_78 shl11.i.i.i.i_48_77) (= word.addr.2.i.i.i.i_48_78 word.addr.1.i.i.i.i_48_70))))
 (let (($x212 (= shl11.i.i.i.i_48_77 (bvshl word.addr.1.i.i.i.i_48_70 (_ bv8 64)))))
 (let (($x208 (= sub10.i.i.i.i_48_75 (bvadd num.1.i.i.i.i_48_71 (_ bv4294967288 32)))))
 (let (($x202 (= tobool8.not.i.i.i.i_48_73 (_ bv0 1))))
 (let (($x204 (ite (bvult word.addr.1.i.i.i.i_48_70 (_ bv72057594037927936 64)) $x203 $x202)))
 (let (($x181 (= tobool2.not.i.i.i.i_48_65 (_ bv1 1))))
 (let (($x198 (ite $x181 (= num.1.i.i.i.i_48_71 sub4.i.i.i.i_48_67) (= num.1.i.i.i.i_48_71 spec.select17.i.i.i.i_48_63))))
 (let (($x194 (ite $x181 (= word.addr.1.i.i.i.i_48_70 shl5.i.i.i.i_48_69) (= word.addr.1.i.i.i.i_48_70 spec.select.i.i.i.i_48_60))))
 (let (($x190 (= shl5.i.i.i.i_48_69 (bvshl spec.select.i.i.i.i_48_60 (_ bv16 64)))))
 (let (($x186 (= sub4.i.i.i.i_48_67 (bvadd spec.select17.i.i.i.i_48_63 (_ bv4294967280 32)))))
 (let (($x180 (= tobool2.not.i.i.i.i_48_65 (_ bv0 1))))
 (let (($x182 (ite (bvult spec.select.i.i.i.i_48_60 (_ bv281474976710656 64)) $x181 $x180)))
 (let (($x161 (= tobool.not.i.i.i.i_48_57 (_ bv1 1))))
 (let (($x176 (ite $x161 (= spec.select17.i.i.i.i_48_63 (_ bv31 32)) (= spec.select17.i.i.i.i_48_63 (_ bv63 32)))))
 (let (($x170 (ite $x161 (= spec.select.i.i.i.i_48_60 shl.i.i.i.i_48_59) (= spec.select.i.i.i.i_48_60 xor.i.i_48_53))))
 (let (($x166 (= shl.i.i.i.i_48_59 (bvshl xor.i.i_48_53 (_ bv32 64)))))
 (let (($x160 (= tobool.not.i.i.i.i_48_57 (_ bv0 1))))
 (let (($x162 (ite (bvult xor.i.i_48_53 (_ bv4294967296 64)) $x161 $x160)))
 (let (($x379 (and $x162 $x166 $x170 $x176 $x182 $x186 $x190 $x194 $x198 $x204 $x208 $x212 $x216 $x220 $x226 $x230 $x234 $x238 $x242 $x248 $x252 $x256 $x260 $x264 $x268 $x271 $x274 $x278)))
 (let (($x380 (=> $x339 $x379)))
 (and $x380 $x382 $x384 $x386 $x388 $x390 $x392 $x394 $x396 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x34 $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC/BPF_SYNC.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_SYNC BPF_SYNC.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll reg_bounds_sync___ 48 BPF_SYNC.smt2

Finished llvm_to_smt_pass
