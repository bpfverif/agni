Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_ADD
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x183b690
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0x183b690>>  #uses=1
  CS<0x16d55e0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0x1f85b10>>  #uses=1
  CS<0x1da7630> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_ADD
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i, i8 0, i64 32, i1 false)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i, i8 0, i64 32, i1 false)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i.i26, i8 0, i64 32, i1 false) #21
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i.i27, i8 0, i64 32, i1 false) #21
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i30, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i187, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i221, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i256, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i293, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i.i26.i, i8 0, i64 32, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i.i27.i, i8 0, i64 32, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i30.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i187.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i221.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i256.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i293.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_ADD
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_ADD:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i5.i.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i5.i.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_ADD
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0xbaef70>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_ADD
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD
********
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(32) %i.i26.i, i8 0, i64 32, i1 false) #22
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_ADD -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_ADD
GLOBAL_BITVECTOR_SUFFIX: 0
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_0
[lookInsideStruct] singleValueType:dst_reg_0_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_1
[lookInsideStruct] singleValueType:dst_reg_0_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_2
[lookInsideStruct] singleValueType:dst_reg_0_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_3
[lookInsideStruct] singleValueType:dst_reg_0_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_4
[lookInsideStruct] singleValueType:dst_reg_0_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_5
[lookInsideStruct] singleValueType:dst_reg_0_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_6
[lookInsideStruct] singleValueType:dst_reg_0_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_7
[lookInsideStruct] singleValueType:dst_reg_0_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_8
[lookInsideStruct] singleValueType:dst_reg_0_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_9
[lookInsideStruct] singleValueType:dst_reg_0_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_10
[lookInsideStruct] singleValueType:dst_reg_0_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_11
[lookInsideStruct] singleValueType:dst_reg_0_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_12
[lookInsideStruct] singleValueType:dst_reg_0_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_13
[lookInsideStruct] singleValueType:dst_reg_0_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_14
[lookInsideStruct] singleValueType:src_reg_0_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_15
[lookInsideStruct] singleValueType:src_reg_0_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_16
[lookInsideStruct] singleValueType:src_reg_0_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_17
[lookInsideStruct] singleValueType:src_reg_0_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_18
[lookInsideStruct] singleValueType:src_reg_0_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_19
[lookInsideStruct] singleValueType:src_reg_0_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_20
[lookInsideStruct] singleValueType:src_reg_0_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_21
[lookInsideStruct] singleValueType:src_reg_0_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_22
[lookInsideStruct] singleValueType:src_reg_0_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_23
[lookInsideStruct] singleValueType:src_reg_0_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_24
[lookInsideStruct] singleValueType:src_reg_0_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_25
[lookInsideStruct] singleValueType:src_reg_0_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_26
[lookInsideStruct] singleValueType:src_reg_0_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_27
[lookInsideStruct] singleValueType:src_reg_0_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_0_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_0_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_0_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_0_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_0_37
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_0_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_0_38
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_5 i215.i_0_38)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_0_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_0_39
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_0_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_0_40
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_0_39
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_0_40
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_0_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_0_42
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_0_39
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_0_40
[handleSelectInst] z3ExprRes: or.cond197.i_0_42
[handleSelectInst](ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_0_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_0_43
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_0_43
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_0_42
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_0_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_0_44
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_0_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_0_45
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_0_44
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_0_45
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_0_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_0_47
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_0_44
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_0_45
[handleSelectInst] z3ExprRes: or.cond199.i_0_47
[handleSelectInst](ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_0_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_0_48
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_0_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_0_49
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_0_48
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_0_49
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_0_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_0_51
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_0_48
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_0_49
[handleSelectInst] z3ExprRes: or.cond200.i_0_51
[handleSelectInst](ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  %i.i26.i = bitcast %struct.bpf_reg_state* %dst_reg to i8*Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD 0 BPF_ADD.smt2
