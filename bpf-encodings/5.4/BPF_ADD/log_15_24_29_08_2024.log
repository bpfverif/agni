Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_ADD
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x159ba70
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0x159ba70>>  #uses=1
  CS<0x13115e0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0x1c691f0>>  #uses=1
  CS<0x1a3e630> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_ADD
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_ADD
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_ADD:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_ADD
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_ADD
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_ADD'<<0x1edd640>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_ADD
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_ADD
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_ADD -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_ADD
GLOBAL_BITVECTOR_SUFFIX: 0
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_0
[lookInsideStruct] singleValueType:dst_reg_0_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_1
[lookInsideStruct] singleValueType:dst_reg_0_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_2
[lookInsideStruct] singleValueType:dst_reg_0_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_3
[lookInsideStruct] singleValueType:dst_reg_0_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_4
[lookInsideStruct] singleValueType:dst_reg_0_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_5
[lookInsideStruct] singleValueType:dst_reg_0_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_6
[lookInsideStruct] singleValueType:dst_reg_0_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_7
[lookInsideStruct] singleValueType:dst_reg_0_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_8
[lookInsideStruct] singleValueType:dst_reg_0_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_9
[lookInsideStruct] singleValueType:dst_reg_0_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_10
[lookInsideStruct] singleValueType:dst_reg_0_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_11
[lookInsideStruct] singleValueType:dst_reg_0_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_12
[lookInsideStruct] singleValueType:dst_reg_0_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_13
[lookInsideStruct] singleValueType:dst_reg_0_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_14
[lookInsideStruct] singleValueType:src_reg_0_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_15
[lookInsideStruct] singleValueType:src_reg_0_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_16
[lookInsideStruct] singleValueType:src_reg_0_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_17
[lookInsideStruct] singleValueType:src_reg_0_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_18
[lookInsideStruct] singleValueType:src_reg_0_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_19
[lookInsideStruct] singleValueType:src_reg_0_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_20
[lookInsideStruct] singleValueType:src_reg_0_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_21
[lookInsideStruct] singleValueType:src_reg_0_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_22
[lookInsideStruct] singleValueType:src_reg_0_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_23
[lookInsideStruct] singleValueType:src_reg_0_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_24
[lookInsideStruct] singleValueType:src_reg_0_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_25
[lookInsideStruct] singleValueType:src_reg_0_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_26
[lookInsideStruct] singleValueType:src_reg_0_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_27
[lookInsideStruct] singleValueType:src_reg_0_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_0_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_0_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_0_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleLoadInst] (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_0_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_0_37
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_0_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_0_38
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_5 i215.i_0_38)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_0_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_0_39
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_0_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_0_40
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_0_39
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_0_40
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_0_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_0_42
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_0_39
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_0_40
[handleSelectInst] z3ExprRes: or.cond197.i_0_42
[handleSelectInst](ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_0_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_0_43
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_0_43
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_0_42
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_0_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_0_44
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_0_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_0_45
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_0_44
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_0_45
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_0_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_0_47
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_0_44
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_0_45
[handleSelectInst] z3ExprRes: or.cond199.i_0_47
[handleSelectInst](ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_0_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_0_48
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_0_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_0_49
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_0_48
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_0_49
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_0_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_0_51
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_0_48
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_0_49
[handleSelectInst] z3ExprRes: or.cond200.i_0_51
[handleSelectInst](ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i219.i = load i64, i64* %smin_value49.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i219.i = load i64, i64* %smin_value49.i, align 8
[handleLoadInst] pointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i219.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i219.i_0_60
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i219.i_0_60
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_6 i219.i_0_60)
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:1
  (= dst_reg_0_6 i219.i_0_60)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i219.i = load i64, i64* %smin_value49.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleBinaryOperatorInst] opResVal:   %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType]   %i219.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i219.i_0_60
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType]   %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i.i_0_61
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i_0_61
[handleBinaryOperatorInst] ADD instruction
(= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
-------------------
  %cmp.i35.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_0_32
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i35.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i35.i_0_63
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i35.i_0_63
[handleICmpInst] (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:3
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp1.i.i = icmp sgt i64 %add.i.i, %i219.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_0_61
[getBitVecSingValType]   %i219.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i219.i_0_60
[getBitVecSingValType]   %cmp1.i.i = icmp sgt i64 %add.i.i, %i219.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i.i_0_64
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i.i_0_64
[handleICmpInst] (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:4
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp2.i.i = icmp slt i64 %add.i.i, %i219.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_0_61
[getBitVecSingValType]   %i219.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i219.i_0_60
[getBitVecSingValType]   %cmp2.i.i = icmp slt i64 %add.i.i, %i219.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp2.i.i_0_65
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp2.i.i_0_65
[handleICmpInst] (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:5
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %retval.0.i.i = select i1 %cmp.i35.i, i1 %cmp1.i.i, i1 %cmp2.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 10 = MemoryDef(9)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i35.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i35.i_0_63
[getBitVecSingValType]   %cmp1.i.i = icmp sgt i64 %add.i.i, %i219.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i.i_0_64
[getBitVecSingValType]   %cmp2.i.i = icmp slt i64 %add.i.i, %i219.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i.i_0_65
[getBitVecSingValType]   %retval.0.i.i = select i1 %cmp.i35.i, i1 %cmp1.i.i, i1 %cmp2.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i_0_66
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i_0_66
[handleSelectInst] z3ExprSelectOp1: cmp.i35.i_0_63
[handleSelectInst] z3ExprSelectOp2: cmp1.i.i_0_64
[handleSelectInst] z3ExprSelectOp3: cmp2.i.i_0_65
[handleSelectInst] z3ExprRes: retval.0.i.i_0_66
[handleSelectInst](ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
-------------------
  br i1 %retval.0.i.i, label %if.then56.i, label %lor.lhs.false52.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false52.i
=========================
-------------------
  %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i220.i = load i64, i64* %smax_value53.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i220.i = load i64, i64* %smax_value53.i, align 8
[handleLoadInst] pointerValue:   %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i220.i = load i64, i64* %smax_value53.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i220.i_0_67
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i220.i_0_67
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_7 i220.i_0_67)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false52.i, Size:1
  (= dst_reg_0_7 i220.i_0_67)
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i220.i = load i64, i64* %smax_value53.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleBinaryOperatorInst] opResVal:   %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType]   %i220.i = load i64, i64* %smax_value53.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i220.i_0_67
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType]   %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i36.i_0_68
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i36.i_0_68
[handleBinaryOperatorInst] ADD instruction
(= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
-------------------
  %cmp.i37.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_0_33
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i37.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i37.i_0_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i37.i_0_70
[handleICmpInst] (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false52.i, Size:3
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp1.i38.i = icmp sgt i64 %add.i36.i, %i220.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i36.i_0_68
[getBitVecSingValType]   %i220.i = load i64, i64* %smax_value53.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i220.i_0_67
[getBitVecSingValType]   %cmp1.i38.i = icmp sgt i64 %add.i36.i, %i220.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i38.i_0_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i38.i_0_71
[handleICmpInst] (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false52.i, Size:4
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp2.i39.i = icmp slt i64 %add.i36.i, %i220.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i36.i_0_68
[getBitVecSingValType]   %i220.i = load i64, i64* %smax_value53.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i220.i_0_67
[getBitVecSingValType]   %cmp2.i39.i = icmp slt i64 %add.i36.i, %i220.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp2.i39.i_0_72
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp2.i39.i_0_72
[handleICmpInst] (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false52.i, Size:5
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %retval.0.i40.i = select i1 %cmp.i37.i, i1 %cmp1.i38.i, i1 %cmp2.i39.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 10 = MemoryDef(9)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleSelectInst]SelectMap:
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i37.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i37.i_0_70
[getBitVecSingValType]   %cmp1.i38.i = icmp sgt i64 %add.i36.i, %i220.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i38.i_0_71
[getBitVecSingValType]   %cmp2.i39.i = icmp slt i64 %add.i36.i, %i220.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp2.i39.i_0_72
[getBitVecSingValType]   %retval.0.i40.i = select i1 %cmp.i37.i, i1 %cmp1.i38.i, i1 %cmp2.i39.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: retval.0.i40.i_0_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i40.i_0_73
[handleSelectInst] z3ExprSelectOp1: cmp.i37.i_0_70
[handleSelectInst] z3ExprSelectOp2: cmp1.i38.i_0_71
[handleSelectInst] z3ExprSelectOp3: cmp2.i39.i_0_72
[handleSelectInst] z3ExprRes: retval.0.i40.i_0_73
[handleSelectInst](ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
-------------------
  br i1 %retval.0.i40.i, label %if.then56.i, label %if.else.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then56.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value49.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %smax_value58.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value58.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value58.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value58.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value58.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %if.end62.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i
=========================
-------------------
  store i64 %add.i.i, i64* %smin_value49.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i_0_61
[handleStoreInst] BVToStore: add.i.i_0_61
[handleStoreInst] destPointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ add.i.i_0_61 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  store i64 %add.i36.i, i64* %smax_value53.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i36.i_0_68
[handleStoreInst] BVToStore: add.i36.i_0_68
[handleStoreInst] destPointerValue:   %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ add.i36.i_0_68 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %if.end62.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end62.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_76
[lookInsideStruct] singleValueType:dst_reg_0_76
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_77
[lookInsideStruct] singleValueType:dst_reg_0_77
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_78
[lookInsideStruct] singleValueType:dst_reg_0_78
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_79
[lookInsideStruct] singleValueType:dst_reg_0_79
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_80
[lookInsideStruct] singleValueType:dst_reg_0_80
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_81
[lookInsideStruct] singleValueType:dst_reg_0_81
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_82
[lookInsideStruct] singleValueType:dst_reg_0_82
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_83
[lookInsideStruct] singleValueType:dst_reg_0_83
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_84
[lookInsideStruct] singleValueType:dst_reg_0_84
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_85
[lookInsideStruct] singleValueType:dst_reg_0_85
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_86
[lookInsideStruct] singleValueType:dst_reg_0_86
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_87
[lookInsideStruct] singleValueType:dst_reg_0_87
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_88
[lookInsideStruct] singleValueType:dst_reg_0_88
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_89
[lookInsideStruct] singleValueType:dst_reg_0_89
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_90
[lookInsideStruct] singleValueType:src_reg_0_90
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_91
[lookInsideStruct] singleValueType:src_reg_0_91
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_92
[lookInsideStruct] singleValueType:src_reg_0_92
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_93
[lookInsideStruct] singleValueType:src_reg_0_93
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_94
[lookInsideStruct] singleValueType:src_reg_0_94
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_95
[lookInsideStruct] singleValueType:src_reg_0_95
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_96
[lookInsideStruct] singleValueType:src_reg_0_96
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_97
[lookInsideStruct] singleValueType:src_reg_0_97
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_98
[lookInsideStruct] singleValueType:src_reg_0_98
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_99
[lookInsideStruct] singleValueType:src_reg_0_99
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_100
[lookInsideStruct] singleValueType:src_reg_0_100
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_101
[lookInsideStruct] singleValueType:src_reg_0_101
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_102
[lookInsideStruct] singleValueType:src_reg_0_102
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_103
[lookInsideStruct] singleValueType:src_reg_0_103
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then56.i
[handleMemoryPhiNode] incomingAccessI: 12 = MemoryDef(11)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_0_90)
(= src_reg_0_15 src_reg_0_91)
(= src_reg_0_16 src_reg_0_92)
(= src_reg_0_17 src_reg_0_93)
(= src_reg_0_18 src_reg_0_94)
(= src_reg_0_19 src_reg_0_95)
(= src_reg_0_20 src_reg_0_96)
(= src_reg_0_21 src_reg_0_97)
(= src_reg_0_22 src_reg_0_98)
(= src_reg_0_23 src_reg_0_99)
(= src_reg_0_24 src_reg_0_100)
(= src_reg_0_25 src_reg_0_101)
(= src_reg_0_26 src_reg_0_102)
(= src_reg_0_27 src_reg_0_103)
(= #x00000001 dst_reg_0_76)
(= dst_reg_0_1 dst_reg_0_77)
(= dst_reg_0_2 dst_reg_0_78)
(= dst_reg_0_3 dst_reg_0_79)
(= dst_reg_0_4 dst_reg_0_80)
(= dst_reg_0_5 dst_reg_0_81)
(= #x8000000000000000 dst_reg_0_82)
(= #x7fffffffffffffff dst_reg_0_83)
(= dst_reg_0_8 dst_reg_0_84)
(= dst_reg_0_9 dst_reg_0_85)
(= dst_reg_0_10 dst_reg_0_86)
(= dst_reg_0_11 dst_reg_0_87)
(= dst_reg_0_12 dst_reg_0_88)
(= dst_reg_0_13 dst_reg_0_89)
]
[handleMemoryPhiNode] incomingBBI: if.else.i
[handleMemoryPhiNode] incomingAccessI: 14 = MemoryDef(13)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_0_90)
(= src_reg_0_15 src_reg_0_91)
(= src_reg_0_16 src_reg_0_92)
(= src_reg_0_17 src_reg_0_93)
(= src_reg_0_18 src_reg_0_94)
(= src_reg_0_19 src_reg_0_95)
(= src_reg_0_20 src_reg_0_96)
(= src_reg_0_21 src_reg_0_97)
(= src_reg_0_22 src_reg_0_98)
(= src_reg_0_23 src_reg_0_99)
(= src_reg_0_24 src_reg_0_100)
(= src_reg_0_25 src_reg_0_101)
(= src_reg_0_26 src_reg_0_102)
(= src_reg_0_27 src_reg_0_103)
(= #x00000001 dst_reg_0_76)
(= dst_reg_0_1 dst_reg_0_77)
(= dst_reg_0_2 dst_reg_0_78)
(= dst_reg_0_3 dst_reg_0_79)
(= dst_reg_0_4 dst_reg_0_80)
(= dst_reg_0_5 dst_reg_0_81)
(= add.i.i_0_61 dst_reg_0_82)
(= add.i36.i_0_68 dst_reg_0_83)
(= dst_reg_0_8 dst_reg_0_84)
(= dst_reg_0_9 dst_reg_0_85)
(= dst_reg_0_10 dst_reg_0_86)
(= dst_reg_0_11 dst_reg_0_87)
(= dst_reg_0_12 dst_reg_0_88)
(= dst_reg_0_13 dst_reg_0_89)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= add.i.i_0_61 dst_reg_0_82)
  (= add.i36.i_0_68 dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
<if.then56.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= #x8000000000000000 dst_reg_0_82)
  (= #x7fffffffffffffff dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
-------------------
  %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i221.i = load i64, i64* %umin_value63.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i221.i = load i64, i64* %umin_value63.i, align 8
[handleLoadInst] pointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i221.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i221.i_0_104
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i221.i_0_104
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_8 i221.i_0_104)
[printBBAssertionsMap] 
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:1
  (= dst_reg_0_8 i221.i_0_104)
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i221.i = load i64, i64* %umin_value63.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %i221.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i221.i_0_104
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add64.i_0_105
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add64.i_0_105
[handleBinaryOperatorInst] ADD instruction
(= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
-------------------
  %cmp65.i = icmp ult i64 %add64.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add64.i_0_105
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_0_34
[getBitVecSingValType]   %cmp65.i = icmp ult i64 %add64.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp65.i_0_106
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp65.i_0_106
[handleICmpInst] (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  br i1 %cmp65.i, label %if.then72.i, label %lor.lhs.false67.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false67.i
=========================
-------------------
  %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i222.i = load i64, i64* %umax_value68.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i222.i = load i64, i64* %umax_value68.i, align 8
[handleLoadInst] pointerValue:   %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i222.i = load i64, i64* %umax_value68.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i222.i_0_107
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i222.i_0_107
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_9 i222.i_0_107)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false67.i, Size:1
  (= dst_reg_0_9 i222.i_0_107)
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %i223.i = xor i64 %src_reg1.sroa.22.0.copyload, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %i223.i = xor i64 %src_reg1.sroa.22.0.copyload, -1
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %i223.i = xor i64 %src_reg1.sroa.22.0.copyload, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i223.i_0_109
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i223.i_0_109
[handleBinaryOperatorInst] XOR instruction
(= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
-------------------
  %cmp70.i = icmp ugt i64 %i222.i, %i223.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i222.i = load i64, i64* %umax_value68.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i222.i_0_107
[getBitVecSingValType]   %i223.i = xor i64 %src_reg1.sroa.22.0.copyload, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i223.i_0_109
[getBitVecSingValType]   %cmp70.i = icmp ugt i64 %i222.i, %i223.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp70.i_0_110
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp70.i_0_110
[handleICmpInst] (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  br i1 %cmp70.i, label %if.then72.i, label %if.else75.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value63.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryPhi({if.then56.i,12},{if.else.i,14})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %umax_value74.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value74.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value74.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value74.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value74.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else75.i
=========================
-------------------
  store i64 %add64.i, i64* %umin_value63.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add64.i_0_105
[handleStoreInst] BVToStore: add64.i_0_105
[handleStoreInst] destPointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryPhi({if.then56.i,12},{if.else.i,14})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_84 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ add64.i_0_105 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %add79.i = add i64 %i222.i, %src_reg1.sroa.22.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i222.i = load i64, i64* %umax_value68.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] opResVal:   %add79.i = add i64 %i222.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType]   %i222.i = load i64, i64* %umax_value68.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i222.i_0_107
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_0_35
[getBitVecSingValType]   %add79.i = add i64 %i222.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add79.i_0_113
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add79.i_0_113
[handleBinaryOperatorInst] ADD instruction
(= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))
-------------------
  store i64 %add79.i, i64* %umax_value68.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %add79.i = add i64 %i222.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add79.i_0_113
[handleStoreInst] BVToStore: add79.i_0_113
[handleStoreInst] destPointerValue:   %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ add79.i_0_113 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end80.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_114
[lookInsideStruct] singleValueType:dst_reg_0_114
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_115
[lookInsideStruct] singleValueType:dst_reg_0_115
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_116
[lookInsideStruct] singleValueType:dst_reg_0_116
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_117
[lookInsideStruct] singleValueType:dst_reg_0_117
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_118
[lookInsideStruct] singleValueType:dst_reg_0_118
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_119
[lookInsideStruct] singleValueType:dst_reg_0_119
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_120
[lookInsideStruct] singleValueType:dst_reg_0_120
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_121
[lookInsideStruct] singleValueType:dst_reg_0_121
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_122
[lookInsideStruct] singleValueType:dst_reg_0_122
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_123
[lookInsideStruct] singleValueType:dst_reg_0_123
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_124
[lookInsideStruct] singleValueType:dst_reg_0_124
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_125
[lookInsideStruct] singleValueType:dst_reg_0_125
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_126
[lookInsideStruct] singleValueType:dst_reg_0_126
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_127
[lookInsideStruct] singleValueType:dst_reg_0_127
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_128
[lookInsideStruct] singleValueType:src_reg_0_128
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_129
[lookInsideStruct] singleValueType:src_reg_0_129
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_130
[lookInsideStruct] singleValueType:src_reg_0_130
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_131
[lookInsideStruct] singleValueType:src_reg_0_131
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_132
[lookInsideStruct] singleValueType:src_reg_0_132
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_133
[lookInsideStruct] singleValueType:src_reg_0_133
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_134
[lookInsideStruct] singleValueType:src_reg_0_134
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_135
[lookInsideStruct] singleValueType:src_reg_0_135
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_136
[lookInsideStruct] singleValueType:src_reg_0_136
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_137
[lookInsideStruct] singleValueType:src_reg_0_137
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_138
[lookInsideStruct] singleValueType:src_reg_0_138
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_139
[lookInsideStruct] singleValueType:src_reg_0_139
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_140
[lookInsideStruct] singleValueType:src_reg_0_140
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_141
[lookInsideStruct] singleValueType:src_reg_0_141
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then72.i
[handleMemoryPhiNode] incomingAccessI: 16 = MemoryDef(15)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_90 src_reg_0_128)
(= src_reg_0_91 src_reg_0_129)
(= src_reg_0_92 src_reg_0_130)
(= src_reg_0_93 src_reg_0_131)
(= src_reg_0_94 src_reg_0_132)
(= src_reg_0_95 src_reg_0_133)
(= src_reg_0_96 src_reg_0_134)
(= src_reg_0_97 src_reg_0_135)
(= src_reg_0_98 src_reg_0_136)
(= src_reg_0_99 src_reg_0_137)
(= src_reg_0_100 src_reg_0_138)
(= src_reg_0_101 src_reg_0_139)
(= src_reg_0_102 src_reg_0_140)
(= src_reg_0_103 src_reg_0_141)
(= dst_reg_0_76 dst_reg_0_114)
(= dst_reg_0_77 dst_reg_0_115)
(= dst_reg_0_78 dst_reg_0_116)
(= dst_reg_0_79 dst_reg_0_117)
(= dst_reg_0_80 dst_reg_0_118)
(= dst_reg_0_81 dst_reg_0_119)
(= dst_reg_0_82 dst_reg_0_120)
(= dst_reg_0_83 dst_reg_0_121)
(= #x0000000000000000 dst_reg_0_122)
(= #xffffffffffffffff dst_reg_0_123)
(= dst_reg_0_86 dst_reg_0_124)
(= dst_reg_0_87 dst_reg_0_125)
(= dst_reg_0_88 dst_reg_0_126)
(= dst_reg_0_89 dst_reg_0_127)
]
[handleMemoryPhiNode] incomingBBI: if.else75.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_90 src_reg_0_128)
(= src_reg_0_91 src_reg_0_129)
(= src_reg_0_92 src_reg_0_130)
(= src_reg_0_93 src_reg_0_131)
(= src_reg_0_94 src_reg_0_132)
(= src_reg_0_95 src_reg_0_133)
(= src_reg_0_96 src_reg_0_134)
(= src_reg_0_97 src_reg_0_135)
(= src_reg_0_98 src_reg_0_136)
(= src_reg_0_99 src_reg_0_137)
(= src_reg_0_100 src_reg_0_138)
(= src_reg_0_101 src_reg_0_139)
(= src_reg_0_102 src_reg_0_140)
(= src_reg_0_103 src_reg_0_141)
(= dst_reg_0_76 dst_reg_0_114)
(= dst_reg_0_77 dst_reg_0_115)
(= dst_reg_0_78 dst_reg_0_116)
(= dst_reg_0_79 dst_reg_0_117)
(= dst_reg_0_80 dst_reg_0_118)
(= dst_reg_0_81 dst_reg_0_119)
(= dst_reg_0_82 dst_reg_0_120)
(= dst_reg_0_83 dst_reg_0_121)
(= add64.i_0_105 dst_reg_0_122)
(= add79.i_0_113 dst_reg_0_123)
(= dst_reg_0_86 dst_reg_0_124)
(= dst_reg_0_87 dst_reg_0_125)
(= dst_reg_0_88 dst_reg_0_126)
(= dst_reg_0_89 dst_reg_0_127)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else75.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= add64.i_0_105 dst_reg_0_122)
  (= add79.i_0_113 dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.then72.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= #x0000000000000000 dst_reg_0_122)
  (= #xffffffffffffffff dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.else.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= add.i.i_0_61 dst_reg_0_82)
  (= add.i36.i_0_68 dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
<if.then56.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= #x8000000000000000 dst_reg_0_82)
  (= #x7fffffffffffffff dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
-------------------
  %i224.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i224.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i224.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i224.i_0_142
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i224.i_0_142
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleLoadInst] (= dst_reg_0_4 i224.i_0_142)
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))
BasicBlock: if.end80.i, Size:1
  (= dst_reg_0_4 i224.i_0_142)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then72.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] opResVal:   %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_0_38
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType]   %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add.i41.i_0_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i41.i_0_143
[handleBinaryOperatorInst] ADD instruction
(= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
-------------------
  %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i224.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %i224.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i224.i_0_142
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_0_30
[getBitVecSingValType]   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add3.i.i_0_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add3.i.i_0_144
[handleBinaryOperatorInst] ADD instruction
(= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
-------------------
  %add4.i.i = add i64 %add.i41.i, %add3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] op1Val:   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %add4.i.i = add i64 %add.i41.i, %add3.i.i
[getBitVecSingValType]   %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i41.i_0_143
[getBitVecSingValType]   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_0_144
[getBitVecSingValType]   %add4.i.i = add i64 %add.i41.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: add4.i.i_0_145
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add4.i.i_0_145
[handleBinaryOperatorInst] ADD instruction
(= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
-------------------
  %xor.i.i = xor i64 %add4.i.i, %add3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add4.i.i = add i64 %add.i41.i, %add3.i.i
[handleBinaryOperatorInst] op1Val:   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType]   %add4.i.i = add i64 %add.i41.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add4.i.i_0_145
[getBitVecSingValType]   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_0_144
[getBitVecSingValType]   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i_0_146
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i_0_146
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
-------------------
  %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] opResVal:   %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_0_38
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_0_31
[getBitVecSingValType]   %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i_0_147
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i_0_147
[handleBinaryOperatorInst] OR instruction
(= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
-------------------
  %or7.i.i = or i64 %or.i.i, %xor.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] op1Val:   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[handleBinaryOperatorInst] opResVal:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType]   %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i_0_147
[getBitVecSingValType]   %xor.i.i = xor i64 %add4.i.i, %add3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i_0_146
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or7.i.i_0_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or7.i.i_0_148
[handleBinaryOperatorInst] OR instruction
(= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
-------------------
  %neg.i.i = xor i64 %or7.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_0_148
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i_0_150
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i_0_150
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
-------------------
  %and.i.i = and i64 %add3.i.i, %neg.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %neg.i.i = xor i64 %or7.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType]   %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add3.i.i_0_144
[getBitVecSingValType]   %neg.i.i = xor i64 %or7.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i_0_150
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i_0_151
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i_0_151
[handleBinaryOperatorInst] AND instruction
(= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
-------------------
  store i64 %and.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i_0_151
[handleStoreInst] BVToStore: and.i.i_0_151
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryPhi({if.then72.i,16},{if.else75.i,18})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_118 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i_0_151 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  store i64 %or7.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_0_148
[handleStoreInst] BVToStore: or7.i.i_0_148
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_119 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or7.i.i_0_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %i.i322.i = load i64, i64* %smin_value49.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[handleLoadInst] pointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then56.i,12},{if.else.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_0_152
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_0_152
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleLoadInst] (= dst_reg_0_82 i.i322.i_0_152)
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))
BasicBlock: if.end80.i, Size:10
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then72.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_0_152
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_0_154
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_0_154
[handleICmpInst] (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.else.i, Size:0
BasicBlock: if.then56.i, Size:0
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then72.i, Size:0
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then56.i,12},{if.else.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_0_155
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_0_155
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleLoadInst] (= dst_reg_0_83 i33.i.i_0_155)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_0_83 i33.i.i_0_155)
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_0_155
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_0_157
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_0_157
[handleICmpInst] (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %i34.i.i = load i64, i64* %umin_value63.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value63.i, align 8
[handleLoadInst] pointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then72.i,16},{if.else75.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_0_158
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_0_158
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleLoadInst] (= dst_reg_0_122 i34.i.i_0_158)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_0_122 i34.i.i_0_158)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_0_152
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_0_158
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_0_159
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_0_159
[handleICmpInst] (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 20 = MemoryDef(19)
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_0_159
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_0_152
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_0_158
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_0_160
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_0_160
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_0_159
[handleSelectInst] z3ExprSelectOp2: i.i322.i_0_152
[handleSelectInst] z3ExprSelectOp3: i34.i.i_0_158
[handleSelectInst] z3ExprRes: cond.i327.i_0_160
[handleSelectInst](ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
-------------------
  store i64 %cond.i327.i, i64* %umin_value63.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_0_160
[handleStoreInst] BVToStore: cond.i327.i_0_160
[handleStoreInst] destPointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_0_160 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value49.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_0_160
[handleStoreInst] BVToStore: cond.i327.i_0_160
[handleStoreInst] destPointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_0_160 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 36 = MemoryPhi({if.then56.i,12},{if.else.i,14})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_0_161
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_0_161
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
[handleLoadInst] (= dst_reg_0_83 i35.i.i_0_161)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then72.i,16},{if.else75.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_0_162
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_0_162
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleLoadInst] (= dst_reg_0_123 i36.i.i_0_162)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_0_161
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_0_162
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_0_163
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_0_163
[handleICmpInst] (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 22 = MemoryDef(21)
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleSelectInst]SelectMap:
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_0_163
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_0_161
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_0_162
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_0_164
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_0_164
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_0_163
[handleSelectInst] z3ExprSelectOp2: i35.i.i_0_161
[handleSelectInst] z3ExprSelectOp3: i36.i.i_0_162
[handleSelectInst] z3ExprRes: cond12.i.i_0_164
[handleSelectInst](ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_0_164
[handleStoreInst] BVToStore: cond12.i.i_0_164
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_123 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_0_164 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_0_164
[handleStoreInst] BVToStore: cond12.i.i_0_164
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_121 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_0_164 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then72.i,16},{if.else75.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_0_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_0_165
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleLoadInst] (= dst_reg_0_123 i37.i.i_0_165)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_0_123 i37.i.i_0_165)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_0_165
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_0_167
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_0_167
[handleICmpInst] (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %i38.i.i = load i64, i64* %umin_value63.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[handleLoadInst] pointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 35 = MemoryPhi({if.then72.i,16},{if.else75.i,18})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_0_168
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_0_168
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleLoadInst] (= dst_reg_0_122 i38.i.i_0_168)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value49.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_0_168
[handleStoreInst] BVToStore: i38.i.i_0_168
[handleStoreInst] destPointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_0_168 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_0_155
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_0_165
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_0_169
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_0_169
[handleICmpInst] (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 25 = MemoryDef(20)
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 

[handleSelectInst]SelectMap:
cond27.i.i,i33.i.i,i37.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_0_169
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_0_155
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_0_165
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_0_170
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_0_170
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_0_169
[handleSelectInst] z3ExprSelectOp2: i33.i.i_0_155
[handleSelectInst] z3ExprSelectOp3: i37.i.i_0_165
[handleSelectInst] z3ExprRes: cond27.i.i_0_170
[handleSelectInst](ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_0_170
[handleStoreInst] BVToStore: cond27.i.i_0_170
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_123 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_0_170 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_0_170
[handleStoreInst] BVToStore: cond27.i.i_0_170
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_121 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_0_170 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_0_168
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_0_172
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_0_172
[handleICmpInst] (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_0_152
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_0_168
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_0_173
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_0_173
[handleICmpInst] (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 27 = MemoryDef(26)
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_0_173
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value49.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_0_152
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_0_168
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_0_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_0_174
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_0_173
[handleSelectInst] z3ExprSelectOp2: i.i322.i_0_152
[handleSelectInst] z3ExprSelectOp3: i38.i.i_0_168
[handleSelectInst] z3ExprRes: cond40.i.i_0_174
[handleSelectInst](ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
-------------------
  store i64 %cond40.i.i, i64* %umin_value63.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_0_174
[handleStoreInst] BVToStore: cond40.i.i_0_174
[handleStoreInst] destPointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_122 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_0_174 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value49.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_0_174
[handleStoreInst] BVToStore: cond40.i.i_0_174
[handleStoreInst] destPointerValue:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_0_174 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_0_165
[handleStoreInst] BVToStore: i37.i.i_0_165
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_121 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_0_165 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_175
[lookInsideStruct] singleValueType:dst_reg_0_175
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_176
[lookInsideStruct] singleValueType:dst_reg_0_176
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_177
[lookInsideStruct] singleValueType:dst_reg_0_177
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_178
[lookInsideStruct] singleValueType:dst_reg_0_178
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_179
[lookInsideStruct] singleValueType:dst_reg_0_179
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_180
[lookInsideStruct] singleValueType:dst_reg_0_180
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_181
[lookInsideStruct] singleValueType:dst_reg_0_181
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_182
[lookInsideStruct] singleValueType:dst_reg_0_182
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_183
[lookInsideStruct] singleValueType:dst_reg_0_183
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_184
[lookInsideStruct] singleValueType:dst_reg_0_184
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_185
[lookInsideStruct] singleValueType:dst_reg_0_185
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_186
[lookInsideStruct] singleValueType:dst_reg_0_186
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_187
[lookInsideStruct] singleValueType:dst_reg_0_187
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_188
[lookInsideStruct] singleValueType:dst_reg_0_188
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_189
[lookInsideStruct] singleValueType:src_reg_0_189
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_190
[lookInsideStruct] singleValueType:src_reg_0_190
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_191
[lookInsideStruct] singleValueType:src_reg_0_191
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_192
[lookInsideStruct] singleValueType:src_reg_0_192
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_193
[lookInsideStruct] singleValueType:src_reg_0_193
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_194
[lookInsideStruct] singleValueType:src_reg_0_194
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_195
[lookInsideStruct] singleValueType:src_reg_0_195
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_196
[lookInsideStruct] singleValueType:src_reg_0_196
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_197
[lookInsideStruct] singleValueType:src_reg_0_197
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_198
[lookInsideStruct] singleValueType:src_reg_0_198
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_199
[lookInsideStruct] singleValueType:src_reg_0_199
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_200
[lookInsideStruct] singleValueType:src_reg_0_200
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_201
[lookInsideStruct] singleValueType:src_reg_0_201
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_202
[lookInsideStruct] singleValueType:src_reg_0_202
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 24 = MemoryDef(23)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_128 src_reg_0_189)
(= src_reg_0_129 src_reg_0_190)
(= src_reg_0_130 src_reg_0_191)
(= src_reg_0_131 src_reg_0_192)
(= src_reg_0_132 src_reg_0_193)
(= src_reg_0_133 src_reg_0_194)
(= src_reg_0_134 src_reg_0_195)
(= src_reg_0_135 src_reg_0_196)
(= src_reg_0_136 src_reg_0_197)
(= src_reg_0_137 src_reg_0_198)
(= src_reg_0_138 src_reg_0_199)
(= src_reg_0_139 src_reg_0_200)
(= src_reg_0_140 src_reg_0_201)
(= src_reg_0_141 src_reg_0_202)
(= dst_reg_0_114 dst_reg_0_175)
(= dst_reg_0_115 dst_reg_0_176)
(= dst_reg_0_116 dst_reg_0_177)
(= dst_reg_0_117 dst_reg_0_178)
(= and.i.i_0_151 dst_reg_0_179)
(= or7.i.i_0_148 dst_reg_0_180)
(= cond.i327.i_0_160 dst_reg_0_181)
(= cond12.i.i_0_164 dst_reg_0_182)
(= cond.i327.i_0_160 dst_reg_0_183)
(= cond12.i.i_0_164 dst_reg_0_184)
(= dst_reg_0_124 dst_reg_0_185)
(= dst_reg_0_125 dst_reg_0_186)
(= dst_reg_0_126 dst_reg_0_187)
(= dst_reg_0_127 dst_reg_0_188)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 27 = MemoryDef(26)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_128 src_reg_0_189)
(= src_reg_0_129 src_reg_0_190)
(= src_reg_0_130 src_reg_0_191)
(= src_reg_0_131 src_reg_0_192)
(= src_reg_0_132 src_reg_0_193)
(= src_reg_0_133 src_reg_0_194)
(= src_reg_0_134 src_reg_0_195)
(= src_reg_0_135 src_reg_0_196)
(= src_reg_0_136 src_reg_0_197)
(= src_reg_0_137 src_reg_0_198)
(= src_reg_0_138 src_reg_0_199)
(= src_reg_0_139 src_reg_0_200)
(= src_reg_0_140 src_reg_0_201)
(= src_reg_0_141 src_reg_0_202)
(= dst_reg_0_114 dst_reg_0_175)
(= dst_reg_0_115 dst_reg_0_176)
(= dst_reg_0_116 dst_reg_0_177)
(= dst_reg_0_117 dst_reg_0_178)
(= and.i.i_0_151 dst_reg_0_179)
(= or7.i.i_0_148 dst_reg_0_180)
(= i38.i.i_0_168 dst_reg_0_181)
(= cond27.i.i_0_170 dst_reg_0_182)
(= dst_reg_0_122 dst_reg_0_183)
(= cond27.i.i_0_170 dst_reg_0_184)
(= dst_reg_0_124 dst_reg_0_185)
(= dst_reg_0_125 dst_reg_0_186)
(= dst_reg_0_126 dst_reg_0_187)
(= dst_reg_0_127 dst_reg_0_188)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 20 = MemoryDef(19)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_128 src_reg_0_189)
(= src_reg_0_129 src_reg_0_190)
(= src_reg_0_130 src_reg_0_191)
(= src_reg_0_131 src_reg_0_192)
(= src_reg_0_132 src_reg_0_193)
(= src_reg_0_133 src_reg_0_194)
(= src_reg_0_134 src_reg_0_195)
(= src_reg_0_135 src_reg_0_196)
(= src_reg_0_136 src_reg_0_197)
(= src_reg_0_137 src_reg_0_198)
(= src_reg_0_138 src_reg_0_199)
(= src_reg_0_139 src_reg_0_200)
(= src_reg_0_140 src_reg_0_201)
(= src_reg_0_141 src_reg_0_202)
(= dst_reg_0_114 dst_reg_0_175)
(= dst_reg_0_115 dst_reg_0_176)
(= dst_reg_0_116 dst_reg_0_177)
(= dst_reg_0_117 dst_reg_0_178)
(= and.i.i_0_151 dst_reg_0_179)
(= or7.i.i_0_148 dst_reg_0_180)
(= dst_reg_0_120 dst_reg_0_181)
(= dst_reg_0_121 dst_reg_0_182)
(= dst_reg_0_122 dst_reg_0_183)
(= dst_reg_0_123 dst_reg_0_184)
(= dst_reg_0_124 dst_reg_0_185)
(= dst_reg_0_125 dst_reg_0_186)
(= dst_reg_0_126 dst_reg_0_187)
(= dst_reg_0_127 dst_reg_0_188)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 30 = MemoryDef(29)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_128 src_reg_0_189)
(= src_reg_0_129 src_reg_0_190)
(= src_reg_0_130 src_reg_0_191)
(= src_reg_0_131 src_reg_0_192)
(= src_reg_0_132 src_reg_0_193)
(= src_reg_0_133 src_reg_0_194)
(= src_reg_0_134 src_reg_0_195)
(= src_reg_0_135 src_reg_0_196)
(= src_reg_0_136 src_reg_0_197)
(= src_reg_0_137 src_reg_0_198)
(= src_reg_0_138 src_reg_0_199)
(= src_reg_0_139 src_reg_0_200)
(= src_reg_0_140 src_reg_0_201)
(= src_reg_0_141 src_reg_0_202)
(= dst_reg_0_114 dst_reg_0_175)
(= dst_reg_0_115 dst_reg_0_176)
(= dst_reg_0_116 dst_reg_0_177)
(= dst_reg_0_117 dst_reg_0_178)
(= and.i.i_0_151 dst_reg_0_179)
(= or7.i.i_0_148 dst_reg_0_180)
(= cond40.i.i_0_174 dst_reg_0_181)
(= i37.i.i_0_165 dst_reg_0_182)
(= cond40.i.i_0_174 dst_reg_0_183)
(= dst_reg_0_123 dst_reg_0_184)
(= dst_reg_0_124 dst_reg_0_185)
(= dst_reg_0_125 dst_reg_0_186)
(= dst_reg_0_126 dst_reg_0_187)
(= dst_reg_0_127 dst_reg_0_188)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= cond40.i.i_0_174 dst_reg_0_181)
  (= i37.i.i_0_165 dst_reg_0_182)
  (= cond40.i.i_0_174 dst_reg_0_183)
  (= dst_reg_0_123 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= i38.i.i_0_168 dst_reg_0_181)
  (= cond27.i.i_0_170 dst_reg_0_182)
  (= dst_reg_0_122 dst_reg_0_183)
  (= cond27.i.i_0_170 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= cond.i327.i_0_160 dst_reg_0_181)
  (= cond12.i.i_0_164 dst_reg_0_182)
  (= cond.i327.i_0_160 dst_reg_0_183)
  (= cond12.i.i_0_164 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.else75.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= add64.i_0_105 dst_reg_0_122)
  (= add79.i_0_113 dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.then72.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= #x0000000000000000 dst_reg_0_122)
  (= #xffffffffffffffff dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.else.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= add.i.i_0_61 dst_reg_0_82)
  (= add.i36.i_0_68 dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= dst_reg_0_120 dst_reg_0_181)
  (= dst_reg_0_121 dst_reg_0_182)
  (= dst_reg_0_122 dst_reg_0_183)
  (= dst_reg_0_123 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then56.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= #x8000000000000000 dst_reg_0_82)
  (= #x7fffffffffffffff dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
-------------------
  %i.i333.i = load i64, i64* %umin_value63.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[handleLoadInst] pointerValue:   %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_0_203
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_0_203
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleLoadInst] (= dst_reg_0_183 i.i333.i_0_203)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_0_183 i.i333.i_0_203)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
smax_value.i324.i, dst_reg, [7]
smax_value58.i, dst_reg, [7]
smax_value53.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
umin_value63.i, dst_reg, [8]
type1, src_reg, [0]
var_off.i.i.repack1, dst_reg, [5, 1]
umax_value68.i, dst_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value74.i, dst_reg, [9]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
smax_value6.i.i, dst_reg, [7]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i213.i, dst_reg, [5, 0]
smin_value49.i, dst_reg, [6]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_0_204
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_0_204
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleLoadInst] (= dst_reg_0_184 i5.i.i_0_204)
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_0_204
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_0_203
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_0_205
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_0_205
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_0_205
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_0_207
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_0_207
[handleICmpInst] (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_0_205
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_0_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_0_209
[handleICmpInst] (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_0_205
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_0_211
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_0_211
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond27.i.i,i33.i.i,i37.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_0_209
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_0_211
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_0_205
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_0_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_0_212
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_0_209
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_0_211
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_0_205
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_0_212
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond27.i.i,i33.i.i,i37.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_0_209
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_0_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_0_215
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_0_209
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_0_215
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_0_212
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_0_217
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_0_217
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_0_215
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_0_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_0_219
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_0_212
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_0_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_0_221
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond27.i.i,i33.i.i,i37.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_0_217
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_0_221
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_0_212
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_0_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_0_222
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_0_217
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_0_221
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_0_212
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_0_222
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond27.i.i,i33.i.i,i37.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_0_217
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_0_219
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_0_215
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_0_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_0_223
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_0_217
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_0_219
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_0_215
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_0_223
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_0_222
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_0_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_0_225
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
  (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
  (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
  (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_0_223
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_0_227
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_0_227
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_0_222
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_0_229
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_0_229
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_0_225
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_0_229
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_0_222
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_0_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_0_230
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_0_225
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_0_229
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_0_222
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_0_230
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229)
     (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_0_225
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_0_227
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_0_223
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_0_231
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_0_231
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_0_225
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_0_227
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_0_223
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_0_231
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227)
     (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_0_230
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_0_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_0_233
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_0_230 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= tobool14.not.i.i.i.i.i_0_233 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
  (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
  (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
  (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
  (= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 #xfffffff8))
  (= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229)
     (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227)
     (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))
  (ite (bvult word.addr.2.i.i.i.i.i_0_230 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= tobool14.not.i.i.i.i.i_0_233 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_0_231
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_0_235
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_0_235
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_0_235 (bvadd num.2.i.i.i.i.i_0_231 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_0_230
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_0_237
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_0_237
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_0_237 (bvshl word.addr.2.i.i.i.i.i_0_230 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_0_233
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_0_237
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_0_230
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_0_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_0_238
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_0_233
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_0_237
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_0_230
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_0_238
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= word.addr.3.i.i.i.i.i_0_238 shl17.i.i.i.i.i_0_237)
     (= word.addr.3.i.i.i.i.i_0_238 word.addr.2.i.i.i.i.i_0_230))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_0_233
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_0_235
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_0_231
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_0_239
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_0_239
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_0_233
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_0_235
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_0_231
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_0_239
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= num.3.i.i.i.i.i_0_239 sub16.i.i.i.i.i_0_235)
     (= num.3.i.i.i.i.i_0_239 num.2.i.i.i.i.i_0_231))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_0_238
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_0_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_0_241
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_0_238 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= tobool20.not.i.i.i.i.i_0_241 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
  (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
  (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
  (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
  (= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 #xfffffff8))
  (= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229)
     (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227)
     (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))
  (ite (bvult word.addr.2.i.i.i.i.i_0_230 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= tobool14.not.i.i.i.i.i_0_233 #b0))
  (= sub16.i.i.i.i.i_0_235 (bvadd num.2.i.i.i.i.i_0_231 #xfffffffc))
  (= shl17.i.i.i.i.i_0_237 (bvshl word.addr.2.i.i.i.i.i_0_230 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= word.addr.3.i.i.i.i.i_0_238 shl17.i.i.i.i.i_0_237)
     (= word.addr.3.i.i.i.i.i_0_238 word.addr.2.i.i.i.i.i_0_230))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= num.3.i.i.i.i.i_0_239 sub16.i.i.i.i.i_0_235)
     (= num.3.i.i.i.i.i_0_239 num.2.i.i.i.i.i_0_231))
  (ite (bvult word.addr.3.i.i.i.i.i_0_238 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= tobool20.not.i.i.i.i.i_0_241 #b0))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_0_239
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_0_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_0_243
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_0_243 (bvadd num.3.i.i.i.i.i_0_239 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_0_238
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_0_245
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_0_245
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_0_245 (bvshl word.addr.3.i.i.i.i.i_0_238 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_0_241
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_0_245
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_0_238
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_0_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_0_246
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_0_241
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_0_245
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_0_238
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_0_246
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= word.addr.4.i.i.i.i.i_0_246 shl23.i.i.i.i.i_0_245)
     (= word.addr.4.i.i.i.i.i_0_246 word.addr.3.i.i.i.i.i_0_238))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_0_241
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_0_243
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_0_239
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_0_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_0_247
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_0_241
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_0_243
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_0_239
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_0_247
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= num.4.i.i.i.i.i_0_247 sub22.i.i.i.i.i_0_243)
     (= num.4.i.i.i.i.i_0_247 num.3.i.i.i.i.i_0_239))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_0_246
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_0_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_0_249
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_0_249
   (bvlshr word.addr.4.i.i.i.i.i_0_246 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_0_249
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_0_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_0_250
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_0_250
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_0_249))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_0_247
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_0_250
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_0_251
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_0_251
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_0_251 (bvadd num.4.i.i.i.i.i_0_247 i.i.i.i.i.i.neg_0_250))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_0_251
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_0_253
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_0_253
[handleBinaryOperatorInst] AND instruction
(= phi.bo_0_253 (bvand add.i.i.i335.i_0_251 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_0_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_0_256
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_0_253
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
    (= retval.0.i.i.i.i_0_256 phi.bo_0_253))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
    (= retval.0.i.i.i.i_0_256 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
    (= retval.0.i.i.i.i_0_256 phi.bo_0_253))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
    (= retval.0.i.i.i.i_0_256 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_0_256
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_0_259
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_0_259
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_0_256 #x0000003f)
     (= cmp.i.i.i_0_259 #b1)
     (= cmp.i.i.i_0_259 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
  (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
  (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
  (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
  (= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 #xfffffff8))
  (= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229)
     (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227)
     (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))
  (ite (bvult word.addr.2.i.i.i.i.i_0_230 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= tobool14.not.i.i.i.i.i_0_233 #b0))
  (= sub16.i.i.i.i.i_0_235 (bvadd num.2.i.i.i.i.i_0_231 #xfffffffc))
  (= shl17.i.i.i.i.i_0_237 (bvshl word.addr.2.i.i.i.i.i_0_230 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= word.addr.3.i.i.i.i.i_0_238 shl17.i.i.i.i.i_0_237)
     (= word.addr.3.i.i.i.i.i_0_238 word.addr.2.i.i.i.i.i_0_230))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= num.3.i.i.i.i.i_0_239 sub16.i.i.i.i.i_0_235)
     (= num.3.i.i.i.i.i_0_239 num.2.i.i.i.i.i_0_231))
  (ite (bvult word.addr.3.i.i.i.i.i_0_238 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= tobool20.not.i.i.i.i.i_0_241 #b0))
  (= sub22.i.i.i.i.i_0_243 (bvadd num.3.i.i.i.i.i_0_239 #x000000fe))
  (= shl23.i.i.i.i.i_0_245 (bvshl word.addr.3.i.i.i.i.i_0_238 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= word.addr.4.i.i.i.i.i_0_246 shl23.i.i.i.i.i_0_245)
     (= word.addr.4.i.i.i.i.i_0_246 word.addr.3.i.i.i.i.i_0_238))
  (ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= num.4.i.i.i.i.i_0_247 sub22.i.i.i.i.i_0_243)
     (= num.4.i.i.i.i.i_0_247 num.3.i.i.i.i.i_0_239))
  (= word.addr.4.lobit.i.i.i.i.i.neg_0_249
   (bvlshr word.addr.4.i.i.i.i.i_0_246 #x000000000000003f))
  (= i.i.i.i.i.i.neg_0_250
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_0_249))
  (= add.i.i.i335.i_0_251 (bvadd num.4.i.i.i.i.i_0_247 i.i.i.i.i.i.neg_0_250))
  (= phi.bo_0_253 (bvand add.i.i.i335.i_0_251 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
    (= retval.0.i.i.i.i_0_256 phi.bo_0_253))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
    (= retval.0.i.i.i.i_0_256 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_0_256 #x0000003f)
     (= cmp.i.i.i_0_259 #b1)
     (= cmp.i.i.i_0_259 #b0))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:3
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:11
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_0_256
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_0_260
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_0_260
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_0_260 ((_ zero_extend 32) retval.0.i.i.i.i_0_256))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_0_260
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_0_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_0_262
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_0_262 (bvshl #xffffffffffffffff sh_prom.i.i.i_0_260))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_0_262
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_0_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_0_264
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_0_264 (bvxor notmask.i.i.i_0_262 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_0_262
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value63.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_0_203
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_0_265
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_0_265
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_0_265 (bvand notmask.i.i.i_0_262 i.i333.i_0_203))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_0_259
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_0_265
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_0_267
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_0_267
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_0_259
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_0_265
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_0_267
[handleSelectInst](ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.0.0.i.i.i_0_267 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_0_267 and.i.i336.i_0_265))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
or.cond197.i,,cmp18.not.i
or.cond199.i,,cmp24.i
or.cond200.i,,cmp24.old.i
retval.0.i.i,cmp1.i.i,cmp2.i.i
retval.0.i40.i,cmp1.i38.i,cmp2.i39.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond40.i.i,i.i322.i,i38.i.i
cond27.i.i,i33.i.i,i37.i.i
spec.select17.i.i.i.i.i,,
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_0_259
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_0_264
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_0_269
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_0_269
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_0_259
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_0_264
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_0_269
[handleSelectInst](ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.3.0.i.i.i_0_269 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_0_269 sub.i.i.i_0_264))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i = and i64 %add3.i.i, %neg.i.i
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_0_267
[getBitVecSingValType]   %and.i.i = and i64 %add3.i.i, %neg.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i_0_151
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_0_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_0_270
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_0_270 (bvor retval.sroa.0.0.i.i.i_0_267 and.i.i_0_151))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %or7.i.i = or i64 %or.i.i, %xor.i.i
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_0_269
[getBitVecSingValType]   %or7.i.i = or i64 %or.i.i, %xor.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or7.i.i_0_148
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_0_271
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_0_271
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_0_271 (bvand retval.sroa.3.0.i.i.i_0_269 or7.i.i_0_148))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_0_271
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_0_273
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_0_273
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_0_273 (bvxor and.i1.i.i_0_271 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_0_270
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_0_273
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_0_274
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_0_274
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_0_274 (bvand or.i.i.i_0_270 neg.i.i.i_0_273))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_0_274
[handleStoreInst] BVToStore: and4.i.i.i_0_274
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_179 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_0_274 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_0_271
[handleStoreInst] BVToStore: and.i1.i.i_0_271
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_0_180 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_0_271 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ and.i1.i.i_0_271 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_275
[lookInsideStruct] singleValueType:dst_reg_0_275
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_276
[lookInsideStruct] singleValueType:dst_reg_0_276
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_277
[lookInsideStruct] singleValueType:dst_reg_0_277
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_278
[lookInsideStruct] singleValueType:dst_reg_0_278
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_279
[lookInsideStruct] singleValueType:dst_reg_0_279
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_280
[lookInsideStruct] singleValueType:dst_reg_0_280
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_281
[lookInsideStruct] singleValueType:dst_reg_0_281
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_282
[lookInsideStruct] singleValueType:dst_reg_0_282
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_283
[lookInsideStruct] singleValueType:dst_reg_0_283
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_284
[lookInsideStruct] singleValueType:dst_reg_0_284
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_285
[lookInsideStruct] singleValueType:dst_reg_0_285
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_286
[lookInsideStruct] singleValueType:dst_reg_0_286
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_287
[lookInsideStruct] singleValueType:dst_reg_0_287
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_288
[lookInsideStruct] singleValueType:dst_reg_0_288
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_289
[lookInsideStruct] singleValueType:src_reg_0_289
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_290
[lookInsideStruct] singleValueType:src_reg_0_290
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_291
[lookInsideStruct] singleValueType:src_reg_0_291
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_292
[lookInsideStruct] singleValueType:src_reg_0_292
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_293
[lookInsideStruct] singleValueType:src_reg_0_293
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_294
[lookInsideStruct] singleValueType:src_reg_0_294
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_295
[lookInsideStruct] singleValueType:src_reg_0_295
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_296
[lookInsideStruct] singleValueType:src_reg_0_296
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_297
[lookInsideStruct] singleValueType:src_reg_0_297
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_298
[lookInsideStruct] singleValueType:src_reg_0_298
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_299
[lookInsideStruct] singleValueType:src_reg_0_299
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_300
[lookInsideStruct] singleValueType:src_reg_0_300
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_301
[lookInsideStruct] singleValueType:src_reg_0_301
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_302
[lookInsideStruct] singleValueType:src_reg_0_302
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
- dst_reg: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_0_289)
(= src_reg_0_15 src_reg_0_290)
(= src_reg_0_16 src_reg_0_291)
(= src_reg_0_17 src_reg_0_292)
(= src_reg_0_18 src_reg_0_293)
(= src_reg_0_19 src_reg_0_294)
(= src_reg_0_20 src_reg_0_295)
(= src_reg_0_21 src_reg_0_296)
(= src_reg_0_22 src_reg_0_297)
(= src_reg_0_23 src_reg_0_298)
(= src_reg_0_24 src_reg_0_299)
(= src_reg_0_25 src_reg_0_300)
(= src_reg_0_26 src_reg_0_301)
(= src_reg_0_27 src_reg_0_302)
(= #x00000001 dst_reg_0_275)
(= dst_reg_0_1 dst_reg_0_276)
(= dst_reg_0_2 dst_reg_0_277)
(= dst_reg_0_3 dst_reg_0_278)
(= #x0000000000000000 dst_reg_0_279)
(= #xffffffffffffffff dst_reg_0_280)
(= #x8000000000000000 dst_reg_0_281)
(= #x7fffffffffffffff dst_reg_0_282)
(= #x0000000000000000 dst_reg_0_283)
(= #xffffffffffffffff dst_reg_0_284)
(= #x00000000 dst_reg_0_285)
(= dst_reg_0_11 dst_reg_0_286)
(= dst_reg_0_12 dst_reg_0_287)
(= dst_reg_0_13 dst_reg_0_288)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 32 = MemoryDef(31)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ and.i1.i.i_0_271 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ and.i1.i.i_0_271 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_0_189 src_reg_0_289)
(= src_reg_0_190 src_reg_0_290)
(= src_reg_0_191 src_reg_0_291)
(= src_reg_0_192 src_reg_0_292)
(= src_reg_0_193 src_reg_0_293)
(= src_reg_0_194 src_reg_0_294)
(= src_reg_0_195 src_reg_0_295)
(= src_reg_0_196 src_reg_0_296)
(= src_reg_0_197 src_reg_0_297)
(= src_reg_0_198 src_reg_0_298)
(= src_reg_0_199 src_reg_0_299)
(= src_reg_0_200 src_reg_0_300)
(= src_reg_0_201 src_reg_0_301)
(= src_reg_0_202 src_reg_0_302)
(= dst_reg_0_175 dst_reg_0_275)
(= dst_reg_0_176 dst_reg_0_276)
(= dst_reg_0_177 dst_reg_0_277)
(= dst_reg_0_178 dst_reg_0_278)
(= and4.i.i.i_0_274 dst_reg_0_279)
(= and.i1.i.i_0_271 dst_reg_0_280)
(= dst_reg_0_181 dst_reg_0_281)
(= dst_reg_0_182 dst_reg_0_282)
(= dst_reg_0_183 dst_reg_0_283)
(= dst_reg_0_184 dst_reg_0_284)
(= dst_reg_0_185 dst_reg_0_285)
(= dst_reg_0_186 dst_reg_0_286)
(= dst_reg_0_187 dst_reg_0_287)
(= dst_reg_0_188 dst_reg_0_288)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_0_189 src_reg_0_289)
  (= src_reg_0_190 src_reg_0_290)
  (= src_reg_0_191 src_reg_0_291)
  (= src_reg_0_192 src_reg_0_292)
  (= src_reg_0_193 src_reg_0_293)
  (= src_reg_0_194 src_reg_0_294)
  (= src_reg_0_195 src_reg_0_295)
  (= src_reg_0_196 src_reg_0_296)
  (= src_reg_0_197 src_reg_0_297)
  (= src_reg_0_198 src_reg_0_298)
  (= src_reg_0_199 src_reg_0_299)
  (= src_reg_0_200 src_reg_0_300)
  (= src_reg_0_201 src_reg_0_301)
  (= src_reg_0_202 src_reg_0_302)
  (= dst_reg_0_175 dst_reg_0_275)
  (= dst_reg_0_176 dst_reg_0_276)
  (= dst_reg_0_177 dst_reg_0_277)
  (= dst_reg_0_178 dst_reg_0_278)
  (= and4.i.i.i_0_274 dst_reg_0_279)
  (= and.i1.i.i_0_271 dst_reg_0_280)
  (= dst_reg_0_181 dst_reg_0_281)
  (= dst_reg_0_182 dst_reg_0_282)
  (= dst_reg_0_183 dst_reg_0_283)
  (= dst_reg_0_184 dst_reg_0_284)
  (= dst_reg_0_185 dst_reg_0_285)
  (= dst_reg_0_186 dst_reg_0_286)
  (= dst_reg_0_187 dst_reg_0_287)
  (= dst_reg_0_188 dst_reg_0_288)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= cond40.i.i_0_174 dst_reg_0_181)
  (= i37.i.i_0_165 dst_reg_0_182)
  (= cond40.i.i_0_174 dst_reg_0_183)
  (= dst_reg_0_123 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_0_289)
  (= src_reg_0_15 src_reg_0_290)
  (= src_reg_0_16 src_reg_0_291)
  (= src_reg_0_17 src_reg_0_292)
  (= src_reg_0_18 src_reg_0_293)
  (= src_reg_0_19 src_reg_0_294)
  (= src_reg_0_20 src_reg_0_295)
  (= src_reg_0_21 src_reg_0_296)
  (= src_reg_0_22 src_reg_0_297)
  (= src_reg_0_23 src_reg_0_298)
  (= src_reg_0_24 src_reg_0_299)
  (= src_reg_0_25 src_reg_0_300)
  (= src_reg_0_26 src_reg_0_301)
  (= src_reg_0_27 src_reg_0_302)
  (= #x00000001 dst_reg_0_275)
  (= dst_reg_0_1 dst_reg_0_276)
  (= dst_reg_0_2 dst_reg_0_277)
  (= dst_reg_0_3 dst_reg_0_278)
  (= #x0000000000000000 dst_reg_0_279)
  (= #xffffffffffffffff dst_reg_0_280)
  (= #x8000000000000000 dst_reg_0_281)
  (= #x7fffffffffffffff dst_reg_0_282)
  (= #x0000000000000000 dst_reg_0_283)
  (= #xffffffffffffffff dst_reg_0_284)
  (= #x00000000 dst_reg_0_285)
  (= dst_reg_0_11 dst_reg_0_286)
  (= dst_reg_0_12 dst_reg_0_287)
  (= dst_reg_0_13 dst_reg_0_288)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= i38.i.i_0_168 dst_reg_0_181)
  (= cond27.i.i_0_170 dst_reg_0_182)
  (= dst_reg_0_122 dst_reg_0_183)
  (= cond27.i.i_0_170 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= cond.i327.i_0_160 dst_reg_0_181)
  (= cond12.i.i_0_164 dst_reg_0_182)
  (= cond.i327.i_0_160 dst_reg_0_183)
  (= cond12.i.i_0_164 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.else75.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= add64.i_0_105 dst_reg_0_122)
  (= add79.i_0_113 dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.then72.i, if.end80.i> :
  (= src_reg_0_90 src_reg_0_128)
  (= src_reg_0_91 src_reg_0_129)
  (= src_reg_0_92 src_reg_0_130)
  (= src_reg_0_93 src_reg_0_131)
  (= src_reg_0_94 src_reg_0_132)
  (= src_reg_0_95 src_reg_0_133)
  (= src_reg_0_96 src_reg_0_134)
  (= src_reg_0_97 src_reg_0_135)
  (= src_reg_0_98 src_reg_0_136)
  (= src_reg_0_99 src_reg_0_137)
  (= src_reg_0_100 src_reg_0_138)
  (= src_reg_0_101 src_reg_0_139)
  (= src_reg_0_102 src_reg_0_140)
  (= src_reg_0_103 src_reg_0_141)
  (= dst_reg_0_76 dst_reg_0_114)
  (= dst_reg_0_77 dst_reg_0_115)
  (= dst_reg_0_78 dst_reg_0_116)
  (= dst_reg_0_79 dst_reg_0_117)
  (= dst_reg_0_80 dst_reg_0_118)
  (= dst_reg_0_81 dst_reg_0_119)
  (= dst_reg_0_82 dst_reg_0_120)
  (= dst_reg_0_83 dst_reg_0_121)
  (= #x0000000000000000 dst_reg_0_122)
  (= #xffffffffffffffff dst_reg_0_123)
  (= dst_reg_0_86 dst_reg_0_124)
  (= dst_reg_0_87 dst_reg_0_125)
  (= dst_reg_0_88 dst_reg_0_126)
  (= dst_reg_0_89 dst_reg_0_127)
<if.else.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= add.i.i_0_61 dst_reg_0_82)
  (= add.i36.i_0_68 dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_0_128 src_reg_0_189)
  (= src_reg_0_129 src_reg_0_190)
  (= src_reg_0_130 src_reg_0_191)
  (= src_reg_0_131 src_reg_0_192)
  (= src_reg_0_132 src_reg_0_193)
  (= src_reg_0_133 src_reg_0_194)
  (= src_reg_0_134 src_reg_0_195)
  (= src_reg_0_135 src_reg_0_196)
  (= src_reg_0_136 src_reg_0_197)
  (= src_reg_0_137 src_reg_0_198)
  (= src_reg_0_138 src_reg_0_199)
  (= src_reg_0_139 src_reg_0_200)
  (= src_reg_0_140 src_reg_0_201)
  (= src_reg_0_141 src_reg_0_202)
  (= dst_reg_0_114 dst_reg_0_175)
  (= dst_reg_0_115 dst_reg_0_176)
  (= dst_reg_0_116 dst_reg_0_177)
  (= dst_reg_0_117 dst_reg_0_178)
  (= and.i.i_0_151 dst_reg_0_179)
  (= or7.i.i_0_148 dst_reg_0_180)
  (= dst_reg_0_120 dst_reg_0_181)
  (= dst_reg_0_121 dst_reg_0_182)
  (= dst_reg_0_122 dst_reg_0_183)
  (= dst_reg_0_123 dst_reg_0_184)
  (= dst_reg_0_124 dst_reg_0_185)
  (= dst_reg_0_125 dst_reg_0_186)
  (= dst_reg_0_126 dst_reg_0_187)
  (= dst_reg_0_127 dst_reg_0_188)
<if.then56.i, if.end62.i> :
  (= #x00000001 src_reg_0_90)
  (= src_reg_0_15 src_reg_0_91)
  (= src_reg_0_16 src_reg_0_92)
  (= src_reg_0_17 src_reg_0_93)
  (= src_reg_0_18 src_reg_0_94)
  (= src_reg_0_19 src_reg_0_95)
  (= src_reg_0_20 src_reg_0_96)
  (= src_reg_0_21 src_reg_0_97)
  (= src_reg_0_22 src_reg_0_98)
  (= src_reg_0_23 src_reg_0_99)
  (= src_reg_0_24 src_reg_0_100)
  (= src_reg_0_25 src_reg_0_101)
  (= src_reg_0_26 src_reg_0_102)
  (= src_reg_0_27 src_reg_0_103)
  (= #x00000001 dst_reg_0_76)
  (= dst_reg_0_1 dst_reg_0_77)
  (= dst_reg_0_2 dst_reg_0_78)
  (= dst_reg_0_3 dst_reg_0_79)
  (= dst_reg_0_4 dst_reg_0_80)
  (= dst_reg_0_5 dst_reg_0_81)
  (= #x8000000000000000 dst_reg_0_82)
  (= #x7fffffffffffffff dst_reg_0_83)
  (= dst_reg_0_8 dst_reg_0_84)
  (= dst_reg_0_9 dst_reg_0_85)
  (= dst_reg_0_10 dst_reg_0_86)
  (= dst_reg_0_11 dst_reg_0_87)
  (= dst_reg_0_12 dst_reg_0_88)
  (= dst_reg_0_13 dst_reg_0_89)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_0_37
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_0_37 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_0_37 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_0_37 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_0_47
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
if.then26.i
  (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
if.then26.i
  (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_0_51
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.end27.i
=========================
-------------------
  %smin_value49.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i219.i = load i64, i64* %smin_value49.i, align 8
-------------------
-------------------
  %add.i.i = add i64 %i219.i, %src_reg1.sroa.13.0.copyload
-------------------
-------------------
  %cmp.i35.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
-------------------
  %cmp1.i.i = icmp sgt i64 %add.i.i, %i219.i
-------------------
-------------------
  %cmp2.i.i = icmp slt i64 %add.i.i, %i219.i
-------------------
-------------------
  %retval.0.i.i = select i1 %cmp.i35.i, i1 %cmp1.i.i, i1 %cmp2.i.i
-------------------
-------------------
  br i1 %retval.0.i.i, label %if.then56.i, label %lor.lhs.false52.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %retval.0.i.i = select i1 %cmp.i35.i, i1 %cmp1.i.i, i1 %cmp2.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i_0_66
[handleBranchInst] Edge Assertions:
<if.end27.i, if.then56.i>: (and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i>: (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then56.i: (and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] lor.lhs.false52.i: (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] <if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] <if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
lor.lhs.false52.i
=========================
-------------------
  %smax_value53.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i220.i = load i64, i64* %smax_value53.i, align 8
-------------------
-------------------
  %add.i36.i = add i64 %i220.i, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp.i37.i = icmp slt i64 %src_reg1.sroa.15.0.copyload, 0
-------------------
-------------------
  %cmp1.i38.i = icmp sgt i64 %add.i36.i, %i220.i
-------------------
-------------------
  %cmp2.i39.i = icmp slt i64 %add.i36.i, %i220.i
-------------------
-------------------
  %retval.0.i40.i = select i1 %cmp.i37.i, i1 %cmp1.i38.i, i1 %cmp2.i39.i
-------------------
-------------------
  br i1 %retval.0.i40.i, label %if.then56.i, label %if.else.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %retval.0.i40.i = select i1 %cmp.i37.i, i1 %cmp1.i38.i, i1 %cmp2.i39.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i40.i_0_73
[handleBranchInst] Edge Assertions:
<lor.lhs.false52.i, if.then56.i>: (and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i>: (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then56.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
[handleBranchInst] if.else.i: (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] <lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] <lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.then56.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value49.i, align 8
-------------------
-------------------
  %smax_value58.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value58.i, align 8
-------------------
-------------------
  br label %if.end62.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end62.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
[handleBranchInst] if.end62.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
[handleBranchInst] <if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
[handleBranchInst] EdgeAssertionsMap:
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.else.i
=========================
-------------------
  store i64 %add.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %add.i36.i, i64* %smax_value53.i, align 8
-------------------
-------------------
  br label %if.end62.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end62.i
[handleBranchInst] newPathCond: (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] if.end62.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
[handleBranchInst] <if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.end62.i
=========================
-------------------
  %umin_value63.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i221.i = load i64, i64* %umin_value63.i, align 8
-------------------
-------------------
  %add64.i = add i64 %i221.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp65.i = icmp ult i64 %add64.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  br i1 %cmp65.i, label %if.then72.i, label %lor.lhs.false67.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp65.i = icmp ult i64 %add64.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp65.i_0_106
[handleBranchInst] Edge Assertions:
<if.end62.i, if.then72.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.end62.i, lor.lhs.false67.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then72.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
[handleBranchInst] lor.lhs.false67.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] <if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
[handleBranchInst] <if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
lor.lhs.false67.i
=========================
-------------------
  %umax_value68.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i222.i = load i64, i64* %umax_value68.i, align 8
-------------------
-------------------
  %i223.i = xor i64 %src_reg1.sroa.22.0.copyload, -1
-------------------
-------------------
  %cmp70.i = icmp ugt i64 %i222.i, %i223.i
-------------------
-------------------
  br i1 %cmp70.i, label %if.then72.i, label %if.else75.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp70.i = icmp ugt i64 %i222.i, %i223.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp70.i_0_110
[handleBranchInst] Edge Assertions:
<lor.lhs.false67.i, if.then72.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then72.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
[handleBranchInst] if.else75.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] <lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] <lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value63.i, align 8
-------------------
-------------------
  %umax_value74.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value74.i, align 8
-------------------
-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end80.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
[handleBranchInst] if.end80.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
[handleBranchInst] <if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.else75.i
=========================
-------------------
  store i64 %add64.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  %add79.i = add i64 %i222.i, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  store i64 %add79.i, i64* %umax_value68.i, align 8
-------------------
-------------------
  br label %if.end80.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end80.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] if.end80.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
[handleBranchInst] <if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
=========================
if.end80.i
=========================
-------------------
  %i224.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %add.i41.i = add i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
-------------------
  %add3.i.i = add i64 %i224.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %add4.i.i = add i64 %add.i41.i, %add3.i.i
-------------------
-------------------
  %xor.i.i = xor i64 %add4.i.i, %add3.i.i
-------------------
-------------------
  %or.i.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
-------------------
  %or7.i.i = or i64 %or.i.i, %xor.i.i
-------------------
-------------------
  %neg.i.i = xor i64 %or7.i.i, -1
-------------------
-------------------
  %and.i.i = and i64 %add3.i.i, %neg.i.i
-------------------
-------------------
  store i64 %and.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %or7.i.i, i64* %i214.i, align 8
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value49.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_0_154
[handleBranchInst] Edge Assertions:
<if.end80.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] <if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
[handleBranchInst] <if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] EdgeAssertionsMap:
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_0_157
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
[handleBranchInst] if.end.i.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.then.i329.i
=========================
-------------------
  %i34.i.i = load i64, i64* %umin_value63.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value63.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_0_167
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] if.else.i331.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp16.i.i_0_167 #b1)
           (= cmp1.i325.i_0_157 #b0)
           (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp16.i.i_0_167 #b1)
           (= cmp1.i325.i_0_157 #b0)
           (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp16.i.i_0_167 #b1)
           (= cmp1.i325.i_0_157 #b0)
           (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_0_172
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_0_172 #b0)
                (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_0_172 #b0)
                (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp31.i330.i_0_172 #b0)
                (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or a!4
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %i.i333.i = load i64, i64* %umin_value63.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_0_207
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %or7.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
      (and (= cmp.i.i.i.i_0_207 #b1) a!6)
      (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
      (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
      (and (= cmp.i.i.i.i_0_207 #b1) a!6)
      (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
      (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))))))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
lor.lhs.false52.i
=========================
=========================
if.then56.i
=========================
=========================
if.else.i
=========================
=========================
if.end62.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (=> (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
          (and (= retval.0.i.i_0_66 #b1) a!1))
      (and (= #x00000001 src_reg_0_90)
           (= src_reg_0_15 src_reg_0_91)
           (= src_reg_0_16 src_reg_0_92)
           (= src_reg_0_17 src_reg_0_93)
           (= src_reg_0_18 src_reg_0_94)
           (= src_reg_0_19 src_reg_0_95)
           (= src_reg_0_20 src_reg_0_96)
           (= src_reg_0_21 src_reg_0_97)
           (= src_reg_0_22 src_reg_0_98)
           (= src_reg_0_23 src_reg_0_99)
           (= src_reg_0_24 src_reg_0_100)
           (= src_reg_0_25 src_reg_0_101)
           (= src_reg_0_26 src_reg_0_102)
           (= src_reg_0_27 src_reg_0_103)
           (= #x00000001 dst_reg_0_76)
           (= dst_reg_0_1 dst_reg_0_77)
           (= dst_reg_0_2 dst_reg_0_78)
           (= dst_reg_0_3 dst_reg_0_79)
           (= dst_reg_0_4 dst_reg_0_80)
           (= dst_reg_0_5 dst_reg_0_81)
           (= #x8000000000000000 dst_reg_0_82)
           (= #x7fffffffffffffff dst_reg_0_83)
           (= dst_reg_0_8 dst_reg_0_84)
           (= dst_reg_0_9 dst_reg_0_85)
           (= dst_reg_0_10 dst_reg_0_86)
           (= dst_reg_0_11 dst_reg_0_87)
           (= dst_reg_0_12 dst_reg_0_88)
           (= dst_reg_0_13 dst_reg_0_89))))
phiResolveI (i=1) (let ((a!1 (and (= retval.0.i40.i_0_73 #b0)
                (= retval.0.i.i_0_66 #b0)
                (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
                    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_0_90)
           (= src_reg_0_15 src_reg_0_91)
           (= src_reg_0_16 src_reg_0_92)
           (= src_reg_0_17 src_reg_0_93)
           (= src_reg_0_18 src_reg_0_94)
           (= src_reg_0_19 src_reg_0_95)
           (= src_reg_0_20 src_reg_0_96)
           (= src_reg_0_21 src_reg_0_97)
           (= src_reg_0_22 src_reg_0_98)
           (= src_reg_0_23 src_reg_0_99)
           (= src_reg_0_24 src_reg_0_100)
           (= src_reg_0_25 src_reg_0_101)
           (= src_reg_0_26 src_reg_0_102)
           (= src_reg_0_27 src_reg_0_103)
           (= #x00000001 dst_reg_0_76)
           (= dst_reg_0_1 dst_reg_0_77)
           (= dst_reg_0_2 dst_reg_0_78)
           (= dst_reg_0_3 dst_reg_0_79)
           (= dst_reg_0_4 dst_reg_0_80)
           (= dst_reg_0_5 dst_reg_0_81)
           (= add.i.i_0_61 dst_reg_0_82)
           (= add.i36.i_0_68 dst_reg_0_83)
           (= dst_reg_0_8 dst_reg_0_84)
           (= dst_reg_0_9 dst_reg_0_85)
           (= dst_reg_0_10 dst_reg_0_86)
           (= dst_reg_0_11 dst_reg_0_87)
           (= dst_reg_0_12 dst_reg_0_88)
           (= dst_reg_0_13 dst_reg_0_89))))
=========================
lor.lhs.false67.i
=========================
=========================
if.then72.i
=========================
=========================
if.else75.i
=========================
=========================
if.end80.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (=> (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
          (and (= cmp65.i_0_106 #b1) a!2))
      (and (= src_reg_0_90 src_reg_0_128)
           (= src_reg_0_91 src_reg_0_129)
           (= src_reg_0_92 src_reg_0_130)
           (= src_reg_0_93 src_reg_0_131)
           (= src_reg_0_94 src_reg_0_132)
           (= src_reg_0_95 src_reg_0_133)
           (= src_reg_0_96 src_reg_0_134)
           (= src_reg_0_97 src_reg_0_135)
           (= src_reg_0_98 src_reg_0_136)
           (= src_reg_0_99 src_reg_0_137)
           (= src_reg_0_100 src_reg_0_138)
           (= src_reg_0_101 src_reg_0_139)
           (= src_reg_0_102 src_reg_0_140)
           (= src_reg_0_103 src_reg_0_141)
           (= dst_reg_0_76 dst_reg_0_114)
           (= dst_reg_0_77 dst_reg_0_115)
           (= dst_reg_0_78 dst_reg_0_116)
           (= dst_reg_0_79 dst_reg_0_117)
           (= dst_reg_0_80 dst_reg_0_118)
           (= dst_reg_0_81 dst_reg_0_119)
           (= dst_reg_0_82 dst_reg_0_120)
           (= dst_reg_0_83 dst_reg_0_121)
           (= #x0000000000000000 dst_reg_0_122)
           (= #xffffffffffffffff dst_reg_0_123)
           (= dst_reg_0_86 dst_reg_0_124)
           (= dst_reg_0_87 dst_reg_0_125)
           (= dst_reg_0_88 dst_reg_0_126)
           (= dst_reg_0_89 dst_reg_0_127)))))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (=> (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)
      (and (= src_reg_0_90 src_reg_0_128)
           (= src_reg_0_91 src_reg_0_129)
           (= src_reg_0_92 src_reg_0_130)
           (= src_reg_0_93 src_reg_0_131)
           (= src_reg_0_94 src_reg_0_132)
           (= src_reg_0_95 src_reg_0_133)
           (= src_reg_0_96 src_reg_0_134)
           (= src_reg_0_97 src_reg_0_135)
           (= src_reg_0_98 src_reg_0_136)
           (= src_reg_0_99 src_reg_0_137)
           (= src_reg_0_100 src_reg_0_138)
           (= src_reg_0_101 src_reg_0_139)
           (= src_reg_0_102 src_reg_0_140)
           (= src_reg_0_103 src_reg_0_141)
           (= dst_reg_0_76 dst_reg_0_114)
           (= dst_reg_0_77 dst_reg_0_115)
           (= dst_reg_0_78 dst_reg_0_116)
           (= dst_reg_0_79 dst_reg_0_117)
           (= dst_reg_0_80 dst_reg_0_118)
           (= dst_reg_0_81 dst_reg_0_119)
           (= dst_reg_0_82 dst_reg_0_120)
           (= dst_reg_0_83 dst_reg_0_121)
           (= add64.i_0_105 dst_reg_0_122)
           (= add79.i_0_113 dst_reg_0_123)
           (= dst_reg_0_86 dst_reg_0_124)
           (= dst_reg_0_87 dst_reg_0_125)
           (= dst_reg_0_88 dst_reg_0_126)
           (= dst_reg_0_89 dst_reg_0_127)))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
          (and (= cmp.i323.i_0_154 #b1) a!3))
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= cond.i327.i_0_160 dst_reg_0_181)
           (= cond12.i.i_0_164 dst_reg_0_182)
           (= cond.i327.i_0_160 dst_reg_0_183)
           (= cond12.i.i_0_164 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp16.i.i_0_167 #b1)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= i38.i.i_0_168 dst_reg_0_181)
           (= cond27.i.i_0_170 dst_reg_0_182)
           (= dst_reg_0_122 dst_reg_0_183)
           (= cond27.i.i_0_170 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
phiResolveI (i=2) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp31.i330.i_0_172 #b0)
           (= cmp16.i.i_0_167 #b0)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= dst_reg_0_120 dst_reg_0_181)
           (= dst_reg_0_121 dst_reg_0_182)
           (= dst_reg_0_122 dst_reg_0_183)
           (= dst_reg_0_123 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
phiResolveI (i=3) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp31.i330.i_0_172 #b1)
           (= cmp16.i.i_0_167 #b0)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= cond40.i.i_0_174 dst_reg_0_181)
           (= i37.i.i_0_165 dst_reg_0_182)
           (= cond40.i.i_0_174 dst_reg_0_183)
           (= dst_reg_0_123 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
     (and (= cmp.i.i.i.i_0_207 #b0) a!6)))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
     (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
    (= retval.0.i.i.i.i_0_256 phi.bo_0_253))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
    (= retval.0.i.i.i.i_0_256 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_0_256 #x0000003f)
     (= cmp.i.i.i_0_259 #b1)
     (= cmp.i.i.i_0_259 #b0))
  (= sh_prom.i.i.i_0_260 ((_ zero_extend 32) retval.0.i.i.i.i_0_256))
  (= notmask.i.i.i_0_262 (bvshl #xffffffffffffffff sh_prom.i.i.i_0_260))
  (= sub.i.i.i_0_264 (bvxor notmask.i.i.i_0_262 #xffffffffffffffff))
  (= and.i.i336.i_0_265 (bvand notmask.i.i.i_0_262 i.i333.i_0_203))
  (ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.0.0.i.i.i_0_267 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_0_267 and.i.i336.i_0_265))
  (ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.3.0.i.i.i_0_269 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_0_269 sub.i.i.i_0_264))
  (= or.i.i.i_0_270 (bvor retval.sroa.0.0.i.i.i_0_267 and.i.i_0_151))
  (= and.i1.i.i_0_271 (bvand retval.sroa.3.0.i.i.i_0_269 or7.i.i_0_148))
  (= neg.i.i.i_0_273 (bvxor and.i1.i.i_0_271 #xffffffffffffffff))
  (= and4.i.i.i_0_274 (bvand or.i.i.i_0_270 neg.i.i.i_0_273))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
     (and (= cmp.i.i.i.i_0_207 #b0) a!6)))))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
     (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
        (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
    (and (= #x00000001 src_reg_0_289)
         (= src_reg_0_15 src_reg_0_290)
         (= src_reg_0_16 src_reg_0_291)
         (= src_reg_0_17 src_reg_0_292)
         (= src_reg_0_18 src_reg_0_293)
         (= src_reg_0_19 src_reg_0_294)
         (= src_reg_0_20 src_reg_0_295)
         (= src_reg_0_21 src_reg_0_296)
         (= src_reg_0_22 src_reg_0_297)
         (= src_reg_0_23 src_reg_0_298)
         (= src_reg_0_24 src_reg_0_299)
         (= src_reg_0_25 src_reg_0_300)
         (= src_reg_0_26 src_reg_0_301)
         (= src_reg_0_27 src_reg_0_302)
         (= #x00000001 dst_reg_0_275)
         (= dst_reg_0_1 dst_reg_0_276)
         (= dst_reg_0_2 dst_reg_0_277)
         (= dst_reg_0_3 dst_reg_0_278)
         (= #x0000000000000000 dst_reg_0_279)
         (= #xffffffffffffffff dst_reg_0_280)
         (= #x8000000000000000 dst_reg_0_281)
         (= #x7fffffffffffffff dst_reg_0_282)
         (= #x0000000000000000 dst_reg_0_283)
         (= #xffffffffffffffff dst_reg_0_284)
         (= #x00000000 dst_reg_0_285)
         (= dst_reg_0_11 dst_reg_0_286)
         (= dst_reg_0_12 dst_reg_0_287)
         (= dst_reg_0_13 dst_reg_0_288)))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
          (and (= cmp.i.i.i.i_0_207 #b1) a!6))
      (and (= src_reg_0_189 src_reg_0_289)
           (= src_reg_0_190 src_reg_0_290)
           (= src_reg_0_191 src_reg_0_291)
           (= src_reg_0_192 src_reg_0_292)
           (= src_reg_0_193 src_reg_0_293)
           (= src_reg_0_194 src_reg_0_294)
           (= src_reg_0_195 src_reg_0_295)
           (= src_reg_0_196 src_reg_0_296)
           (= src_reg_0_197 src_reg_0_297)
           (= src_reg_0_198 src_reg_0_298)
           (= src_reg_0_199 src_reg_0_299)
           (= src_reg_0_200 src_reg_0_300)
           (= src_reg_0_201 src_reg_0_301)
           (= src_reg_0_202 src_reg_0_302)
           (= dst_reg_0_175 dst_reg_0_275)
           (= dst_reg_0_176 dst_reg_0_276)
           (= dst_reg_0_177 dst_reg_0_277)
           (= dst_reg_0_178 dst_reg_0_278)
           (= and4.i.i.i_0_274 dst_reg_0_279)
           (= and.i1.i.i_0_271 dst_reg_0_280)
           (= dst_reg_0_181 dst_reg_0_281)
           (= dst_reg_0_182 dst_reg_0_282)
           (= dst_reg_0_183 dst_reg_0_283)
           (= dst_reg_0_184 dst_reg_0_284)
           (= dst_reg_0_185 dst_reg_0_285)
           (= dst_reg_0_186 dst_reg_0_286)
           (= dst_reg_0_187 dst_reg_0_287)
           (= dst_reg_0_188 dst_reg_0_288))))))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
lor.lhs.false52.i
=========================
=========================
if.then56.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value58.i, align 8
-------------------
=========================
if.else.i
=========================
-------------------
  store i64 %add.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %add.i36.i, i64* %smax_value53.i, align 8
-------------------
=========================
if.end62.i
=========================
=========================
lor.lhs.false67.i
=========================
=========================
if.then72.i
=========================
-------------------
  store i64 0, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value74.i, align 8
-------------------
=========================
if.else75.i
=========================
-------------------
  store i64 %add64.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 %add79.i, i64* %umax_value68.i, align 8
-------------------
=========================
if.end80.i
=========================
-------------------
  store i64 %and.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %or7.i.i, i64* %i214.i, align 8
-------------------
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value63.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value49.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32}) : {
- src_reg: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
- dst_reg: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ and.i1.i.i_0_271 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_303
[lookInsideStruct] singleValueType:dst_reg_0_303
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_304
[lookInsideStruct] singleValueType:dst_reg_0_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_305
[lookInsideStruct] singleValueType:dst_reg_0_305
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_306
[lookInsideStruct] singleValueType:dst_reg_0_306
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_307
[lookInsideStruct] singleValueType:dst_reg_0_307
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_308
[lookInsideStruct] singleValueType:dst_reg_0_308
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_309
[lookInsideStruct] singleValueType:dst_reg_0_309
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_310
[lookInsideStruct] singleValueType:dst_reg_0_310
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_311
[lookInsideStruct] singleValueType:dst_reg_0_311
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_312
[lookInsideStruct] singleValueType:dst_reg_0_312
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_313
[lookInsideStruct] singleValueType:dst_reg_0_313
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_314
[lookInsideStruct] singleValueType:dst_reg_0_314
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_315
[lookInsideStruct] singleValueType:dst_reg_0_315
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_0_316
[lookInsideStruct] singleValueType:dst_reg_0_316
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_0_303 ] [ ] [ dst_reg_0_304 ] [ dst_reg_0_305 ] [ dst_reg_0_306 ] [ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] [ dst_reg_0_309 ] [ dst_reg_0_310 ] [ dst_reg_0_311 ] [ dst_reg_0_312 ] [ ] [ dst_reg_0_313 ] [ dst_reg_0_314 ] [ dst_reg_0_315 ] [ dst_reg_0_316 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_0_275 dst_reg_0_303)
(= dst_reg_0_276 dst_reg_0_304)
(= dst_reg_0_277 dst_reg_0_305)
(= dst_reg_0_278 dst_reg_0_306)
(= dst_reg_0_279 dst_reg_0_307)
(= dst_reg_0_280 dst_reg_0_308)
(= dst_reg_0_281 dst_reg_0_309)
(= dst_reg_0_282 dst_reg_0_310)
(= dst_reg_0_283 dst_reg_0_311)
(= dst_reg_0_284 dst_reg_0_312)
(= dst_reg_0_285 dst_reg_0_313)
(= dst_reg_0_286 dst_reg_0_314)
(= dst_reg_0_287 dst_reg_0_315)
(= dst_reg_0_288 dst_reg_0_316)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_317
[lookInsideStruct] singleValueType:src_reg_0_317
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_318
[lookInsideStruct] singleValueType:src_reg_0_318
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_319
[lookInsideStruct] singleValueType:src_reg_0_319
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_320
[lookInsideStruct] singleValueType:src_reg_0_320
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_321
[lookInsideStruct] singleValueType:src_reg_0_321
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_322
[lookInsideStruct] singleValueType:src_reg_0_322
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_323
[lookInsideStruct] singleValueType:src_reg_0_323
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_324
[lookInsideStruct] singleValueType:src_reg_0_324
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_325
[lookInsideStruct] singleValueType:src_reg_0_325
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_326
[lookInsideStruct] singleValueType:src_reg_0_326
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_327
[lookInsideStruct] singleValueType:src_reg_0_327
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_328
[lookInsideStruct] singleValueType:src_reg_0_328
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_329
[lookInsideStruct] singleValueType:src_reg_0_329
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_0_330
[lookInsideStruct] singleValueType:src_reg_0_330
[setupBVTreeForArg] returning BVTree: [ [ src_reg_0_317 ] [ ] [ src_reg_0_318 ] [ src_reg_0_319 ] [ src_reg_0_320 ] [ [ src_reg_0_321 ] [ src_reg_0_322 ] ] [ src_reg_0_323 ] [ src_reg_0_324 ] [ src_reg_0_325 ] [ src_reg_0_326 ] [ ] [ src_reg_0_327 ] [ src_reg_0_328 ] [ src_reg_0_329 ] [ src_reg_0_330 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_0_289 src_reg_0_317)
(= src_reg_0_290 src_reg_0_318)
(= src_reg_0_291 src_reg_0_319)
(= src_reg_0_292 src_reg_0_320)
(= src_reg_0_293 src_reg_0_321)
(= src_reg_0_294 src_reg_0_322)
(= src_reg_0_295 src_reg_0_323)
(= src_reg_0_296 src_reg_0_324)
(= src_reg_0_297 src_reg_0_325)
(= src_reg_0_298 src_reg_0_326)
(= src_reg_0_299 src_reg_0_327)
(= src_reg_0_300 src_reg_0_328)
(= src_reg_0_301 src_reg_0_329)
(= src_reg_0_302 src_reg_0_330)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_0_317 ] [ ] [ src_reg_0_318 ] [ src_reg_0_319 ] [ src_reg_0_320 ] [ [ src_reg_0_321 ] [ src_reg_0_322 ] ] [ src_reg_0_323 ] [ src_reg_0_324 ] [ src_reg_0_325 ] [ src_reg_0_326 ] [ ] [ src_reg_0_327 ] [ src_reg_0_328 ] [ src_reg_0_329 ] [ src_reg_0_330 ] ] 
- dst_reg: [ [ dst_reg_0_303 ] [ ] [ dst_reg_0_304 ] [ dst_reg_0_305 ] [ dst_reg_0_306 ] [ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] [ dst_reg_0_309 ] [ dst_reg_0_310 ] [ dst_reg_0_311 ] [ dst_reg_0_312 ] [ ] [ dst_reg_0_313 ] [ dst_reg_0_314 ] [ dst_reg_0_315 ] [ dst_reg_0_316 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
        (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
    (and (= #x00000001 src_reg_0_289)
         (= src_reg_0_15 src_reg_0_290)
         (= src_reg_0_16 src_reg_0_291)
         (= src_reg_0_17 src_reg_0_292)
         (= src_reg_0_18 src_reg_0_293)
         (= src_reg_0_19 src_reg_0_294)
         (= src_reg_0_20 src_reg_0_295)
         (= src_reg_0_21 src_reg_0_296)
         (= src_reg_0_22 src_reg_0_297)
         (= src_reg_0_23 src_reg_0_298)
         (= src_reg_0_24 src_reg_0_299)
         (= src_reg_0_25 src_reg_0_300)
         (= src_reg_0_26 src_reg_0_301)
         (= src_reg_0_27 src_reg_0_302)
         (= #x00000001 dst_reg_0_275)
         (= dst_reg_0_1 dst_reg_0_276)
         (= dst_reg_0_2 dst_reg_0_277)
         (= dst_reg_0_3 dst_reg_0_278)
         (= #x0000000000000000 dst_reg_0_279)
         (= #xffffffffffffffff dst_reg_0_280)
         (= #x8000000000000000 dst_reg_0_281)
         (= #x7fffffffffffffff dst_reg_0_282)
         (= #x0000000000000000 dst_reg_0_283)
         (= #xffffffffffffffff dst_reg_0_284)
         (= #x00000000 dst_reg_0_285)
         (= dst_reg_0_11 dst_reg_0_286)
         (= dst_reg_0_12 dst_reg_0_287)
         (= dst_reg_0_13 dst_reg_0_288)))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
          (and (= cmp.i.i.i.i_0_207 #b1) a!6))
      (and (= src_reg_0_189 src_reg_0_289)
           (= src_reg_0_190 src_reg_0_290)
           (= src_reg_0_191 src_reg_0_291)
           (= src_reg_0_192 src_reg_0_292)
           (= src_reg_0_193 src_reg_0_293)
           (= src_reg_0_194 src_reg_0_294)
           (= src_reg_0_195 src_reg_0_295)
           (= src_reg_0_196 src_reg_0_296)
           (= src_reg_0_197 src_reg_0_297)
           (= src_reg_0_198 src_reg_0_298)
           (= src_reg_0_199 src_reg_0_299)
           (= src_reg_0_200 src_reg_0_300)
           (= src_reg_0_201 src_reg_0_301)
           (= src_reg_0_202 src_reg_0_302)
           (= dst_reg_0_175 dst_reg_0_275)
           (= dst_reg_0_176 dst_reg_0_276)
           (= dst_reg_0_177 dst_reg_0_277)
           (= dst_reg_0_178 dst_reg_0_278)
           (= and4.i.i.i_0_274 dst_reg_0_279)
           (= and.i1.i.i_0_271 dst_reg_0_280)
           (= dst_reg_0_181 dst_reg_0_281)
           (= dst_reg_0_182 dst_reg_0_282)
           (= dst_reg_0_183 dst_reg_0_283)
           (= dst_reg_0_184 dst_reg_0_284)
           (= dst_reg_0_185 dst_reg_0_285)
           (= dst_reg_0_186 dst_reg_0_286)
           (= dst_reg_0_187 dst_reg_0_287)
           (= dst_reg_0_188 dst_reg_0_288))))))))
  (= dst_reg_0_275 dst_reg_0_303)
  (= dst_reg_0_276 dst_reg_0_304)
  (= dst_reg_0_277 dst_reg_0_305)
  (= dst_reg_0_278 dst_reg_0_306)
  (= dst_reg_0_279 dst_reg_0_307)
  (= dst_reg_0_280 dst_reg_0_308)
  (= dst_reg_0_281 dst_reg_0_309)
  (= dst_reg_0_282 dst_reg_0_310)
  (= dst_reg_0_283 dst_reg_0_311)
  (= dst_reg_0_284 dst_reg_0_312)
  (= dst_reg_0_285 dst_reg_0_313)
  (= dst_reg_0_286 dst_reg_0_314)
  (= dst_reg_0_287 dst_reg_0_315)
  (= dst_reg_0_288 dst_reg_0_316)
  (= src_reg_0_289 src_reg_0_317)
  (= src_reg_0_290 src_reg_0_318)
  (= src_reg_0_291 src_reg_0_319)
  (= src_reg_0_292 src_reg_0_320)
  (= src_reg_0_293 src_reg_0_321)
  (= src_reg_0_294 src_reg_0_322)
  (= src_reg_0_295 src_reg_0_323)
  (= src_reg_0_296 src_reg_0_324)
  (= src_reg_0_297 src_reg_0_325)
  (= src_reg_0_298 src_reg_0_326)
  (= src_reg_0_299 src_reg_0_327)
  (= src_reg_0_300 src_reg_0_328)
  (= src_reg_0_301 src_reg_0_329)
  (= src_reg_0_302 src_reg_0_330)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_0_205 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= tobool.not.i.i.i.i.i_0_209 #b0))
  (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211)
     (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))
  (ite (= tobool.not.i.i.i.i.i_0_209 #b1)
     (= spec.select17.i.i.i.i.i_0_215 #x0000001f)
     (= spec.select17.i.i.i.i.i_0_215 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_0_212 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= tobool2.not.i.i.i.i.i_0_217 #b0))
  (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 #xfffffff0))
  (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221)
     (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))
  (ite (= tobool2.not.i.i.i.i.i_0_217 #b1)
     (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219)
     (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))
  (ite (bvult word.addr.1.i.i.i.i.i_0_222 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= tobool8.not.i.i.i.i.i_0_225 #b0))
  (= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 #xfffffff8))
  (= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229)
     (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))
  (ite (= tobool8.not.i.i.i.i.i_0_225 #b1)
     (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227)
     (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))
  (ite (bvult word.addr.2.i.i.i.i.i_0_230 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= tobool14.not.i.i.i.i.i_0_233 #b0))
  (= sub16.i.i.i.i.i_0_235 (bvadd num.2.i.i.i.i.i_0_231 #xfffffffc))
  (= shl17.i.i.i.i.i_0_237 (bvshl word.addr.2.i.i.i.i.i_0_230 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= word.addr.3.i.i.i.i.i_0_238 shl17.i.i.i.i.i_0_237)
     (= word.addr.3.i.i.i.i.i_0_238 word.addr.2.i.i.i.i.i_0_230))
  (ite (= tobool14.not.i.i.i.i.i_0_233 #b1)
     (= num.3.i.i.i.i.i_0_239 sub16.i.i.i.i.i_0_235)
     (= num.3.i.i.i.i.i_0_239 num.2.i.i.i.i.i_0_231))
  (ite (bvult word.addr.3.i.i.i.i.i_0_238 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= tobool20.not.i.i.i.i.i_0_241 #b0))
  (= sub22.i.i.i.i.i_0_243 (bvadd num.3.i.i.i.i.i_0_239 #x000000fe))
  (= shl23.i.i.i.i.i_0_245 (bvshl word.addr.3.i.i.i.i.i_0_238 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= word.addr.4.i.i.i.i.i_0_246 shl23.i.i.i.i.i_0_245)
     (= word.addr.4.i.i.i.i.i_0_246 word.addr.3.i.i.i.i.i_0_238))
  (ite (= tobool20.not.i.i.i.i.i_0_241 #b1)
     (= num.4.i.i.i.i.i_0_247 sub22.i.i.i.i.i_0_243)
     (= num.4.i.i.i.i.i_0_247 num.3.i.i.i.i.i_0_239))
  (= word.addr.4.lobit.i.i.i.i.i.neg_0_249
   (bvlshr word.addr.4.i.i.i.i.i_0_246 #x000000000000003f))
  (= i.i.i.i.i.i.neg_0_250
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_0_249))
  (= add.i.i.i335.i_0_251 (bvadd num.4.i.i.i.i.i_0_247 i.i.i.i.i.i.neg_0_250))
  (= phi.bo_0_253 (bvand add.i.i.i335.i_0_251 #x000000ff))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_0_183 i.i333.i_0_203)
  (= dst_reg_0_184 i5.i.i_0_204)
  (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))
  (ite (= xor.i.i.i_0_205 #x0000000000000000)
     (= cmp.i.i.i.i_0_207 #b1)
     (= cmp.i.i.i.i_0_207 #b0))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
          (and (= cmp.i323.i_0_154 #b1) a!3))
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= cond.i327.i_0_160 dst_reg_0_181)
           (= cond12.i.i_0_164 dst_reg_0_182)
           (= cond.i327.i_0_160 dst_reg_0_183)
           (= cond12.i.i_0_164 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp16.i.i_0_167 #b1)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= i38.i.i_0_168 dst_reg_0_181)
           (= cond27.i.i_0_170 dst_reg_0_182)
           (= dst_reg_0_122 dst_reg_0_183)
           (= cond27.i.i_0_170 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp31.i330.i_0_172 #b0)
           (= cmp16.i.i_0_167 #b0)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= dst_reg_0_120 dst_reg_0_181)
           (= dst_reg_0_121 dst_reg_0_182)
           (= dst_reg_0_122 dst_reg_0_183)
           (= dst_reg_0_123 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (=> (and (= cmp31.i330.i_0_172 #b1)
           (= cmp16.i.i_0_167 #b0)
           (= cmp1.i325.i_0_157 #b0)
           (= cmp.i323.i_0_154 #b0)
           a!3)
      (and (= src_reg_0_128 src_reg_0_189)
           (= src_reg_0_129 src_reg_0_190)
           (= src_reg_0_130 src_reg_0_191)
           (= src_reg_0_131 src_reg_0_192)
           (= src_reg_0_132 src_reg_0_193)
           (= src_reg_0_133 src_reg_0_194)
           (= src_reg_0_134 src_reg_0_195)
           (= src_reg_0_135 src_reg_0_196)
           (= src_reg_0_136 src_reg_0_197)
           (= src_reg_0_137 src_reg_0_198)
           (= src_reg_0_138 src_reg_0_199)
           (= src_reg_0_139 src_reg_0_200)
           (= src_reg_0_140 src_reg_0_201)
           (= src_reg_0_141 src_reg_0_202)
           (= dst_reg_0_114 dst_reg_0_175)
           (= dst_reg_0_115 dst_reg_0_176)
           (= dst_reg_0_116 dst_reg_0_177)
           (= dst_reg_0_117 dst_reg_0_178)
           (= and.i.i_0_151 dst_reg_0_179)
           (= or7.i.i_0_148 dst_reg_0_180)
           (= cond40.i.i_0_174 dst_reg_0_181)
           (= i37.i.i_0_165 dst_reg_0_182)
           (= cond40.i.i_0_174 dst_reg_0_183)
           (= dst_reg_0_123 dst_reg_0_184)
           (= dst_reg_0_124 dst_reg_0_185)
           (= dst_reg_0_125 dst_reg_0_186)
           (= dst_reg_0_126 dst_reg_0_187)
           (= dst_reg_0_127 dst_reg_0_188))))))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_0_152 i38.i.i_0_168)
     (= cmp36.i.i_0_173 #b1)
     (= cmp36.i.i_0_173 #b0))
  (ite (= cmp36.i.i_0_173 #b1)
     (= cond40.i.i_0_174 i.i322.i_0_152)
     (= cond40.i.i_0_174 i38.i.i_0_168))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_0_168 #x0000000000000000)
     (= cmp31.i330.i_0_172 #b1)
     (= cmp31.i330.i_0_172 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_0_155 i37.i.i_0_165)
     (= cmp23.i.i_0_169 #b1)
     (= cmp23.i.i_0_169 #b0))
  (ite (= cmp23.i.i_0_169 #b1)
     (= cond27.i.i_0_170 i33.i.i_0_155)
     (= cond27.i.i_0_170 i37.i.i_0_165))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_0_122 i34.i.i_0_158)
  (ite (bvugt i.i322.i_0_152 i34.i.i_0_158)
     (= cmp3.i.i_0_159 #b1)
     (= cmp3.i.i_0_159 #b0))
  (ite (= cmp3.i.i_0_159 #b1)
     (= cond.i327.i_0_160 i.i322.i_0_152)
     (= cond.i327.i_0_160 i34.i.i_0_158))
  (= dst_reg_0_83 i35.i.i_0_161)
  (= dst_reg_0_123 i36.i.i_0_162)
  (ite (bvult i35.i.i_0_161 i36.i.i_0_162)
     (= cmp8.i.i_0_163 #b1)
     (= cmp8.i.i_0_163 #b0))
  (ite (= cmp8.i.i_0_163 #b1)
     (= cond12.i.i_0_164 i35.i.i_0_161)
     (= cond12.i.i_0_164 i36.i.i_0_162))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_0_83 i33.i.i_0_155)
  (ite (bvslt i33.i.i_0_155 #x0000000000000000)
     (= cmp1.i325.i_0_157 #b1)
     (= cmp1.i325.i_0_157 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_0_0 dst_reg_0_0)
  (= dst_reg_0_1 dst_reg_0_1)
  (= dst_reg_0_2 dst_reg_0_2)
  (= dst_reg_0_3 dst_reg_0_3)
  (= dst_reg_0_4 dst_reg_0_4)
  (= dst_reg_0_5 dst_reg_0_5)
  (= dst_reg_0_6 dst_reg_0_6)
  (= dst_reg_0_7 dst_reg_0_7)
  (= dst_reg_0_8 dst_reg_0_8)
  (= dst_reg_0_9 dst_reg_0_9)
  (= dst_reg_0_10 dst_reg_0_10)
  (= dst_reg_0_11 dst_reg_0_11)
  (= dst_reg_0_12 dst_reg_0_12)
  (= dst_reg_0_13 dst_reg_0_13)
  (= src_reg_0_14 src_reg_0_14)
  (= src_reg_0_15 src_reg_0_15)
  (= src_reg_0_16 src_reg_0_16)
  (= src_reg_0_17 src_reg_0_17)
  (= src_reg_0_18 src_reg_0_18)
  (= src_reg_0_19 src_reg_0_19)
  (= src_reg_0_20 src_reg_0_20)
  (= src_reg_0_21 src_reg_0_21)
  (= src_reg_0_22 src_reg_0_22)
  (= src_reg_0_23 src_reg_0_23)
  (= src_reg_0_24 src_reg_0_24)
  (= src_reg_0_25 src_reg_0_25)
  (= src_reg_0_26 src_reg_0_26)
  (= src_reg_0_27 src_reg_0_27)
  (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)
  (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)
  (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)
  (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)
  (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)
  (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)
  (ite (= src_reg1.sroa.10.0.copyload_0_31 #x0000000000000000)
     (= tobool.not.i.i_0_37 #b1)
     (= tobool.not.i.i_0_37 #b0))
  (= dst_reg_0_5 i215.i_0_38)
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_0_32
               src_reg1.sroa.15.0.copyload_0_33)
     (= cmp16.not.i_0_39 #b1)
     (= cmp16.not.i_0_39 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_0_34
               src_reg1.sroa.22.0.copyload_0_35)
     (= cmp18.not.i_0_40 #b1)
     (= cmp18.not.i_0_40 #b0))
  (ite (= cmp16.not.i_0_39 #b1)
     (= or.cond197.i_0_42 #b1)
     (= or.cond197.i_0_42 cmp18.not.i_0_40))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.i_0_43 #b1)
     (= cmp21.i_0_43 #b0))
  (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.i_0_45 #b1)
     (= cmp24.i_0_45 #b0))
  (ite (= or.cond198.i_0_44 #b1)
     (= or.cond199.i_0_47 #b1)
     (= or.cond199.i_0_47 cmp24.i_0_45))
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
    (= retval.0.i.i.i.i_0_256 phi.bo_0_253))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
    (= retval.0.i.i.i.i_0_256 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_0_256 #x0000003f)
     (= cmp.i.i.i_0_259 #b1)
     (= cmp.i.i.i_0_259 #b0))
  (= sh_prom.i.i.i_0_260 ((_ zero_extend 32) retval.0.i.i.i.i_0_256))
  (= notmask.i.i.i_0_262 (bvshl #xffffffffffffffff sh_prom.i.i.i_0_260))
  (= sub.i.i.i_0_264 (bvxor notmask.i.i.i_0_262 #xffffffffffffffff))
  (= and.i.i336.i_0_265 (bvand notmask.i.i.i_0_262 i.i333.i_0_203))
  (ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.0.0.i.i.i_0_267 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_0_267 and.i.i336.i_0_265))
  (ite (= cmp.i.i.i_0_259 #b1)
     (= retval.sroa.3.0.i.i.i_0_269 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_0_269 sub.i.i.i_0_264))
  (= or.i.i.i_0_270 (bvor retval.sroa.0.0.i.i.i_0_267 and.i.i_0_151))
  (= and.i1.i.i_0_271 (bvand retval.sroa.3.0.i.i.i_0_269 or7.i.i_0_148))
  (= neg.i.i.i_0_273 (bvxor and.i1.i.i_0_271 #xffffffffffffffff))
  (= and4.i.i.i_0_274 (bvand or.i.i.i_0_270 neg.i.i.i_0_273))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_0_254
     (and (= cmp.i.i.i.i_0_207 #b0) a!6)))))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255
     (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
BasicBlock: if.then72.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)
     (= cmp21.old.i_0_48 #b1)
     (= cmp21.old.i_0_48 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)
     (= cmp24.old.i_0_49 #b1)
     (= cmp24.old.i_0_49 #b0))
  (ite (= cmp21.old.i_0_48 #b1)
     (= or.cond200.i_0_51 #b1)
     (= or.cond200.i_0_51 cmp24.old.i_0_49))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false52.i, Size:6
  (= dst_reg_0_7 i220.i_0_67)
  (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))
  (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 #x0000000000000000)
     (= cmp.i37.i_0_70 #b1)
     (= cmp.i37.i_0_70 #b0))
  (ite (bvsgt add.i36.i_0_68 i220.i_0_67)
     (= cmp1.i38.i_0_71 #b1)
     (= cmp1.i38.i_0_71 #b0))
  (ite (bvslt add.i36.i_0_68 i220.i_0_67)
     (= cmp2.i39.i_0_72 #b1)
     (= cmp2.i39.i_0_72 #b0))
  (ite (= cmp.i37.i_0_70 #b1)
     (= retval.0.i40.i_0_73 cmp1.i38.i_0_71)
     (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))
BasicBlock: if.end62.i, Size:5
  (= dst_reg_0_8 i221.i_0_104)
  (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))
  (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34)
     (= cmp65.i_0_106 #b1)
     (= cmp65.i_0_106 #b0))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (=> (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
          (and (= retval.0.i.i_0_66 #b1) a!1))
      (and (= #x00000001 src_reg_0_90)
           (= src_reg_0_15 src_reg_0_91)
           (= src_reg_0_16 src_reg_0_92)
           (= src_reg_0_17 src_reg_0_93)
           (= src_reg_0_18 src_reg_0_94)
           (= src_reg_0_19 src_reg_0_95)
           (= src_reg_0_20 src_reg_0_96)
           (= src_reg_0_21 src_reg_0_97)
           (= src_reg_0_22 src_reg_0_98)
           (= src_reg_0_23 src_reg_0_99)
           (= src_reg_0_24 src_reg_0_100)
           (= src_reg_0_25 src_reg_0_101)
           (= src_reg_0_26 src_reg_0_102)
           (= src_reg_0_27 src_reg_0_103)
           (= #x00000001 dst_reg_0_76)
           (= dst_reg_0_1 dst_reg_0_77)
           (= dst_reg_0_2 dst_reg_0_78)
           (= dst_reg_0_3 dst_reg_0_79)
           (= dst_reg_0_4 dst_reg_0_80)
           (= dst_reg_0_5 dst_reg_0_81)
           (= #x8000000000000000 dst_reg_0_82)
           (= #x7fffffffffffffff dst_reg_0_83)
           (= dst_reg_0_8 dst_reg_0_84)
           (= dst_reg_0_9 dst_reg_0_85)
           (= dst_reg_0_10 dst_reg_0_86)
           (= dst_reg_0_11 dst_reg_0_87)
           (= dst_reg_0_12 dst_reg_0_88)
           (= dst_reg_0_13 dst_reg_0_89))))
  (let ((a!1 (and (= retval.0.i40.i_0_73 #b0)
                (= retval.0.i.i_0_66 #b0)
                (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
                    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_0_90)
           (= src_reg_0_15 src_reg_0_91)
           (= src_reg_0_16 src_reg_0_92)
           (= src_reg_0_17 src_reg_0_93)
           (= src_reg_0_18 src_reg_0_94)
           (= src_reg_0_19 src_reg_0_95)
           (= src_reg_0_20 src_reg_0_96)
           (= src_reg_0_21 src_reg_0_97)
           (= src_reg_0_22 src_reg_0_98)
           (= src_reg_0_23 src_reg_0_99)
           (= src_reg_0_24 src_reg_0_100)
           (= src_reg_0_25 src_reg_0_101)
           (= src_reg_0_26 src_reg_0_102)
           (= src_reg_0_27 src_reg_0_103)
           (= #x00000001 dst_reg_0_76)
           (= dst_reg_0_1 dst_reg_0_77)
           (= dst_reg_0_2 dst_reg_0_78)
           (= dst_reg_0_3 dst_reg_0_79)
           (= dst_reg_0_4 dst_reg_0_80)
           (= dst_reg_0_5 dst_reg_0_81)
           (= add.i.i_0_61 dst_reg_0_82)
           (= add.i36.i_0_68 dst_reg_0_83)
           (= dst_reg_0_8 dst_reg_0_84)
           (= dst_reg_0_9 dst_reg_0_85)
           (= dst_reg_0_10 dst_reg_0_86)
           (= dst_reg_0_11 dst_reg_0_87)
           (= dst_reg_0_12 dst_reg_0_88)
           (= dst_reg_0_13 dst_reg_0_89))))
BasicBlock: if.then56.i, Size:0
BasicBlock: if.else.i, Size:0
BasicBlock: adjust_scalar_min_max_vals.exit, Size:30
  (=> (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
        (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
    (and (= #x00000001 src_reg_0_289)
         (= src_reg_0_15 src_reg_0_290)
         (= src_reg_0_16 src_reg_0_291)
         (= src_reg_0_17 src_reg_0_292)
         (= src_reg_0_18 src_reg_0_293)
         (= src_reg_0_19 src_reg_0_294)
         (= src_reg_0_20 src_reg_0_295)
         (= src_reg_0_21 src_reg_0_296)
         (= src_reg_0_22 src_reg_0_297)
         (= src_reg_0_23 src_reg_0_298)
         (= src_reg_0_24 src_reg_0_299)
         (= src_reg_0_25 src_reg_0_300)
         (= src_reg_0_26 src_reg_0_301)
         (= src_reg_0_27 src_reg_0_302)
         (= #x00000001 dst_reg_0_275)
         (= dst_reg_0_1 dst_reg_0_276)
         (= dst_reg_0_2 dst_reg_0_277)
         (= dst_reg_0_3 dst_reg_0_278)
         (= #x0000000000000000 dst_reg_0_279)
         (= #xffffffffffffffff dst_reg_0_280)
         (= #x8000000000000000 dst_reg_0_281)
         (= #x7fffffffffffffff dst_reg_0_282)
         (= #x0000000000000000 dst_reg_0_283)
         (= #xffffffffffffffff dst_reg_0_284)
         (= #x00000000 dst_reg_0_285)
         (= dst_reg_0_11 dst_reg_0_286)
         (= dst_reg_0_12 dst_reg_0_287)
         (= dst_reg_0_13 dst_reg_0_288)))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (=> (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
          (and (= cmp.i.i.i.i_0_207 #b1) a!6))
      (and (= src_reg_0_189 src_reg_0_289)
           (= src_reg_0_190 src_reg_0_290)
           (= src_reg_0_191 src_reg_0_291)
           (= src_reg_0_192 src_reg_0_292)
           (= src_reg_0_193 src_reg_0_293)
           (= src_reg_0_194 src_reg_0_294)
           (= src_reg_0_195 src_reg_0_295)
           (= src_reg_0_196 src_reg_0_296)
           (= src_reg_0_197 src_reg_0_297)
           (= src_reg_0_198 src_reg_0_298)
           (= src_reg_0_199 src_reg_0_299)
           (= src_reg_0_200 src_reg_0_300)
           (= src_reg_0_201 src_reg_0_301)
           (= src_reg_0_202 src_reg_0_302)
           (= dst_reg_0_175 dst_reg_0_275)
           (= dst_reg_0_176 dst_reg_0_276)
           (= dst_reg_0_177 dst_reg_0_277)
           (= dst_reg_0_178 dst_reg_0_278)
           (= and4.i.i.i_0_274 dst_reg_0_279)
           (= and.i1.i.i_0_271 dst_reg_0_280)
           (= dst_reg_0_181 dst_reg_0_281)
           (= dst_reg_0_182 dst_reg_0_282)
           (= dst_reg_0_183 dst_reg_0_283)
           (= dst_reg_0_184 dst_reg_0_284)
           (= dst_reg_0_185 dst_reg_0_285)
           (= dst_reg_0_186 dst_reg_0_286)
           (= dst_reg_0_187 dst_reg_0_287)
           (= dst_reg_0_188 dst_reg_0_288))))))))
  (= dst_reg_0_275 dst_reg_0_303)
  (= dst_reg_0_276 dst_reg_0_304)
  (= dst_reg_0_277 dst_reg_0_305)
  (= dst_reg_0_278 dst_reg_0_306)
  (= dst_reg_0_279 dst_reg_0_307)
  (= dst_reg_0_280 dst_reg_0_308)
  (= dst_reg_0_281 dst_reg_0_309)
  (= dst_reg_0_282 dst_reg_0_310)
  (= dst_reg_0_283 dst_reg_0_311)
  (= dst_reg_0_284 dst_reg_0_312)
  (= dst_reg_0_285 dst_reg_0_313)
  (= dst_reg_0_286 dst_reg_0_314)
  (= dst_reg_0_287 dst_reg_0_315)
  (= dst_reg_0_288 dst_reg_0_316)
  (= src_reg_0_289 src_reg_0_317)
  (= src_reg_0_290 src_reg_0_318)
  (= src_reg_0_291 src_reg_0_319)
  (= src_reg_0_292 src_reg_0_320)
  (= src_reg_0_293 src_reg_0_321)
  (= src_reg_0_294 src_reg_0_322)
  (= src_reg_0_295 src_reg_0_323)
  (= src_reg_0_296 src_reg_0_324)
  (= src_reg_0_297 src_reg_0_325)
  (= src_reg_0_298 src_reg_0_326)
  (= src_reg_0_299 src_reg_0_327)
  (= src_reg_0_300 src_reg_0_328)
  (= src_reg_0_301 src_reg_0_329)
  (= src_reg_0_302 src_reg_0_330)
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_0_123 i37.i.i_0_165)
  (ite (bvsgt i37.i.i_0_165 #xffffffffffffffff)
     (= cmp16.i.i_0_167 #b1)
     (= cmp16.i.i_0_167 #b0))
  (= dst_reg_0_122 i38.i.i_0_168)
BasicBlock: lor.lhs.false67.i, Size:3
  (= dst_reg_0_9 i222.i_0_107)
  (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 #xffffffffffffffff))
  (ite (bvugt i222.i_0_107 i223.i_0_109)
     (= cmp70.i_0_110 #b1)
     (= cmp70.i_0_110 #b0))
BasicBlock: if.end80.i, Size:13
  (= dst_reg_0_4 i224.i_0_142)
  (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))
  (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))
  (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))
  (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))
  (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))
  (= neg.i.i_0_150 (bvxor or7.i.i_0_148 #xffffffffffffffff))
  (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))
  (= dst_reg_0_82 i.i322.i_0_152)
  (ite (bvsgt i.i322.i_0_152 #xffffffffffffffff)
     (= cmp.i323.i_0_154 #b1)
     (= cmp.i323.i_0_154 #b0))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (=> (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
          (and (= cmp65.i_0_106 #b1) a!2))
      (and (= src_reg_0_90 src_reg_0_128)
           (= src_reg_0_91 src_reg_0_129)
           (= src_reg_0_92 src_reg_0_130)
           (= src_reg_0_93 src_reg_0_131)
           (= src_reg_0_94 src_reg_0_132)
           (= src_reg_0_95 src_reg_0_133)
           (= src_reg_0_96 src_reg_0_134)
           (= src_reg_0_97 src_reg_0_135)
           (= src_reg_0_98 src_reg_0_136)
           (= src_reg_0_99 src_reg_0_137)
           (= src_reg_0_100 src_reg_0_138)
           (= src_reg_0_101 src_reg_0_139)
           (= src_reg_0_102 src_reg_0_140)
           (= src_reg_0_103 src_reg_0_141)
           (= dst_reg_0_76 dst_reg_0_114)
           (= dst_reg_0_77 dst_reg_0_115)
           (= dst_reg_0_78 dst_reg_0_116)
           (= dst_reg_0_79 dst_reg_0_117)
           (= dst_reg_0_80 dst_reg_0_118)
           (= dst_reg_0_81 dst_reg_0_119)
           (= dst_reg_0_82 dst_reg_0_120)
           (= dst_reg_0_83 dst_reg_0_121)
           (= #x0000000000000000 dst_reg_0_122)
           (= #xffffffffffffffff dst_reg_0_123)
           (= dst_reg_0_86 dst_reg_0_124)
           (= dst_reg_0_87 dst_reg_0_125)
           (= dst_reg_0_88 dst_reg_0_126)
           (= dst_reg_0_89 dst_reg_0_127)))))
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (=> (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)
      (and (= src_reg_0_90 src_reg_0_128)
           (= src_reg_0_91 src_reg_0_129)
           (= src_reg_0_92 src_reg_0_130)
           (= src_reg_0_93 src_reg_0_131)
           (= src_reg_0_94 src_reg_0_132)
           (= src_reg_0_95 src_reg_0_133)
           (= src_reg_0_96 src_reg_0_134)
           (= src_reg_0_97 src_reg_0_135)
           (= src_reg_0_98 src_reg_0_136)
           (= src_reg_0_99 src_reg_0_137)
           (= src_reg_0_100 src_reg_0_138)
           (= src_reg_0_101 src_reg_0_139)
           (= src_reg_0_102 src_reg_0_140)
           (= src_reg_0_103 src_reg_0_141)
           (= dst_reg_0_76 dst_reg_0_114)
           (= dst_reg_0_77 dst_reg_0_115)
           (= dst_reg_0_78 dst_reg_0_116)
           (= dst_reg_0_79 dst_reg_0_117)
           (= dst_reg_0_80 dst_reg_0_118)
           (= dst_reg_0_81 dst_reg_0_119)
           (= dst_reg_0_82 dst_reg_0_120)
           (= dst_reg_0_83 dst_reg_0_121)
           (= add64.i_0_105 dst_reg_0_122)
           (= add79.i_0_113 dst_reg_0_123)
           (= dst_reg_0_86 dst_reg_0_124)
           (= dst_reg_0_87 dst_reg_0_125)
           (= dst_reg_0_88 dst_reg_0_126)
           (= dst_reg_0_89 dst_reg_0_127)))))
BasicBlock: if.end27.i, Size:6
  (= dst_reg_0_6 i219.i_0_60)
  (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))
  (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 #x0000000000000000)
     (= cmp.i35.i_0_63 #b1)
     (= cmp.i35.i_0_63 #b0))
  (ite (bvsgt add.i.i_0_61 i219.i_0_60)
     (= cmp1.i.i_0_64 #b1)
     (= cmp1.i.i_0_64 #b0))
  (ite (bvslt add.i.i_0_61 i219.i_0_60)
     (= cmp2.i.i_0_65 #b1)
     (= cmp2.i.i_0_65 #b0))
  (ite (= cmp.i35.i_0_63 #b1)
     (= retval.0.i.i_0_66 cmp1.i.i_0_64)
     (= retval.0.i.i_0_66 cmp2.i.i_0_65))
BasicBlock: if.else75.i, Size:1
  (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
  (or (and (= cmp31.i330.i_0_172 #b1) a!4)
      (and (= cmp31.i330.i_0_172 #b0) a!4)
      a!5
      (and (= cmp1.i325.i_0_157 #b1) (and (= cmp.i323.i_0_154 #b0) a!3))
      (and (= cmp.i323.i_0_154 #b1) a!3))))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
land.lhs.true.i
  (= tobool.not.i.i_0_37 #b1)
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
if.then72.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_0_37 #b0)
if.then26.i
  (or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
lor.lhs.false52.i
  (and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end62.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b0) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i40.i_0_73 #b1) (and (= retval.0.i.i_0_66 #b0) a!1))
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.then56.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
if.else.i
  (and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6)
      (and (= cmp.i.i.i.i_0_207 #b1) a!6)
      (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
      (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))))))))
lor.lhs.false67.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
if.end80.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
      (and (= cmp65.i_0_106 #b1) a!2))))
if.end27.i
  (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))
if.else75.i
  (let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
[encodeFunctionBody] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b0) a!6))))))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (or (and (= cmp.i.i.i.i_0_207 #b0) a!6) (and (= cmp.i.i.i.i_0_207 #b1) a!6)))))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
(let ((a!4 (and (= cmp16.i.i_0_167 #b0)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3))))
      (a!5 (and (= cmp16.i.i_0_167 #b1)
                (and (= cmp1.i325.i_0_157 #b0)
                     (and (= cmp.i323.i_0_154 #b0) a!3)))))
(let ((a!6 (or (and (= cmp31.i330.i_0_172 #b1) a!4)
               (and (= cmp31.i330.i_0_172 #b0) a!4)
               a!5
               (and (= cmp1.i325.i_0_157 #b1)
                    (and (= cmp.i323.i_0_154 #b0) a!3))
               (and (= cmp.i323.i_0_154 #b1) a!3))))
  (and (= cmp.i.i.i.i_0_207 #b1) a!6))))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.then56.i, if.end62.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
  (or (and (= retval.0.i40.i_0_73 #b1) (= retval.0.i.i_0_66 #b0) a!1)
      (and (= retval.0.i.i_0_66 #b1) a!1)))
<if.else.i, if.end62.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false52.i, if.then56.i> :(and (= retval.0.i40.i_0_73 #b1)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end27.i, lor.lhs.false52.i> :(and (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_0_51 #b1) (= tobool.not.i.i_0_37 #b0))
    (and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_0_47 #b1) (= tobool.not.i.i_0_37 #b1))
<if.then72.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (or (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)
      (and (= cmp65.i_0_106 #b1) a!2))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.end27.i, if.then56.i> :(and (= retval.0.i.i_0_66 #b1)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))
<entry, land.lhs.true.i> :(= tobool.not.i.i_0_37 #b1)
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b0) (= cmp.i323.i_0_154 #b0) a!3))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b0)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_0_37 #b0)
<if.end62.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b1) a!2)))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (or (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3)
      (and (= cmp.i323.i_0_154 #b1) a!3)))))
<if.end62.i, lor.lhs.false67.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp65.i_0_106 #b0) a!2)))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp31.i330.i_0_172 #b1)
       (= cmp16.i.i_0_167 #b0)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
<lor.lhs.false67.i, if.then72.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b1) (= cmp65.i_0_106 #b0) a!2)))
<if.else75.i, if.end80.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false52.i, if.else.i> :(and (= retval.0.i40.i_0_73 #b0)
     (= retval.0.i.i_0_66 #b0)
     (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
         (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1))))
<if.end80.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b1) a!3))))
<if.end80.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp.i323.i_0_154 #b0) a!3))))
<lor.lhs.false67.i, if.else75.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
  (and (= cmp70.i_0_110 #b0) (= cmp65.i_0_106 #b0) a!2)))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp1.i325.i_0_157 #b1) (= cmp.i323.i_0_154 #b0) a!3))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_0_51 #b0) (= tobool.not.i.i_0_37 #b0))
               (and (= or.cond199.i_0_47 #b0) (= tobool.not.i.i_0_37 #b1)))))
(let ((a!2 (or (and (= retval.0.i40.i_0_73 #b0)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i40.i_0_73 #b1)
                    (and (= retval.0.i.i_0_66 #b0) a!1))
               (and (= retval.0.i.i_0_66 #b1) a!1))))
(let ((a!3 (or (and (= cmp70.i_0_110 #b0) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp70.i_0_110 #b1) (and (= cmp65.i_0_106 #b0) a!2))
               (and (= cmp65.i_0_106 #b1) a!2))))
  (and (= cmp16.i.i_0_167 #b1)
       (= cmp1.i325.i_0_157 #b0)
       (= cmp.i323.i_0_154 #b0)
       a!3))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
34 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,32}) : {
- src_reg: [ [ src_reg_0_289 ] [ ] [ src_reg_0_290 ] [ src_reg_0_291 ] [ src_reg_0_292 ] [ [ src_reg_0_293 ] [ src_reg_0_294 ] ] [ src_reg_0_295 ] [ src_reg_0_296 ] [ src_reg_0_297 ] [ src_reg_0_298 ] [ ] [ src_reg_0_299 ] [ src_reg_0_300 ] [ src_reg_0_301 ] [ src_reg_0_302 ] ] 
- dst_reg: [ [ dst_reg_0_275 ] [ ] [ dst_reg_0_276 ] [ dst_reg_0_277 ] [ dst_reg_0_278 ] [ [ dst_reg_0_279 ] [ dst_reg_0_280 ] ] [ dst_reg_0_281 ] [ dst_reg_0_282 ] [ dst_reg_0_283 ] [ dst_reg_0_284 ] [ ] [ dst_reg_0_285 ] [ dst_reg_0_286 ] [ dst_reg_0_287 ] [ dst_reg_0_288 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ and.i1.i.i_0_271 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
33 = MemoryPhi({if.then.i329.i,24},{if.then17.i.i,27},{if.else.i331.i,20},{if.then32.i.i,30}) : {
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ dst_reg_0_179 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
}
29 = MemoryDef(28) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
28 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ cond27.i.i_0_170 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
25 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
19 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ add79.i_0_113 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ cond.i327.i_0_160 ] [ cond12.i.i_0_164 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
31 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_0_175 ] [ ] [ dst_reg_0_176 ] [ dst_reg_0_177 ] [ dst_reg_0_178 ] [ [ and4.i.i.i_0_274 ] [ dst_reg_0_180 ] ] [ dst_reg_0_181 ] [ dst_reg_0_182 ] [ dst_reg_0_183 ] [ dst_reg_0_184 ] [ ] [ dst_reg_0_185 ] [ dst_reg_0_186 ] [ dst_reg_0_187 ] [ dst_reg_0_188 ] ] 
- src_reg: [ [ src_reg_0_189 ] [ ] [ src_reg_0_190 ] [ src_reg_0_191 ] [ src_reg_0_192 ] [ [ src_reg_0_193 ] [ src_reg_0_194 ] ] [ src_reg_0_195 ] [ src_reg_0_196 ] [ src_reg_0_197 ] [ src_reg_0_198 ] [ ] [ src_reg_0_199 ] [ src_reg_0_200 ] [ src_reg_0_201 ] [ src_reg_0_202 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
13 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
17 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ add64.i_0_105 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ add.i.i_0_61 ] [ add.i36.i_0_68 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
35 = MemoryPhi({if.then72.i,16},{if.else75.i,18}) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ dst_reg_0_118 ] [ dst_reg_0_119 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
36 = MemoryPhi({if.then56.i,12},{if.else.i,14}) : {
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ dst_reg_0_84 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_0_9 ] [ ] [ #x00000000 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
}
15 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_0_76 ] [ ] [ dst_reg_0_77 ] [ dst_reg_0_78 ] [ dst_reg_0_79 ] [ [ dst_reg_0_80 ] [ dst_reg_0_81 ] ] [ dst_reg_0_82 ] [ dst_reg_0_83 ] [ #x0000000000000000 ] [ dst_reg_0_85 ] [ ] [ dst_reg_0_86 ] [ dst_reg_0_87 ] [ dst_reg_0_88 ] [ dst_reg_0_89 ] ] 
- src_reg: [ [ src_reg_0_90 ] [ ] [ src_reg_0_91 ] [ src_reg_0_92 ] [ src_reg_0_93 ] [ [ src_reg_0_94 ] [ src_reg_0_95 ] ] [ src_reg_0_96 ] [ src_reg_0_97 ] [ src_reg_0_98 ] [ src_reg_0_99 ] [ ] [ src_reg_0_100 ] [ src_reg_0_101 ] [ src_reg_0_102 ] [ src_reg_0_103 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ dst_reg_0_120 ] [ dst_reg_0_121 ] [ cond.i327.i_0_160 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
30 = MemoryDef(29) : {
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ cond40.i.i_0_174 ] [ i37.i.i_0_165 ] [ cond40.i.i_0_174 ] [ dst_reg_0_123 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ src_reg_0_128 ] [ ] [ src_reg_0_129 ] [ src_reg_0_130 ] [ src_reg_0_131 ] [ [ src_reg_0_132 ] [ src_reg_0_133 ] ] [ src_reg_0_134 ] [ src_reg_0_135 ] [ src_reg_0_136 ] [ src_reg_0_137 ] [ ] [ src_reg_0_138 ] [ src_reg_0_139 ] [ src_reg_0_140 ] [ src_reg_0_141 ] ] 
- dst_reg: [ [ dst_reg_0_114 ] [ ] [ dst_reg_0_115 ] [ dst_reg_0_116 ] [ dst_reg_0_117 ] [ [ and.i.i_0_151 ] [ or7.i.i_0_148 ] ] [ i38.i.i_0_168 ] [ dst_reg_0_121 ] [ dst_reg_0_122 ] [ cond27.i.i_0_170 ] [ ] [ dst_reg_0_124 ] [ dst_reg_0_125 ] [ dst_reg_0_126 ] [ dst_reg_0_127 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_0_0 ] [ ] [ dst_reg_0_1 ] [ dst_reg_0_2 ] [ dst_reg_0_3 ] [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] [ dst_reg_0_6 ] [ dst_reg_0_7 ] [ dst_reg_0_8 ] [ dst_reg_0_9 ] [ ] [ dst_reg_0_10 ] [ dst_reg_0_11 ] [ dst_reg_0_12 ] [ dst_reg_0_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_0_4 ] [ dst_reg_0_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_4",
	"dst_reg_0_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8",
	"dst_reg_0_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8",
	"dst_reg_0_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8",
	"dst_reg_0_9",
	"",
	"",
	"dst_reg_0_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8",
	"dst_reg_0_9",
	"",
	"",
	"dst_reg_0_10",
	"dst_reg_0_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_0_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_0",
	[
		""
	],
	"dst_reg_0_1",
	"dst_reg_0_2",
	"dst_reg_0_3",
	[
		"dst_reg_0_4",
		"dst_reg_0_5"
	],
	"dst_reg_0_6",
	"dst_reg_0_7",
	"dst_reg_0_8",
	"dst_reg_0_9",
	"",
	"",
	"dst_reg_0_10",
	"dst_reg_0_11",
	"dst_reg_0_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_0_14 ] [ ] [ src_reg_0_15 ] [ src_reg_0_16 ] [ src_reg_0_17 ] [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] [ src_reg_0_20 ] [ src_reg_0_21 ] [ src_reg_0_22 ] [ src_reg_0_23 ] [ ] [ src_reg_0_24 ] [ src_reg_0_25 ] [ src_reg_0_26 ] [ src_reg_0_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_0_18 ] [ src_reg_0_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_0_18 ] [ src_reg_0_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_18",
	"src_reg_0_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22",
	"src_reg_0_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22",
	"src_reg_0_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22",
	"src_reg_0_23",
	"",
	"",
	"src_reg_0_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22",
	"src_reg_0_23",
	"",
	"",
	"src_reg_0_24",
	"src_reg_0_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_0_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_14",
	[
		""
	],
	"src_reg_0_15",
	"src_reg_0_16",
	"src_reg_0_17",
	[
		"src_reg_0_18",
		"src_reg_0_19"
	],
	"src_reg_0_20",
	"src_reg_0_21",
	"src_reg_0_22",
	"src_reg_0_23",
	"",
	"",
	"src_reg_0_24",
	"src_reg_0_25",
	"src_reg_0_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_0_317 ] [ ] [ src_reg_0_318 ] [ src_reg_0_319 ] [ src_reg_0_320 ] [ [ src_reg_0_321 ] [ src_reg_0_322 ] ] [ src_reg_0_323 ] [ src_reg_0_324 ] [ src_reg_0_325 ] [ src_reg_0_326 ] [ ] [ src_reg_0_327 ] [ src_reg_0_328 ] [ src_reg_0_329 ] [ src_reg_0_330 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_0_317 ] [ ] [ src_reg_0_318 ] [ src_reg_0_319 ] [ src_reg_0_320 ] [ [ src_reg_0_321 ] [ src_reg_0_322 ] ] [ src_reg_0_323 ] [ src_reg_0_324 ] [ src_reg_0_325 ] [ src_reg_0_326 ] [ ] [ src_reg_0_327 ] [ src_reg_0_328 ] [ src_reg_0_329 ] [ src_reg_0_330 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_317 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_318 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_319 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_320 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_0_321 ] [ src_reg_0_322 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_0_321 ] [ src_reg_0_322 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_321 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_321"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_322 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_321",
	"src_reg_0_322"
]

[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_323 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_324 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_325 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_0_326 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325",
	"src_reg_0_326"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325",
	"src_reg_0_326",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_327 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325",
	"src_reg_0_326",
	"",
	"",
	"src_reg_0_327"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_0_328 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325",
	"src_reg_0_326",
	"",
	"",
	"src_reg_0_327",
	"src_reg_0_328"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_0_329 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_0_317",
	[
		""
	],
	"src_reg_0_318",
	"src_reg_0_319",
	"src_reg_0_320",
	[
		"src_reg_0_321",
		"src_reg_0_322"
	],
	"src_reg_0_323",
	"src_reg_0_324",
	"src_reg_0_325",
	"src_reg_0_326",
	"",
	"",
	"src_reg_0_327",
	"src_reg_0_328",
	"src_reg_0_329"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_0_303 ] [ ] [ dst_reg_0_304 ] [ dst_reg_0_305 ] [ dst_reg_0_306 ] [ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] [ dst_reg_0_309 ] [ dst_reg_0_310 ] [ dst_reg_0_311 ] [ dst_reg_0_312 ] [ ] [ dst_reg_0_313 ] [ dst_reg_0_314 ] [ dst_reg_0_315 ] [ dst_reg_0_316 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_0_303 ] [ ] [ dst_reg_0_304 ] [ dst_reg_0_305 ] [ dst_reg_0_306 ] [ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] [ dst_reg_0_309 ] [ dst_reg_0_310 ] [ dst_reg_0_311 ] [ dst_reg_0_312 ] [ ] [ dst_reg_0_313 ] [ dst_reg_0_314 ] [ dst_reg_0_315 ] [ dst_reg_0_316 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_303 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_304 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_305 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_306 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_0_307 ] [ dst_reg_0_308 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_307 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_307"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_308 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_307",
	"dst_reg_0_308"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_309 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_310 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_311 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_0_312 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311",
	"dst_reg_0_312"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311",
	"dst_reg_0_312",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_313 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311",
	"dst_reg_0_312",
	"",
	"",
	"dst_reg_0_313"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_0_314 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311",
	"dst_reg_0_312",
	"",
	"",
	"dst_reg_0_313",
	"dst_reg_0_314"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_0_315 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_0_303",
	[
		""
	],
	"dst_reg_0_304",
	"dst_reg_0_305",
	"dst_reg_0_306",
	[
		"dst_reg_0_307",
		"dst_reg_0_308"
	],
	"dst_reg_0_309",
	"dst_reg_0_310",
	"dst_reg_0_311",
	"dst_reg_0_312",
	"",
	"",
	"dst_reg_0_313",
	"dst_reg_0_314",
	"dst_reg_0_315"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_ADD
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_0_0",
      [ "" ],
      "dst_reg_0_1",
      "dst_reg_0_2",
      "dst_reg_0_3",
      [ "dst_reg_0_4", "dst_reg_0_5" ],
      "dst_reg_0_6",
      "dst_reg_0_7",
      "dst_reg_0_8",
      "dst_reg_0_9",
      "",
      "",
      "dst_reg_0_10",
      "dst_reg_0_11",
      "dst_reg_0_12"
   ],
   "src_reg" : [
      "src_reg_0_14",
      [ "" ],
      "src_reg_0_15",
      "src_reg_0_16",
      "src_reg_0_17",
      [ "src_reg_0_18", "src_reg_0_19" ],
      "src_reg_0_20",
      "src_reg_0_21",
      "src_reg_0_22",
      "src_reg_0_23",
      "",
      "",
      "src_reg_0_24",
      "src_reg_0_25",
      "src_reg_0_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_0_303",
      [ "" ],
      "dst_reg_0_304",
      "dst_reg_0_305",
      "dst_reg_0_306",
      [ "dst_reg_0_307", "dst_reg_0_308" ],
      "dst_reg_0_309",
      "dst_reg_0_310",
      "dst_reg_0_311",
      "dst_reg_0_312",
      "",
      "",
      "dst_reg_0_313",
      "dst_reg_0_314",
      "dst_reg_0_315"
   ],
   "src_reg" : [
      "src_reg_0_317",
      [ "" ],
      "src_reg_0_318",
      "src_reg_0_319",
      "src_reg_0_320",
      [ "src_reg_0_321", "src_reg_0_322" ],
      "src_reg_0_323",
      "src_reg_0_324",
      "src_reg_0_325",
      "src_reg_0_326",
      "",
      "",
      "src_reg_0_327",
      "src_reg_0_328",
      "src_reg_0_329"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun src_reg1.sroa.22.0.copyload_0_35 () (_ BitVec 64))
(declare-fun i222.i_0_107 () (_ BitVec 64))
(declare-fun add79.i_0_113 () (_ BitVec 64))
(declare-fun tobool.not.i.i_0_37 () (_ BitVec 1))
(declare-fun or.cond199.i_0_47 () (_ BitVec 1))
(declare-fun or.cond200.i_0_51 () (_ BitVec 1))
(declare-fun retval.0.i.i_0_66 () (_ BitVec 1))
(declare-fun retval.0.i40.i_0_73 () (_ BitVec 1))
(declare-fun cmp65.i_0_106 () (_ BitVec 1))
(declare-fun cmp70.i_0_110 () (_ BitVec 1))
(declare-fun cmp2.i.i_0_65 () (_ BitVec 1))
(declare-fun cmp1.i.i_0_64 () (_ BitVec 1))
(declare-fun cmp.i35.i_0_63 () (_ BitVec 1))
(declare-fun i219.i_0_60 () (_ BitVec 64))
(declare-fun add.i.i_0_61 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_0_32 () (_ BitVec 64))
(declare-fun dst_reg_0_6 () (_ BitVec 64))
(declare-fun dst_reg_0_127 () (_ BitVec 8))
(declare-fun dst_reg_0_89 () (_ BitVec 8))
(declare-fun dst_reg_0_126 () (_ BitVec 32))
(declare-fun dst_reg_0_88 () (_ BitVec 32))
(declare-fun dst_reg_0_125 () (_ BitVec 32))
(declare-fun dst_reg_0_87 () (_ BitVec 32))
(declare-fun dst_reg_0_124 () (_ BitVec 32))
(declare-fun dst_reg_0_86 () (_ BitVec 32))
(declare-fun dst_reg_0_123 () (_ BitVec 64))
(declare-fun dst_reg_0_122 () (_ BitVec 64))
(declare-fun add64.i_0_105 () (_ BitVec 64))
(declare-fun dst_reg_0_121 () (_ BitVec 64))
(declare-fun dst_reg_0_83 () (_ BitVec 64))
(declare-fun dst_reg_0_120 () (_ BitVec 64))
(declare-fun dst_reg_0_82 () (_ BitVec 64))
(declare-fun dst_reg_0_119 () (_ BitVec 64))
(declare-fun dst_reg_0_81 () (_ BitVec 64))
(declare-fun dst_reg_0_118 () (_ BitVec 64))
(declare-fun dst_reg_0_80 () (_ BitVec 64))
(declare-fun dst_reg_0_117 () (_ BitVec 32))
(declare-fun dst_reg_0_79 () (_ BitVec 32))
(declare-fun dst_reg_0_116 () (_ BitVec 32))
(declare-fun dst_reg_0_78 () (_ BitVec 32))
(declare-fun dst_reg_0_115 () (_ BitVec 32))
(declare-fun dst_reg_0_77 () (_ BitVec 32))
(declare-fun dst_reg_0_114 () (_ BitVec 32))
(declare-fun dst_reg_0_76 () (_ BitVec 32))
(declare-fun src_reg_0_141 () (_ BitVec 8))
(declare-fun src_reg_0_103 () (_ BitVec 8))
(declare-fun src_reg_0_140 () (_ BitVec 32))
(declare-fun src_reg_0_102 () (_ BitVec 32))
(declare-fun src_reg_0_139 () (_ BitVec 32))
(declare-fun src_reg_0_101 () (_ BitVec 32))
(declare-fun src_reg_0_138 () (_ BitVec 32))
(declare-fun src_reg_0_100 () (_ BitVec 32))
(declare-fun src_reg_0_137 () (_ BitVec 64))
(declare-fun src_reg_0_99 () (_ BitVec 64))
(declare-fun src_reg_0_136 () (_ BitVec 64))
(declare-fun src_reg_0_98 () (_ BitVec 64))
(declare-fun src_reg_0_135 () (_ BitVec 64))
(declare-fun src_reg_0_97 () (_ BitVec 64))
(declare-fun src_reg_0_134 () (_ BitVec 64))
(declare-fun src_reg_0_96 () (_ BitVec 64))
(declare-fun src_reg_0_133 () (_ BitVec 64))
(declare-fun src_reg_0_95 () (_ BitVec 64))
(declare-fun src_reg_0_132 () (_ BitVec 64))
(declare-fun src_reg_0_94 () (_ BitVec 64))
(declare-fun src_reg_0_131 () (_ BitVec 32))
(declare-fun src_reg_0_93 () (_ BitVec 32))
(declare-fun src_reg_0_130 () (_ BitVec 32))
(declare-fun src_reg_0_92 () (_ BitVec 32))
(declare-fun src_reg_0_129 () (_ BitVec 32))
(declare-fun src_reg_0_91 () (_ BitVec 32))
(declare-fun src_reg_0_128 () (_ BitVec 32))
(declare-fun src_reg_0_90 () (_ BitVec 32))
(declare-fun cmp.i323.i_0_154 () (_ BitVec 1))
(declare-fun i.i322.i_0_152 () (_ BitVec 64))
(declare-fun neg.i.i_0_150 () (_ BitVec 64))
(declare-fun add3.i.i_0_144 () (_ BitVec 64))
(declare-fun and.i.i_0_151 () (_ BitVec 64))
(declare-fun or7.i.i_0_148 () (_ BitVec 64))
(declare-fun xor.i.i_0_146 () (_ BitVec 64))
(declare-fun or.i.i_0_147 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_0_31 () (_ BitVec 64))
(declare-fun i215.i_0_38 () (_ BitVec 64))
(declare-fun add4.i.i_0_145 () (_ BitVec 64))
(declare-fun add.i41.i_0_143 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_0_30 () (_ BitVec 64))
(declare-fun i224.i_0_142 () (_ BitVec 64))
(declare-fun dst_reg_0_4 () (_ BitVec 64))
(declare-fun i223.i_0_109 () (_ BitVec 64))
(declare-fun dst_reg_0_9 () (_ BitVec 64))
(declare-fun i38.i.i_0_168 () (_ BitVec 64))
(declare-fun cmp16.i.i_0_167 () (_ BitVec 1))
(declare-fun i37.i.i_0_165 () (_ BitVec 64))
(declare-fun cmp1.i325.i_0_157 () (_ BitVec 1))
(declare-fun src_reg_0_330 () (_ BitVec 8))
(declare-fun src_reg_0_302 () (_ BitVec 8))
(declare-fun src_reg_0_329 () (_ BitVec 32))
(declare-fun src_reg_0_301 () (_ BitVec 32))
(declare-fun src_reg_0_328 () (_ BitVec 32))
(declare-fun src_reg_0_300 () (_ BitVec 32))
(declare-fun src_reg_0_327 () (_ BitVec 32))
(declare-fun src_reg_0_299 () (_ BitVec 32))
(declare-fun src_reg_0_326 () (_ BitVec 64))
(declare-fun src_reg_0_298 () (_ BitVec 64))
(declare-fun src_reg_0_325 () (_ BitVec 64))
(declare-fun src_reg_0_297 () (_ BitVec 64))
(declare-fun src_reg_0_324 () (_ BitVec 64))
(declare-fun src_reg_0_296 () (_ BitVec 64))
(declare-fun src_reg_0_323 () (_ BitVec 64))
(declare-fun src_reg_0_295 () (_ BitVec 64))
(declare-fun src_reg_0_322 () (_ BitVec 64))
(declare-fun src_reg_0_294 () (_ BitVec 64))
(declare-fun src_reg_0_321 () (_ BitVec 64))
(declare-fun src_reg_0_293 () (_ BitVec 64))
(declare-fun src_reg_0_320 () (_ BitVec 32))
(declare-fun src_reg_0_292 () (_ BitVec 32))
(declare-fun src_reg_0_319 () (_ BitVec 32))
(declare-fun src_reg_0_291 () (_ BitVec 32))
(declare-fun src_reg_0_318 () (_ BitVec 32))
(declare-fun src_reg_0_290 () (_ BitVec 32))
(declare-fun src_reg_0_317 () (_ BitVec 32))
(declare-fun src_reg_0_289 () (_ BitVec 32))
(declare-fun dst_reg_0_316 () (_ BitVec 8))
(declare-fun dst_reg_0_288 () (_ BitVec 8))
(declare-fun dst_reg_0_315 () (_ BitVec 32))
(declare-fun dst_reg_0_287 () (_ BitVec 32))
(declare-fun dst_reg_0_314 () (_ BitVec 32))
(declare-fun dst_reg_0_286 () (_ BitVec 32))
(declare-fun dst_reg_0_313 () (_ BitVec 32))
(declare-fun dst_reg_0_285 () (_ BitVec 32))
(declare-fun dst_reg_0_312 () (_ BitVec 64))
(declare-fun dst_reg_0_284 () (_ BitVec 64))
(declare-fun dst_reg_0_311 () (_ BitVec 64))
(declare-fun dst_reg_0_283 () (_ BitVec 64))
(declare-fun dst_reg_0_310 () (_ BitVec 64))
(declare-fun dst_reg_0_282 () (_ BitVec 64))
(declare-fun dst_reg_0_309 () (_ BitVec 64))
(declare-fun dst_reg_0_281 () (_ BitVec 64))
(declare-fun dst_reg_0_308 () (_ BitVec 64))
(declare-fun dst_reg_0_280 () (_ BitVec 64))
(declare-fun dst_reg_0_307 () (_ BitVec 64))
(declare-fun dst_reg_0_279 () (_ BitVec 64))
(declare-fun dst_reg_0_306 () (_ BitVec 32))
(declare-fun dst_reg_0_278 () (_ BitVec 32))
(declare-fun dst_reg_0_305 () (_ BitVec 32))
(declare-fun dst_reg_0_277 () (_ BitVec 32))
(declare-fun dst_reg_0_304 () (_ BitVec 32))
(declare-fun dst_reg_0_276 () (_ BitVec 32))
(declare-fun dst_reg_0_303 () (_ BitVec 32))
(declare-fun dst_reg_0_275 () (_ BitVec 32))
(declare-fun dst_reg_0_188 () (_ BitVec 8))
(declare-fun dst_reg_0_187 () (_ BitVec 32))
(declare-fun dst_reg_0_186 () (_ BitVec 32))
(declare-fun dst_reg_0_185 () (_ BitVec 32))
(declare-fun dst_reg_0_184 () (_ BitVec 64))
(declare-fun dst_reg_0_183 () (_ BitVec 64))
(declare-fun dst_reg_0_182 () (_ BitVec 64))
(declare-fun dst_reg_0_181 () (_ BitVec 64))
(declare-fun and.i1.i.i_0_271 () (_ BitVec 64))
(declare-fun and4.i.i.i_0_274 () (_ BitVec 64))
(declare-fun dst_reg_0_178 () (_ BitVec 32))
(declare-fun dst_reg_0_177 () (_ BitVec 32))
(declare-fun dst_reg_0_176 () (_ BitVec 32))
(declare-fun dst_reg_0_175 () (_ BitVec 32))
(declare-fun src_reg_0_202 () (_ BitVec 8))
(declare-fun src_reg_0_201 () (_ BitVec 32))
(declare-fun src_reg_0_200 () (_ BitVec 32))
(declare-fun src_reg_0_199 () (_ BitVec 32))
(declare-fun src_reg_0_198 () (_ BitVec 64))
(declare-fun src_reg_0_197 () (_ BitVec 64))
(declare-fun src_reg_0_196 () (_ BitVec 64))
(declare-fun src_reg_0_195 () (_ BitVec 64))
(declare-fun src_reg_0_194 () (_ BitVec 64))
(declare-fun src_reg_0_193 () (_ BitVec 64))
(declare-fun src_reg_0_192 () (_ BitVec 32))
(declare-fun src_reg_0_191 () (_ BitVec 32))
(declare-fun src_reg_0_190 () (_ BitVec 32))
(declare-fun src_reg_0_189 () (_ BitVec 32))
(declare-fun cmp31.i330.i_0_172 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_0_207 () (_ BitVec 1))
(declare-fun dst_reg_0_13 () (_ BitVec 8))
(declare-fun dst_reg_0_12 () (_ BitVec 32))
(declare-fun dst_reg_0_11 () (_ BitVec 32))
(declare-fun dst_reg_0_3 () (_ BitVec 32))
(declare-fun dst_reg_0_2 () (_ BitVec 32))
(declare-fun dst_reg_0_1 () (_ BitVec 32))
(declare-fun src_reg_0_27 () (_ BitVec 8))
(declare-fun src_reg_0_26 () (_ BitVec 32))
(declare-fun src_reg_0_25 () (_ BitVec 32))
(declare-fun src_reg_0_24 () (_ BitVec 32))
(declare-fun src_reg_0_23 () (_ BitVec 64))
(declare-fun src_reg_0_22 () (_ BitVec 64))
(declare-fun src_reg_0_21 () (_ BitVec 64))
(declare-fun src_reg_0_20 () (_ BitVec 64))
(declare-fun src_reg_0_19 () (_ BitVec 64))
(declare-fun src_reg_0_18 () (_ BitVec 64))
(declare-fun src_reg_0_17 () (_ BitVec 32))
(declare-fun src_reg_0_16 () (_ BitVec 32))
(declare-fun src_reg_0_15 () (_ BitVec 32))
(declare-fun dst_reg_0_10 () (_ BitVec 32))
(declare-fun dst_reg_0_85 () (_ BitVec 64))
(declare-fun dst_reg_0_84 () (_ BitVec 64))
(declare-fun dst_reg_0_8 () (_ BitVec 64))
(declare-fun add.i36.i_0_68 () (_ BitVec 64))
(declare-fun dst_reg_0_5 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_0_34 () (_ BitVec 64))
(declare-fun i221.i_0_104 () (_ BitVec 64))
(declare-fun cmp2.i39.i_0_72 () (_ BitVec 1))
(declare-fun cmp1.i38.i_0_71 () (_ BitVec 1))
(declare-fun cmp.i37.i_0_70 () (_ BitVec 1))
(declare-fun i220.i_0_67 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_0_33 () (_ BitVec 64))
(declare-fun dst_reg_0_7 () (_ BitVec 64))
(declare-fun cmp24.old.i_0_49 () (_ BitVec 1))
(declare-fun cmp21.old.i_0_48 () (_ BitVec 1))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_0_254 () Bool)
(declare-fun neg.i.i.i_0_273 () (_ BitVec 64))
(declare-fun or.i.i.i_0_270 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_0_269 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_0_267 () (_ BitVec 64))
(declare-fun sub.i.i.i_0_264 () (_ BitVec 64))
(declare-fun cmp.i.i.i_0_259 () (_ BitVec 1))
(declare-fun and.i.i336.i_0_265 () (_ BitVec 64))
(declare-fun i.i333.i_0_203 () (_ BitVec 64))
(declare-fun notmask.i.i.i_0_262 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_0_260 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_0_256 () (_ BitVec 32))
(declare-fun phi.bo_0_253 () (_ BitVec 32))
(declare-fun cmp24.i_0_45 () (_ BitVec 1))
(declare-fun or.cond198.i_0_44 () (_ BitVec 1))
(declare-fun or.cond197.i_0_42 () (_ BitVec 1))
(declare-fun cmp21.i_0_43 () (_ BitVec 1))
(declare-fun cmp18.not.i_0_40 () (_ BitVec 1))
(declare-fun cmp16.not.i_0_39 () (_ BitVec 1))
(declare-fun src_reg_0_14 () (_ BitVec 32))
(declare-fun dst_reg_0_0 () (_ BitVec 32))
(declare-fun i33.i.i_0_155 () (_ BitVec 64))
(declare-fun i36.i.i_0_162 () (_ BitVec 64))
(declare-fun cond12.i.i_0_164 () (_ BitVec 64))
(declare-fun i35.i.i_0_161 () (_ BitVec 64))
(declare-fun cmp8.i.i_0_163 () (_ BitVec 1))
(declare-fun i34.i.i_0_158 () (_ BitVec 64))
(declare-fun cond.i327.i_0_160 () (_ BitVec 64))
(declare-fun cmp3.i.i_0_159 () (_ BitVec 1))
(declare-fun cond27.i.i_0_170 () (_ BitVec 64))
(declare-fun cmp23.i.i_0_169 () (_ BitVec 1))
(declare-fun cond40.i.i_0_174 () (_ BitVec 64))
(declare-fun cmp36.i.i_0_173 () (_ BitVec 1))
(declare-fun dst_reg_0_180 () (_ BitVec 64))
(declare-fun dst_reg_0_179 () (_ BitVec 64))
(declare-fun xor.i.i.i_0_205 () (_ BitVec 64))
(declare-fun i5.i.i_0_204 () (_ BitVec 64))
(declare-fun add.i.i.i335.i_0_251 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_0_250 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_0_247 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_0_249 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_0_246 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_0_239 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_0_243 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_0_241 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_0_238 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_0_245 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_0_231 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_0_235 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_0_233 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_0_230 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_0_237 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_0_223 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_0_227 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_0_225 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_0_222 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_0_229 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_0_215 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_0_219 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_0_217 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_0_212 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_0_221 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_0_209 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_0_211 () (_ BitVec 64))
(assert
 (let (($x260 (= add79.i_0_113 (bvadd i222.i_0_107 src_reg1.sroa.22.0.copyload_0_35))))
 (let (($x80 (= tobool.not.i.i_0_37 (_ bv1 1))))
 (let (($x743 (= or.cond199.i_0_47 (_ bv0 1))))
 (let (($x745 (and $x743 $x80)))
 (let (($x78 (= tobool.not.i.i_0_37 (_ bv0 1))))
 (let (($x746 (= or.cond200.i_0_51 (_ bv0 1))))
 (let (($x748 (and $x746 $x78)))
 (let (($x750 (or $x748 $x745)))
 (let (($x751 (= retval.0.i.i_0_66 (_ bv1 1))))
 (let (($x753 (and $x751 $x750)))
 (let (($x752 (= retval.0.i.i_0_66 (_ bv0 1))))
 (let (($x754 (and $x752 $x750)))
 (let (($x755 (= retval.0.i40.i_0_73 (_ bv1 1))))
 (let (($x757 (and $x755 $x754)))
 (let (($x759 (or $x757 $x753)))
 (let (($x756 (= retval.0.i40.i_0_73 (_ bv0 1))))
 (let (($x758 (and $x756 $x754)))
 (let (($x760 (or $x758 $x759)))
 (let (($x245 (= cmp65.i_0_106 (_ bv0 1))))
 (let (($x762 (and $x245 $x760)))
 (let (($x255 (= cmp70.i_0_110 (_ bv0 1))))
 (let (($x764 (and $x255 $x762)))
 (let (($x896 (=> $x764 (and $x260))))
 (let (($x140 (= cmp.i35.i_0_63 (_ bv1 1))))
 (let (($x155 (ite $x140 (= retval.0.i.i_0_66 cmp1.i.i_0_64) (= retval.0.i.i_0_66 cmp2.i.i_0_65))))
 (let (($x149 (= cmp2.i.i_0_65 (_ bv0 1))))
 (let (($x150 (= cmp2.i.i_0_65 (_ bv1 1))))
 (let (($x151 (ite (bvslt add.i.i_0_61 i219.i_0_60) $x150 $x149)))
 (let (($x144 (= cmp1.i.i_0_64 (_ bv0 1))))
 (let (($x145 (= cmp1.i.i_0_64 (_ bv1 1))))
 (let (($x146 (ite (bvsgt add.i.i_0_61 i219.i_0_60) $x145 $x144)))
 (let (($x139 (= cmp.i35.i_0_63 (_ bv0 1))))
 (let (($x141 (ite (bvslt src_reg1.sroa.13.0.copyload_0_32 (_ bv0 64)) $x140 $x139)))
 (let (($x136 (= add.i.i_0_61 (bvadd i219.i_0_60 src_reg1.sroa.13.0.copyload_0_32))))
 (let (($x133 (= dst_reg_0_6 i219.i_0_60)))
 (let (($x894 (=> $x750 (and $x133 $x136 $x141 $x146 $x151 $x155))))
 (let (($x316 (= dst_reg_0_89 dst_reg_0_127)))
 (let (($x315 (= dst_reg_0_88 dst_reg_0_126)))
 (let (($x314 (= dst_reg_0_87 dst_reg_0_125)))
 (let (($x313 (= dst_reg_0_86 dst_reg_0_124)))
 (let (($x318 (= add79.i_0_113 dst_reg_0_123)))
 (let (($x317 (= add64.i_0_105 dst_reg_0_122)))
 (let (($x310 (= dst_reg_0_83 dst_reg_0_121)))
 (let (($x309 (= dst_reg_0_82 dst_reg_0_120)))
 (let (($x308 (= dst_reg_0_81 dst_reg_0_119)))
 (let (($x307 (= dst_reg_0_80 dst_reg_0_118)))
 (let (($x306 (= dst_reg_0_79 dst_reg_0_117)))
 (let (($x305 (= dst_reg_0_78 dst_reg_0_116)))
 (let (($x304 (= dst_reg_0_77 dst_reg_0_115)))
 (let (($x303 (= dst_reg_0_76 dst_reg_0_114)))
 (let (($x302 (= src_reg_0_103 src_reg_0_141)))
 (let (($x301 (= src_reg_0_102 src_reg_0_140)))
 (let (($x300 (= src_reg_0_101 src_reg_0_139)))
 (let (($x299 (= src_reg_0_100 src_reg_0_138)))
 (let (($x298 (= src_reg_0_99 src_reg_0_137)))
 (let (($x297 (= src_reg_0_98 src_reg_0_136)))
 (let (($x296 (= src_reg_0_97 src_reg_0_135)))
 (let (($x295 (= src_reg_0_96 src_reg_0_134)))
 (let (($x294 (= src_reg_0_95 src_reg_0_133)))
 (let (($x293 (= src_reg_0_94 src_reg_0_132)))
 (let (($x292 (= src_reg_0_93 src_reg_0_131)))
 (let (($x291 (= src_reg_0_92 src_reg_0_130)))
 (let (($x290 (= src_reg_0_91 src_reg_0_129)))
 (let (($x289 (= src_reg_0_90 src_reg_0_128)))
 (let (($x789 (and $x289 $x290 $x291 $x292 $x293 $x294 $x295 $x296 $x297 $x298 $x299 $x300 $x301 $x302 $x303 $x304 $x305 $x306 $x307 $x308 $x309 $x310 $x317 $x318 $x313 $x314 $x315 $x316)))
 (let (($x790 (=> $x764 $x789)))
 (let (($x312 (= (_ bv18446744073709551615 64) dst_reg_0_123)))
 (let (($x311 (= (_ bv0 64) dst_reg_0_122)))
 (let (($x787 (and $x289 $x290 $x291 $x292 $x293 $x294 $x295 $x296 $x297 $x298 $x299 $x300 $x301 $x302 $x303 $x304 $x305 $x306 $x307 $x308 $x309 $x310 $x311 $x312 $x313 $x314 $x315 $x316)))
 (let (($x246 (= cmp65.i_0_106 (_ bv1 1))))
 (let (($x761 (and $x246 $x760)))
 (let (($x256 (= cmp70.i_0_110 (_ bv1 1))))
 (let (($x763 (and $x256 $x762)))
 (let (($x765 (or $x763 $x761)))
 (let (($x788 (=> $x765 $x787)))
 (let (($x349 (= cmp.i323.i_0_154 (_ bv0 1))))
 (let (($x350 (= cmp.i323.i_0_154 (_ bv1 1))))
 (let (($x351 (ite (bvsgt i.i322.i_0_152 (_ bv18446744073709551615 64)) $x350 $x349)))
 (let (($x346 (= dst_reg_0_82 i.i322.i_0_152)))
 (let (($x344 (= and.i.i_0_151 (bvand add3.i.i_0_144 neg.i.i_0_150))))
 (let (($x341 (= neg.i.i_0_150 (bvxor or7.i.i_0_148 (_ bv18446744073709551615 64)))))
 (let (($x338 (= or7.i.i_0_148 (bvor or.i.i_0_147 xor.i.i_0_146))))
 (let (($x335 (= or.i.i_0_147 (bvor i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))))
 (let (($x332 (= xor.i.i_0_146 (bvxor add4.i.i_0_145 add3.i.i_0_144))))
 (let (($x329 (= add4.i.i_0_145 (bvadd add.i41.i_0_143 add3.i.i_0_144))))
 (let (($x326 (= add3.i.i_0_144 (bvadd i224.i_0_142 src_reg1.sroa.3.0.copyload_0_30))))
 (let (($x323 (= add.i41.i_0_143 (bvadd i215.i_0_38 src_reg1.sroa.10.0.copyload_0_31))))
 (let (($x320 (= dst_reg_0_4 i224.i_0_142)))
 (let (($x891 (and $x320 $x323 $x326 $x329 $x332 $x335 $x338 $x341 $x344 $x346 $x351 $x788 $x790)))
 (let (($x766 (or $x764 $x765)))
 (let (($x892 (=> $x766 $x891)))
 (let (($x257 (ite (bvugt i222.i_0_107 i223.i_0_109) $x256 $x255)))
 (let (($x252 (= i223.i_0_109 (bvxor src_reg1.sroa.22.0.copyload_0_35 (_ bv18446744073709551615 64)))))
 (let (($x249 (= dst_reg_0_9 i222.i_0_107)))
 (let (($x890 (=> $x762 (and $x249 $x252 $x257))))
 (let (($x391 (= dst_reg_0_122 i38.i.i_0_168)))
 (let (($x387 (= cmp16.i.i_0_167 (_ bv0 1))))
 (let (($x388 (= cmp16.i.i_0_167 (_ bv1 1))))
 (let (($x389 (ite (bvsgt i37.i.i_0_165 (_ bv18446744073709551615 64)) $x388 $x387)))
 (let (($x384 (= dst_reg_0_123 i37.i.i_0_165)))
 (let (($x768 (and $x349 $x766)))
 (let (($x356 (= cmp1.i325.i_0_157 (_ bv0 1))))
 (let (($x770 (and $x356 $x768)))
 (let (($x888 (=> $x770 (and $x384 $x389 $x391))))
 (let (($x860 (= src_reg_0_302 src_reg_0_330)))
 (let (($x859 (= src_reg_0_301 src_reg_0_329)))
 (let (($x858 (= src_reg_0_300 src_reg_0_328)))
 (let (($x857 (= src_reg_0_299 src_reg_0_327)))
 (let (($x856 (= src_reg_0_298 src_reg_0_326)))
 (let (($x855 (= src_reg_0_297 src_reg_0_325)))
 (let (($x854 (= src_reg_0_296 src_reg_0_324)))
 (let (($x853 (= src_reg_0_295 src_reg_0_323)))
 (let (($x852 (= src_reg_0_294 src_reg_0_322)))
 (let (($x851 (= src_reg_0_293 src_reg_0_321)))
 (let (($x850 (= src_reg_0_292 src_reg_0_320)))
 (let (($x849 (= src_reg_0_291 src_reg_0_319)))
 (let (($x848 (= src_reg_0_290 src_reg_0_318)))
 (let (($x847 (= src_reg_0_289 src_reg_0_317)))
 (let (($x832 (= dst_reg_0_288 dst_reg_0_316)))
 (let (($x831 (= dst_reg_0_287 dst_reg_0_315)))
 (let (($x830 (= dst_reg_0_286 dst_reg_0_314)))
 (let (($x829 (= dst_reg_0_285 dst_reg_0_313)))
 (let (($x828 (= dst_reg_0_284 dst_reg_0_312)))
 (let (($x827 (= dst_reg_0_283 dst_reg_0_311)))
 (let (($x826 (= dst_reg_0_282 dst_reg_0_310)))
 (let (($x825 (= dst_reg_0_281 dst_reg_0_309)))
 (let (($x824 (= dst_reg_0_280 dst_reg_0_308)))
 (let (($x823 (= dst_reg_0_279 dst_reg_0_307)))
 (let (($x822 (= dst_reg_0_278 dst_reg_0_306)))
 (let (($x821 (= dst_reg_0_277 dst_reg_0_305)))
 (let (($x820 (= dst_reg_0_276 dst_reg_0_304)))
 (let (($x819 (= dst_reg_0_275 dst_reg_0_303)))
 (let (($x742 (= dst_reg_0_188 dst_reg_0_288)))
 (let (($x741 (= dst_reg_0_187 dst_reg_0_287)))
 (let (($x740 (= dst_reg_0_186 dst_reg_0_286)))
 (let (($x739 (= dst_reg_0_185 dst_reg_0_285)))
 (let (($x738 (= dst_reg_0_184 dst_reg_0_284)))
 (let (($x737 (= dst_reg_0_183 dst_reg_0_283)))
 (let (($x736 (= dst_reg_0_182 dst_reg_0_282)))
 (let (($x735 (= dst_reg_0_181 dst_reg_0_281)))
 (let (($x734 (= and.i1.i.i_0_271 dst_reg_0_280)))
 (let (($x733 (= and4.i.i.i_0_274 dst_reg_0_279)))
 (let (($x732 (= dst_reg_0_178 dst_reg_0_278)))
 (let (($x731 (= dst_reg_0_177 dst_reg_0_277)))
 (let (($x730 (= dst_reg_0_176 dst_reg_0_276)))
 (let (($x729 (= dst_reg_0_175 dst_reg_0_275)))
 (let (($x728 (= src_reg_0_202 src_reg_0_302)))
 (let (($x727 (= src_reg_0_201 src_reg_0_301)))
 (let (($x726 (= src_reg_0_200 src_reg_0_300)))
 (let (($x725 (= src_reg_0_199 src_reg_0_299)))
 (let (($x724 (= src_reg_0_198 src_reg_0_298)))
 (let (($x723 (= src_reg_0_197 src_reg_0_297)))
 (let (($x722 (= src_reg_0_196 src_reg_0_296)))
 (let (($x721 (= src_reg_0_195 src_reg_0_295)))
 (let (($x720 (= src_reg_0_194 src_reg_0_294)))
 (let (($x719 (= src_reg_0_193 src_reg_0_293)))
 (let (($x718 (= src_reg_0_192 src_reg_0_292)))
 (let (($x717 (= src_reg_0_191 src_reg_0_291)))
 (let (($x716 (= src_reg_0_190 src_reg_0_290)))
 (let (($x715 (= src_reg_0_189 src_reg_0_289)))
 (let (($x803 (and $x715 $x716 $x717 $x718 $x719 $x720 $x721 $x722 $x723 $x724 $x725 $x726 $x727 $x728 $x729 $x730 $x731 $x732 $x733 $x734 $x735 $x736 $x737 $x738 $x739 $x740 $x741 $x742)))
 (let (($x767 (and $x350 $x766)))
 (let (($x357 (= cmp1.i325.i_0_157 (_ bv1 1))))
 (let (($x769 (and $x357 $x768)))
 (let (($x771 (or $x769 $x767)))
 (let (($x772 (and $x388 $x770)))
 (let (($x773 (and $x387 $x770)))
 (let (($x403 (= cmp31.i330.i_0_172 (_ bv0 1))))
 (let (($x776 (and $x403 $x773)))
 (let (($x404 (= cmp31.i330.i_0_172 (_ bv1 1))))
 (let (($x775 (and $x404 $x773)))
 (let (($x778 (or $x775 (or $x776 (or $x772 $x771)))))
 (let (($x491 (= cmp.i.i.i.i_0_207 (_ bv1 1))))
 (let (($x779 (and $x491 $x778)))
 (let (($x490 (= cmp.i.i.i.i_0_207 (_ bv0 1))))
 (let (($x780 (and $x490 $x778)))
 (let (($x781 (or $x780 $x779)))
 (let (($x804 (=> $x781 $x803)))
 (let (($x714 (= dst_reg_0_13 dst_reg_0_288)))
 (let (($x713 (= dst_reg_0_12 dst_reg_0_287)))
 (let (($x712 (= dst_reg_0_11 dst_reg_0_286)))
 (let (($x711 (= (_ bv0 32) dst_reg_0_285)))
 (let (($x710 (= (_ bv18446744073709551615 64) dst_reg_0_284)))
 (let (($x709 (= (_ bv0 64) dst_reg_0_283)))
 (let (($x708 (= (_ bv9223372036854775807 64) dst_reg_0_282)))
 (let (($x707 (= (_ bv9223372036854775808 64) dst_reg_0_281)))
 (let (($x706 (= (_ bv18446744073709551615 64) dst_reg_0_280)))
 (let (($x705 (= (_ bv0 64) dst_reg_0_279)))
 (let (($x704 (= dst_reg_0_3 dst_reg_0_278)))
 (let (($x703 (= dst_reg_0_2 dst_reg_0_277)))
 (let (($x702 (= dst_reg_0_1 dst_reg_0_276)))
 (let (($x701 (= (_ bv1 32) dst_reg_0_275)))
 (let (($x700 (= src_reg_0_27 src_reg_0_302)))
 (let (($x699 (= src_reg_0_26 src_reg_0_301)))
 (let (($x698 (= src_reg_0_25 src_reg_0_300)))
 (let (($x697 (= src_reg_0_24 src_reg_0_299)))
 (let (($x696 (= src_reg_0_23 src_reg_0_298)))
 (let (($x695 (= src_reg_0_22 src_reg_0_297)))
 (let (($x694 (= src_reg_0_21 src_reg_0_296)))
 (let (($x693 (= src_reg_0_20 src_reg_0_295)))
 (let (($x692 (= src_reg_0_19 src_reg_0_294)))
 (let (($x691 (= src_reg_0_18 src_reg_0_293)))
 (let (($x690 (= src_reg_0_17 src_reg_0_292)))
 (let (($x689 (= src_reg_0_16 src_reg_0_291)))
 (let (($x688 (= src_reg_0_15 src_reg_0_290)))
 (let (($x687 (= (_ bv1 32) src_reg_0_289)))
 (let (($x801 (and $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694 $x695 $x696 $x697 $x698 $x699 $x700 $x701 $x702 $x703 $x704 $x705 $x706 $x707 $x708 $x709 $x710 $x711 $x712 $x713 $x714)))
 (let (($x113 (= or.cond199.i_0_47 (_ bv1 1))))
 (let (($x744 (and $x113 $x80)))
 (let (($x126 (= or.cond200.i_0_51 (_ bv1 1))))
 (let (($x747 (and $x126 $x78)))
 (let (($x749 (or $x747 $x744)))
 (let (($x802 (=> $x749 $x801)))
 (let (($x885 (and $x802 $x804 $x819 $x820 $x821 $x822 $x823 $x824 $x825 $x826 $x827 $x828 $x829 $x830 $x831 $x832 $x847 $x848 $x849 $x850 $x851 $x852 $x853 $x854 $x855 $x856 $x857 $x858 $x859 $x860)))
 (let (($x782 (or $x781 $x749)))
 (let (($x886 (=> $x782 $x885)))
 (let (($x235 (= dst_reg_0_13 dst_reg_0_89)))
 (let (($x234 (= dst_reg_0_12 dst_reg_0_88)))
 (let (($x233 (= dst_reg_0_11 dst_reg_0_87)))
 (let (($x232 (= dst_reg_0_10 dst_reg_0_86)))
 (let (($x231 (= dst_reg_0_9 dst_reg_0_85)))
 (let (($x230 (= dst_reg_0_8 dst_reg_0_84)))
 (let (($x237 (= add.i36.i_0_68 dst_reg_0_83)))
 (let (($x236 (= add.i.i_0_61 dst_reg_0_82)))
 (let (($x227 (= dst_reg_0_5 dst_reg_0_81)))
 (let (($x226 (= dst_reg_0_4 dst_reg_0_80)))
 (let (($x225 (= dst_reg_0_3 dst_reg_0_79)))
 (let (($x224 (= dst_reg_0_2 dst_reg_0_78)))
 (let (($x223 (= dst_reg_0_1 dst_reg_0_77)))
 (let (($x222 (= (_ bv1 32) dst_reg_0_76)))
 (let (($x221 (= src_reg_0_27 src_reg_0_103)))
 (let (($x220 (= src_reg_0_26 src_reg_0_102)))
 (let (($x219 (= src_reg_0_25 src_reg_0_101)))
 (let (($x218 (= src_reg_0_24 src_reg_0_100)))
 (let (($x217 (= src_reg_0_23 src_reg_0_99)))
 (let (($x216 (= src_reg_0_22 src_reg_0_98)))
 (let (($x215 (= src_reg_0_21 src_reg_0_97)))
 (let (($x214 (= src_reg_0_20 src_reg_0_96)))
 (let (($x213 (= src_reg_0_19 src_reg_0_95)))
 (let (($x212 (= src_reg_0_18 src_reg_0_94)))
 (let (($x211 (= src_reg_0_17 src_reg_0_93)))
 (let (($x210 (= src_reg_0_16 src_reg_0_92)))
 (let (($x209 (= src_reg_0_15 src_reg_0_91)))
 (let (($x208 (= (_ bv1 32) src_reg_0_90)))
 (let (($x785 (and $x208 $x209 $x210 $x211 $x212 $x213 $x214 $x215 $x216 $x217 $x218 $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x236 $x237 $x230 $x231 $x232 $x233 $x234 $x235)))
 (let (($x786 (=> $x758 $x785)))
 (let (($x229 (= (_ bv9223372036854775807 64) dst_reg_0_83)))
 (let (($x228 (= (_ bv9223372036854775808 64) dst_reg_0_82)))
 (let (($x783 (and $x208 $x209 $x210 $x211 $x212 $x213 $x214 $x215 $x216 $x217 $x218 $x219 $x220 $x221 $x222 $x223 $x224 $x225 $x226 $x227 $x228 $x229 $x230 $x231 $x232 $x233 $x234 $x235)))
 (let (($x784 (=> $x759 $x783)))
 (let (($x247 (ite (bvult add64.i_0_105 src_reg1.sroa.17.0.copyload_0_34) $x246 $x245)))
 (let (($x242 (= add64.i_0_105 (bvadd i221.i_0_104 src_reg1.sroa.17.0.copyload_0_34))))
 (let (($x239 (= dst_reg_0_8 i221.i_0_104)))
 (let (($x884 (=> $x760 (and $x239 $x242 $x247 $x784 $x786))))
 (let (($x164 (= cmp.i37.i_0_70 (_ bv1 1))))
 (let (($x179 (ite $x164 (= retval.0.i40.i_0_73 cmp1.i38.i_0_71) (= retval.0.i40.i_0_73 cmp2.i39.i_0_72))))
 (let (($x173 (= cmp2.i39.i_0_72 (_ bv0 1))))
 (let (($x174 (= cmp2.i39.i_0_72 (_ bv1 1))))
 (let (($x175 (ite (bvslt add.i36.i_0_68 i220.i_0_67) $x174 $x173)))
 (let (($x168 (= cmp1.i38.i_0_71 (_ bv0 1))))
 (let (($x169 (= cmp1.i38.i_0_71 (_ bv1 1))))
 (let (($x170 (ite (bvsgt add.i36.i_0_68 i220.i_0_67) $x169 $x168)))
 (let (($x163 (= cmp.i37.i_0_70 (_ bv0 1))))
 (let (($x165 (ite (bvslt src_reg1.sroa.15.0.copyload_0_33 (_ bv0 64)) $x164 $x163)))
 (let (($x160 (= add.i36.i_0_68 (bvadd i220.i_0_67 src_reg1.sroa.15.0.copyload_0_33))))
 (let (($x157 (= dst_reg_0_7 i220.i_0_67)))
 (let (($x882 (=> $x754 (and $x157 $x160 $x165 $x170 $x175 $x179))))
 (let (($x118 (= cmp21.old.i_0_48 (_ bv1 1))))
 (let (($x127 (ite $x118 $x126 (= or.cond200.i_0_51 cmp24.old.i_0_49))))
 (let (($x121 (= cmp24.old.i_0_49 (_ bv0 1))))
 (let (($x122 (= cmp24.old.i_0_49 (_ bv1 1))))
 (let (($x107 (bvugt src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35)))
 (let (($x123 (ite $x107 $x122 $x121)))
 (let (($x117 (= cmp21.old.i_0_48 (_ bv0 1))))
 (let (($x99 (bvsgt src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33)))
 (let (($x119 (ite $x99 $x118 $x117)))
 (let (($x880 (=> $x78 (and $x119 $x123 $x127))))
 (let (($x800 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255 $x779)))
 (let (($x799 (= if.end.i.i.i.i___reg_bound_offset.exit.i_0_254 $x780)))
 (let (($x658 (= and4.i.i.i_0_274 (bvand or.i.i.i_0_270 neg.i.i.i_0_273))))
 (let (($x655 (= neg.i.i.i_0_273 (bvxor and.i1.i.i_0_271 (_ bv18446744073709551615 64)))))
 (let (($x652 (= and.i1.i.i_0_271 (bvand retval.sroa.3.0.i.i.i_0_269 or7.i.i_0_148))))
 (let (($x649 (= or.i.i.i_0_270 (bvor retval.sroa.0.0.i.i.i_0_267 and.i.i_0_151))))
 (let (($x625 (= cmp.i.i.i_0_259 (_ bv1 1))))
 (let (($x646 (ite $x625 (= retval.sroa.3.0.i.i.i_0_269 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_0_269 sub.i.i.i_0_264))))
 (let (($x642 (ite $x625 (= retval.sroa.0.0.i.i.i_0_267 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_0_267 and.i.i336.i_0_265))))
 (let (($x638 (= and.i.i336.i_0_265 (bvand notmask.i.i.i_0_262 i.i333.i_0_203))))
 (let (($x635 (= sub.i.i.i_0_264 (bvxor notmask.i.i.i_0_262 (_ bv18446744073709551615 64)))))
 (let (($x632 (= notmask.i.i.i_0_262 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_0_260))))
 (let (($x629 (= sh_prom.i.i.i_0_260 ((_ zero_extend 32) retval.0.i.i.i.i_0_256))))
 (let (($x624 (= cmp.i.i.i_0_259 (_ bv0 1))))
 (let (($x626 (ite (bvugt retval.0.i.i.i.i_0_256 (_ bv63 32)) $x625 $x624)))
 (let (($x620 (= retval.0.i.i.i.i_0_256 (_ bv0 32))))
 (let (($x621 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_0_255 $x620)))
 (let (($x618 (= retval.0.i.i.i.i_0_256 phi.bo_0_253)))
 (let (($x619 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_0_254 $x618)))
 (let (($x877 (and $x619 $x621 $x626 $x629 $x632 $x635 $x638 $x642 $x646 $x649 $x652 $x655 $x658 $x799 $x800)))
 (let (($x878 (=> $x781 $x877)))
 (let (($x115 (ite (= or.cond198.i_0_44 (_ bv1 1)) $x113 (= or.cond199.i_0_47 cmp24.i_0_45))))
 (let (($x108 (= cmp24.i_0_45 (_ bv0 1))))
 (let (($x109 (= cmp24.i_0_45 (_ bv1 1))))
 (let (($x110 (ite $x107 $x109 $x108)))
 (let (($x105 (= or.cond198.i_0_44 (bvor cmp21.i_0_43 or.cond197.i_0_42))))
 (let (($x100 (= cmp21.i_0_43 (_ bv0 1))))
 (let (($x101 (= cmp21.i_0_43 (_ bv1 1))))
 (let (($x102 (ite $x99 $x101 $x100)))
 (let (($x87 (= cmp16.not.i_0_39 (_ bv1 1))))
 (let (($x97 (ite $x87 (= or.cond197.i_0_42 (_ bv1 1)) (= or.cond197.i_0_42 cmp18.not.i_0_40))))
 (let (($x91 (= cmp18.not.i_0_40 (_ bv0 1))))
 (let (($x92 (= cmp18.not.i_0_40 (_ bv1 1))))
 (let (($x90 (and (distinct src_reg1.sroa.17.0.copyload_0_34 src_reg1.sroa.22.0.copyload_0_35) true)))
 (let (($x93 (ite $x90 $x92 $x91)))
 (let (($x86 (= cmp16.not.i_0_39 (_ bv0 1))))
 (let (($x85 (and (distinct src_reg1.sroa.13.0.copyload_0_32 src_reg1.sroa.15.0.copyload_0_33) true)))
 (let (($x88 (ite $x85 $x87 $x86)))
 (let (($x876 (=> $x80 (and $x88 $x93 $x97 $x102 $x105 $x110 $x115))))
 (let (($x83 (= dst_reg_0_5 i215.i_0_38)))
 (let (($x81 (ite (= src_reg1.sroa.10.0.copyload_0_31 (_ bv0 64)) $x80 $x78)))
 (let (($x73 (= src_reg_0_23 src_reg1.sroa.22.0.copyload_0_35)))
 (let (($x71 (= src_reg_0_22 src_reg1.sroa.17.0.copyload_0_34)))
 (let (($x69 (= src_reg_0_21 src_reg1.sroa.15.0.copyload_0_33)))
 (let (($x67 (= src_reg_0_20 src_reg1.sroa.13.0.copyload_0_32)))
 (let (($x65 (= src_reg_0_19 src_reg1.sroa.10.0.copyload_0_31)))
 (let (($x63 (= src_reg_0_18 src_reg1.sroa.3.0.copyload_0_30)))
 (let (($x60 (= src_reg_0_27 src_reg_0_27)))
 (let (($x59 (= src_reg_0_26 src_reg_0_26)))
 (let (($x58 (= src_reg_0_25 src_reg_0_25)))
 (let (($x57 (= src_reg_0_24 src_reg_0_24)))
 (let (($x56 (= src_reg_0_23 src_reg_0_23)))
 (let (($x55 (= src_reg_0_22 src_reg_0_22)))
 (let (($x54 (= src_reg_0_21 src_reg_0_21)))
 (let (($x53 (= src_reg_0_20 src_reg_0_20)))
 (let (($x52 (= src_reg_0_19 src_reg_0_19)))
 (let (($x51 (= src_reg_0_18 src_reg_0_18)))
 (let (($x50 (= src_reg_0_17 src_reg_0_17)))
 (let (($x49 (= src_reg_0_16 src_reg_0_16)))
 (let (($x48 (= src_reg_0_15 src_reg_0_15)))
 (let (($x47 (= src_reg_0_14 src_reg_0_14)))
 (let (($x32 (= dst_reg_0_13 dst_reg_0_13)))
 (let (($x31 (= dst_reg_0_12 dst_reg_0_12)))
 (let (($x30 (= dst_reg_0_11 dst_reg_0_11)))
 (let (($x29 (= dst_reg_0_10 dst_reg_0_10)))
 (let (($x28 (= dst_reg_0_9 dst_reg_0_9)))
 (let (($x27 (= dst_reg_0_8 dst_reg_0_8)))
 (let (($x26 (= dst_reg_0_7 dst_reg_0_7)))
 (let (($x25 (= dst_reg_0_6 dst_reg_0_6)))
 (let (($x24 (= dst_reg_0_5 dst_reg_0_5)))
 (let (($x23 (= dst_reg_0_4 dst_reg_0_4)))
 (let (($x22 (= dst_reg_0_3 dst_reg_0_3)))
 (let (($x21 (= dst_reg_0_2 dst_reg_0_2)))
 (let (($x20 (= dst_reg_0_1 dst_reg_0_1)))
 (let (($x19 (= dst_reg_0_0 dst_reg_0_0)))
 (let (($x358 (ite (bvslt i33.i.i_0_155 (_ bv0 64)) $x357 $x356)))
 (let (($x353 (= dst_reg_0_83 i33.i.i_0_155)))
 (let (($x874 (=> $x768 (and $x353 $x358))))
 (let (($x377 (= cmp8.i.i_0_163 (_ bv1 1))))
 (let (($x382 (ite $x377 (= cond12.i.i_0_164 i35.i.i_0_161) (= cond12.i.i_0_164 i36.i.i_0_162))))
 (let (($x376 (= cmp8.i.i_0_163 (_ bv0 1))))
 (let (($x378 (ite (bvult i35.i.i_0_161 i36.i.i_0_162) $x377 $x376)))
 (let (($x373 (= dst_reg_0_123 i36.i.i_0_162)))
 (let (($x371 (= dst_reg_0_83 i35.i.i_0_161)))
 (let (($x364 (= cmp3.i.i_0_159 (_ bv1 1))))
 (let (($x369 (ite $x364 (= cond.i327.i_0_160 i.i322.i_0_152) (= cond.i327.i_0_160 i34.i.i_0_158))))
 (let (($x363 (= cmp3.i.i_0_159 (_ bv0 1))))
 (let (($x365 (ite (bvugt i.i322.i_0_152 i34.i.i_0_158) $x364 $x363)))
 (let (($x360 (= dst_reg_0_122 i34.i.i_0_158)))
 (let (($x872 (=> $x771 (and $x360 $x365 $x369 $x371 $x373 $x378 $x382))))
 (let (($x395 (= cmp23.i.i_0_169 (_ bv1 1))))
 (let (($x400 (ite $x395 (= cond27.i.i_0_170 i33.i.i_0_155) (= cond27.i.i_0_170 i37.i.i_0_165))))
 (let (($x394 (= cmp23.i.i_0_169 (_ bv0 1))))
 (let (($x396 (ite (bvult i33.i.i_0_155 i37.i.i_0_165) $x395 $x394)))
 (let (($x870 (=> $x772 (and $x396 $x400))))
 (let (($x868 (=> $x773 (and (ite (bvslt i38.i.i_0_168 (_ bv0 64)) $x404 $x403)))))
 (let (($x409 (= cmp36.i.i_0_173 (_ bv1 1))))
 (let (($x414 (ite $x409 (= cond40.i.i_0_174 i.i322.i_0_152) (= cond40.i.i_0_174 i38.i.i_0_168))))
 (let (($x408 (= cmp36.i.i_0_173 (_ bv0 1))))
 (let (($x410 (ite (bvugt i.i322.i_0_152 i38.i.i_0_168) $x409 $x408)))
 (let (($x866 (=> $x775 (and $x410 $x414))))
 (let (($x470 (= dst_reg_0_127 dst_reg_0_188)))
 (let (($x469 (= dst_reg_0_126 dst_reg_0_187)))
 (let (($x468 (= dst_reg_0_125 dst_reg_0_186)))
 (let (($x467 (= dst_reg_0_124 dst_reg_0_185)))
 (let (($x477 (= dst_reg_0_123 dst_reg_0_184)))
 (let (($x480 (= cond40.i.i_0_174 dst_reg_0_183)))
 (let (($x479 (= i37.i.i_0_165 dst_reg_0_182)))
 (let (($x478 (= cond40.i.i_0_174 dst_reg_0_181)))
 (let (($x462 (= or7.i.i_0_148 dst_reg_0_180)))
 (let (($x461 (= and.i.i_0_151 dst_reg_0_179)))
 (let (($x460 (= dst_reg_0_117 dst_reg_0_178)))
 (let (($x459 (= dst_reg_0_116 dst_reg_0_177)))
 (let (($x458 (= dst_reg_0_115 dst_reg_0_176)))
 (let (($x457 (= dst_reg_0_114 dst_reg_0_175)))
 (let (($x456 (= src_reg_0_141 src_reg_0_202)))
 (let (($x455 (= src_reg_0_140 src_reg_0_201)))
 (let (($x454 (= src_reg_0_139 src_reg_0_200)))
 (let (($x453 (= src_reg_0_138 src_reg_0_199)))
 (let (($x452 (= src_reg_0_137 src_reg_0_198)))
 (let (($x451 (= src_reg_0_136 src_reg_0_197)))
 (let (($x450 (= src_reg_0_135 src_reg_0_196)))
 (let (($x449 (= src_reg_0_134 src_reg_0_195)))
 (let (($x448 (= src_reg_0_133 src_reg_0_194)))
 (let (($x447 (= src_reg_0_132 src_reg_0_193)))
 (let (($x446 (= src_reg_0_131 src_reg_0_192)))
 (let (($x445 (= src_reg_0_130 src_reg_0_191)))
 (let (($x444 (= src_reg_0_129 src_reg_0_190)))
 (let (($x443 (= src_reg_0_128 src_reg_0_189)))
 (let (($x797 (and $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x478 $x479 $x480 $x477 $x467 $x468 $x469 $x470)))
 (let (($x798 (=> $x775 $x797)))
 (let (($x473 (= dst_reg_0_122 dst_reg_0_183)))
 (let (($x476 (= dst_reg_0_121 dst_reg_0_182)))
 (let (($x475 (= dst_reg_0_120 dst_reg_0_181)))
 (let (($x795 (and $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x475 $x476 $x473 $x477 $x467 $x468 $x469 $x470)))
 (let (($x796 (=> $x776 $x795)))
 (let (($x474 (= cond27.i.i_0_170 dst_reg_0_184)))
 (let (($x472 (= cond27.i.i_0_170 dst_reg_0_182)))
 (let (($x471 (= i38.i.i_0_168 dst_reg_0_181)))
 (let (($x793 (and $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x471 $x472 $x473 $x474 $x467 $x468 $x469 $x470)))
 (let (($x794 (=> $x772 $x793)))
 (let (($x466 (= cond12.i.i_0_164 dst_reg_0_184)))
 (let (($x465 (= cond.i327.i_0_160 dst_reg_0_183)))
 (let (($x464 (= cond12.i.i_0_164 dst_reg_0_182)))
 (let (($x463 (= cond.i327.i_0_160 dst_reg_0_181)))
 (let (($x791 (and $x443 $x444 $x445 $x446 $x447 $x448 $x449 $x450 $x451 $x452 $x453 $x454 $x455 $x456 $x457 $x458 $x459 $x460 $x461 $x462 $x463 $x464 $x465 $x466 $x467 $x468 $x469 $x470)))
 (let (($x792 (=> $x771 $x791)))
 (let (($x492 (ite (= xor.i.i.i_0_205 (_ bv0 64)) $x491 $x490)))
 (let (($x487 (= xor.i.i.i_0_205 (bvxor i5.i.i_0_204 i.i333.i_0_203))))
 (let (($x484 (= dst_reg_0_184 i5.i.i_0_204)))
 (let (($x482 (= dst_reg_0_183 i.i333.i_0_203)))
 (let (($x864 (=> $x778 (and $x482 $x484 $x487 $x492 $x792 $x794 $x796 $x798))))
 (let (($x614 (= phi.bo_0_253 (bvand add.i.i.i335.i_0_251 (_ bv255 32)))))
 (let (($x610 (= add.i.i.i335.i_0_251 (bvadd num.4.i.i.i.i.i_0_247 i.i.i.i.i.i.neg_0_250))))
 (let (($x607 (= i.i.i.i.i.i.neg_0_250 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_0_249))))
 (let (($x604 (= word.addr.4.lobit.i.i.i.i.i.neg_0_249 (bvlshr word.addr.4.i.i.i.i.i_0_246 (_ bv63 64)))))
 (let (($x583 (= tobool20.not.i.i.i.i.i_0_241 (_ bv1 1))))
 (let (($x600 (ite $x583 (= num.4.i.i.i.i.i_0_247 sub22.i.i.i.i.i_0_243) (= num.4.i.i.i.i.i_0_247 num.3.i.i.i.i.i_0_239))))
 (let (($x596 (ite $x583 (= word.addr.4.i.i.i.i.i_0_246 shl23.i.i.i.i.i_0_245) (= word.addr.4.i.i.i.i.i_0_246 word.addr.3.i.i.i.i.i_0_238))))
 (let (($x592 (= shl23.i.i.i.i.i_0_245 (bvshl word.addr.3.i.i.i.i.i_0_238 (_ bv2 64)))))
 (let (($x588 (= sub22.i.i.i.i.i_0_243 (bvadd num.3.i.i.i.i.i_0_239 (_ bv254 32)))))
 (let (($x582 (= tobool20.not.i.i.i.i.i_0_241 (_ bv0 1))))
 (let (($x584 (ite (bvult word.addr.3.i.i.i.i.i_0_238 (_ bv4611686018427387904 64)) $x583 $x582)))
 (let (($x561 (= tobool14.not.i.i.i.i.i_0_233 (_ bv1 1))))
 (let (($x578 (ite $x561 (= num.3.i.i.i.i.i_0_239 sub16.i.i.i.i.i_0_235) (= num.3.i.i.i.i.i_0_239 num.2.i.i.i.i.i_0_231))))
 (let (($x574 (ite $x561 (= word.addr.3.i.i.i.i.i_0_238 shl17.i.i.i.i.i_0_237) (= word.addr.3.i.i.i.i.i_0_238 word.addr.2.i.i.i.i.i_0_230))))
 (let (($x570 (= shl17.i.i.i.i.i_0_237 (bvshl word.addr.2.i.i.i.i.i_0_230 (_ bv4 64)))))
 (let (($x566 (= sub16.i.i.i.i.i_0_235 (bvadd num.2.i.i.i.i.i_0_231 (_ bv4294967292 32)))))
 (let (($x560 (= tobool14.not.i.i.i.i.i_0_233 (_ bv0 1))))
 (let (($x562 (ite (bvult word.addr.2.i.i.i.i.i_0_230 (_ bv1152921504606846976 64)) $x561 $x560)))
 (let (($x539 (= tobool8.not.i.i.i.i.i_0_225 (_ bv1 1))))
 (let (($x556 (ite $x539 (= num.2.i.i.i.i.i_0_231 sub10.i.i.i.i.i_0_227) (= num.2.i.i.i.i.i_0_231 num.1.i.i.i.i.i_0_223))))
 (let (($x552 (ite $x539 (= word.addr.2.i.i.i.i.i_0_230 shl11.i.i.i.i.i_0_229) (= word.addr.2.i.i.i.i.i_0_230 word.addr.1.i.i.i.i.i_0_222))))
 (let (($x548 (= shl11.i.i.i.i.i_0_229 (bvshl word.addr.1.i.i.i.i.i_0_222 (_ bv8 64)))))
 (let (($x544 (= sub10.i.i.i.i.i_0_227 (bvadd num.1.i.i.i.i.i_0_223 (_ bv4294967288 32)))))
 (let (($x538 (= tobool8.not.i.i.i.i.i_0_225 (_ bv0 1))))
 (let (($x540 (ite (bvult word.addr.1.i.i.i.i.i_0_222 (_ bv72057594037927936 64)) $x539 $x538)))
 (let (($x517 (= tobool2.not.i.i.i.i.i_0_217 (_ bv1 1))))
 (let (($x534 (ite $x517 (= num.1.i.i.i.i.i_0_223 sub4.i.i.i.i.i_0_219) (= num.1.i.i.i.i.i_0_223 spec.select17.i.i.i.i.i_0_215))))
 (let (($x530 (ite $x517 (= word.addr.1.i.i.i.i.i_0_222 shl5.i.i.i.i.i_0_221) (= word.addr.1.i.i.i.i.i_0_222 spec.select.i.i.i.i.i_0_212))))
 (let (($x526 (= shl5.i.i.i.i.i_0_221 (bvshl spec.select.i.i.i.i.i_0_212 (_ bv16 64)))))
 (let (($x522 (= sub4.i.i.i.i.i_0_219 (bvadd spec.select17.i.i.i.i.i_0_215 (_ bv4294967280 32)))))
 (let (($x516 (= tobool2.not.i.i.i.i.i_0_217 (_ bv0 1))))
 (let (($x518 (ite (bvult spec.select.i.i.i.i.i_0_212 (_ bv281474976710656 64)) $x517 $x516)))
 (let (($x497 (= tobool.not.i.i.i.i.i_0_209 (_ bv1 1))))
 (let (($x512 (ite $x497 (= spec.select17.i.i.i.i.i_0_215 (_ bv31 32)) (= spec.select17.i.i.i.i.i_0_215 (_ bv63 32)))))
 (let (($x506 (ite $x497 (= spec.select.i.i.i.i.i_0_212 shl.i.i.i.i.i_0_211) (= spec.select.i.i.i.i.i_0_212 xor.i.i.i_0_205))))
 (let (($x502 (= shl.i.i.i.i.i_0_211 (bvshl xor.i.i.i_0_205 (_ bv32 64)))))
 (let (($x496 (= tobool.not.i.i.i.i.i_0_209 (_ bv0 1))))
 (let (($x498 (ite (bvult xor.i.i.i_0_205 (_ bv4294967296 64)) $x497 $x496)))
 (let (($x861 (and $x498 $x502 $x506 $x512 $x518 $x522 $x526 $x530 $x534 $x540 $x544 $x548 $x552 $x556 $x562 $x566 $x570 $x574 $x578 $x584 $x588 $x592 $x596 $x600 $x604 $x607 $x610 $x614)))
 (let (($x862 (=> $x780 $x861)))
 (and $x862 $x864 $x866 $x868 $x870 $x872 $x874 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x81 $x83 $x876 $x878 $x880 $x882 $x884 $x886 $x888 $x890 $x892 $x894 $x896)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD/BPF_ADD.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_ADD BPF_ADD.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_ADD 0 BPF_ADD.smt2

Finished llvm_to_smt_pass
